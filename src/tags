!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
.datatable 	leveldb/doc/doc.css	/^.datatable {$/;"	c
.datatable td	leveldb/doc/doc.css	/^.datatable td,th {$/;"	c
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/adrian\/gcoin-community-develop\/build-aux\/missing aclocal-1.13$/;"	m
ACLOCAL	secp256k1/Makefile	/^ACLOCAL = ${SHELL} \/home\/adrian\/gcoin-community-develop\/src\/secp256k1\/build-aux\/missing aclocal-1.13$/;"	m
ACLOCAL_AMFLAGS	secp256k1/Makefile	/^ACLOCAL_AMFLAGS = -I build-aux\/m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	secp256k1/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACQUIRED_AFTER	threadsafety.h	22;"	d
ACQUIRED_AFTER	threadsafety.h	41;"	d
ACQUIRED_BEFORE	threadsafety.h	23;"	d
ACQUIRED_BEFORE	threadsafety.h	42;"	d
ADDRMAN_BUCKET_SIZE	addrman.h	138;"	d
ADDRMAN_GETADDR_MAX	addrman.h	165;"	d
ADDRMAN_GETADDR_MAX_PCT	addrman.h	162;"	d
ADDRMAN_HORIZON_DAYS	addrman.h	150;"	d
ADDRMAN_MAX_FAILURES	addrman.h	156;"	d
ADDRMAN_MIN_FAIL_DAYS	addrman.h	159;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	addrman.h	147;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	addrman.h	144;"	d
ADDRMAN_NEW_BUCKET_COUNT	addrman.h	135;"	d
ADDRMAN_RETRIES	addrman.h	153;"	d
ADDRMAN_TRIED_BUCKETS_PER_GROUP	addrman.h	141;"	d
ADDRMAN_TRIED_BUCKET_COUNT	addrman.h	132;"	d
ADD_SERIALIZE_METHODS	addrman.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddrInfo
ADD_SERIALIZE_METHODS	alert.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAlert
ADD_SERIALIZE_METHODS	alert.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CUnsignedAlert
ADD_SERIALIZE_METHODS	amount.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CFeeRate
ADD_SERIALIZE_METHODS	bloom.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBloomFilter
ADD_SERIALIZE_METHODS	cache.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:color_license::Owner_
ADD_SERIALIZE_METHODS	cache.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:order_list::order_info_
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CDiskBlockIndex
ADD_SERIALIZE_METHODS	chain.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskBlockPos
ADD_SERIALIZE_METHODS	compressor.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOutCompressor
ADD_SERIALIZE_METHODS	main.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockFileInfo
ADD_SERIALIZE_METHODS	main.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CDiskTxPos
ADD_SERIALIZE_METHODS	merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleBlock
ADD_SERIALIZE_METHODS	merkleblock.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CPartialMerkleTree
ADD_SERIALIZE_METHODS	netbase.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CNetAddr
ADD_SERIALIZE_METHODS	netbase.h	/^        ADD_SERIALIZE_METHODS;$/;"	m	class:CService
ADD_SERIALIZE_METHODS	policy/licenseinfo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CLicenseInfo
ADD_SERIALIZE_METHODS	primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlock
ADD_SERIALIZE_METHODS	primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeader
ADD_SERIALIZE_METHODS	primitives/block.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CBlockLocator
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:COutPoint
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTransaction
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxIn
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxOut
ADD_SERIALIZE_METHODS	primitives/transaction.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CMutableTransaction
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAddress
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CInv
ADD_SERIALIZE_METHODS	protocol.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMessageHeader
ADD_SERIALIZE_METHODS	rest.cpp	/^    ADD_SERIALIZE_METHODS;$/;"	m	struct:CCoin	file:
ADD_SERIALIZE_METHODS	serialize.h	173;"	d
ADD_SERIALIZE_METHODS	undo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockUndo
ADD_SERIALIZE_METHODS	undo.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CTxUndo
ADD_SERIALIZE_METHODS	wallet/crypter.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMasterKey
ADD_SERIALIZE_METHODS	wallet/hdkeystore.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CHDChain
ADD_SERIALIZE_METHODS	wallet/hdkeystore.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CHDPubKey
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAccount
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CAccountingEntry
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyPool
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CMerkleTx
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CWalletKey
ADD_SERIALIZE_METHODS	wallet/wallet.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CWalletTx
ADD_SERIALIZE_METHODS	wallet/walletdb.h	/^    ADD_SERIALIZE_METHODS;$/;"	m	class:CKeyMetadata
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	secp256k1/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_DEFAULT_VERBOSITY	secp256k1/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_LDFLAGS	Makefile	/^AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	secp256k1/Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_V_AR	Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CC	secp256k1/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CCLD	secp256k1/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	secp256k1/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	secp256k1/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	secp256k1/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_V_lt	secp256k1/Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	Makefile	/^AR = \/usr\/bin\/ar$/;"	m
AR	leveldb/Makefile	/^AR=xcrun ar$/;"	m
AR	secp256k1/Makefile	/^AR = \/usr\/bin\/ar$/;"	m
ARCH_CPU_ARM_FAMILY	leveldb/port/atomic_pointer.h	217;"	d
ARCH_CPU_ARM_FAMILY	leveldb/port/atomic_pointer.h	37;"	d
ARCH_CPU_PPC_FAMILY	leveldb/port/atomic_pointer.h	218;"	d
ARCH_CPU_PPC_FAMILY	leveldb/port/atomic_pointer.h	39;"	d
ARCH_CPU_X86_FAMILY	leveldb/port/atomic_pointer.h	216;"	d
ARCH_CPU_X86_FAMILY	leveldb/port/atomic_pointer.h	33;"	d
ARCH_CPU_X86_FAMILY	leveldb/port/atomic_pointer.h	35;"	d
ARFLAGS	Makefile	/^ARFLAGS = cru$/;"	m
ARRAYLEN	utilstrencodings.h	20;"	d
ASSERT_EQ	leveldb/util/testharness.h	107;"	d
ASSERT_GE	leveldb/util/testharness.h	109;"	d
ASSERT_GT	leveldb/util/testharness.h	110;"	d
ASSERT_LE	leveldb/util/testharness.h	111;"	d
ASSERT_LT	leveldb/util/testharness.h	112;"	d
ASSERT_NE	leveldb/util/testharness.h	108;"	d
ASSERT_OK	leveldb/util/testharness.h	106;"	d
ASSERT_TRUE	leveldb/util/testharness.h	105;"	d
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/adrian\/gcoin-community-develop\/build-aux\/missing autoconf$/;"	m
AUTOCONF	secp256k1/Makefile	/^AUTOCONF = ${SHELL} \/home\/adrian\/gcoin-community-develop\/src\/secp256k1\/build-aux\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/adrian\/gcoin-community-develop\/build-aux\/missing autoheader$/;"	m
AUTOHEADER	secp256k1/Makefile	/^AUTOHEADER = ${SHELL} \/home\/adrian\/gcoin-community-develop\/src\/secp256k1\/build-aux\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/adrian\/gcoin-community-develop\/build-aux\/missing automake-1.13$/;"	m
AUTOMAKE	secp256k1/Makefile	/^AUTOMAKE = ${SHELL} \/home\/adrian\/gcoin-community-develop\/src\/secp256k1\/build-aux\/missing automake-1.13$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
AWK	secp256k1/Makefile	/^AWK = gawk$/;"	m
Abandon	leveldb/table/table_builder.cc	/^void TableBuilder::Abandon() {$/;"	f	class:leveldb::TableBuilder
AbortNode	main.cpp	/^bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage="")$/;"	f	namespace:__anon50
AbortNode	main.cpp	/^bool AbortNode(const std::string& strMessage, const std::string& userMessage="")$/;"	f	namespace:__anon50
AcceptBlock	main.cpp	/^bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)$/;"	f
AcceptBlockHeader	main.cpp	/^bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex** ppindex)$/;"	f
AcceptToMemoryPool	main.cpp	/^bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,$/;"	f
AcceptToMemoryPool	wallet/wallet.cpp	/^bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)$/;"	f	class:CMerkleTx
AcceptedConnection	rpcserver.h	/^class AcceptedConnection$/;"	c
AcceptedConnectionImpl	rpcserver.cpp	/^    AcceptedConnectionImpl($/;"	f	class:AcceptedConnectionImpl
AcceptedConnectionImpl	rpcserver.cpp	/^class AcceptedConnectionImpl : public AcceptedConnection$/;"	c	file:
AccessCoins	coins.cpp	/^const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewCache
AccountFromValue	wallet/rpcwallet.cpp	/^string AccountFromValue(const Value& value)$/;"	f
AcentryToJSON	wallet/rpcwallet.cpp	/^void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Array& ret)$/;"	f
Acquire	leveldb/util/env_posix.cc	/^  bool Acquire() {$/;"	f	class:leveldb::__anon42::MmapLimiter
Acquire	sync.h	/^    void Acquire()$/;"	f	class:CSemaphoreGrant
AcquireLoad	leveldb/db/db_bench.cc	/^  void AcquireLoad(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Acquire_Load	leveldb/port/atomic_pointer.h	/^  inline void* Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Acquire_Load	leveldb/port/port_win.cc	/^void* AtomicPointer::Acquire_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
Activate	cache.cpp	/^bool ActivateAddr::Activate(const type_Color &color, const std::string &addr)$/;"	f	class:activate_addr::ActivateAddr
ActivateAddr	cache.h	/^    ActivateAddr()$/;"	f	class:activate_addr::ActivateAddr
ActivateAddr	cache.h	/^class ActivateAddr : public CacheInterface<Tc_t, Te_t >$/;"	c	namespace:activate_addr
ActivateBestChain	main.cpp	/^bool ActivateBestChain(CValidationState &state, CBlock *pblock) {$/;"	f
ActivateBestChainStep	main.cpp	/^static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {$/;"	f	file:
Add	addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	cache.cpp	/^bool BlockMiner::Add(const string &addr)$/;"	f	class:block_miner::BlockMiner
Add	cache.h	/^    inline bool Add(const Te_t &addr)$/;"	f	class:alliance_member::AllianceMember
Add	cache.h	/^    inline bool Add(const Te_t &e)$/;"	f	class:activate_addr::ActivateAddr
Add	cache.h	/^    virtual bool Add(const Te &e)$/;"	f	class:CacheInterface
Add	checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueue
Add	checkqueue.h	/^    void Add(std::vector<T>& vChecks)$/;"	f	class:CCheckQueueControl
Add	leveldb/db/db_impl.h	/^    void Add(const CompactionStats& c) {$/;"	f	struct:leveldb::DBImpl::CompactionStats
Add	leveldb/db/memtable.cc	/^void MemTable::Add(SequenceNumber s, ValueType type,$/;"	f	class:leveldb::MemTable
Add	leveldb/db/version_set_test.cc	/^  void Add(const char* smallest, const char* largest,$/;"	f	class:leveldb::FindFileTest
Add	leveldb/table/block_builder.cc	/^void BlockBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::BlockBuilder
Add	leveldb/table/table_builder.cc	/^void TableBuilder::Add(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::TableBuilder
Add	leveldb/table/table_test.cc	/^  void Add(const std::string& key, const Slice& value) {$/;"	f	class:leveldb::Constructor
Add	leveldb/table/table_test.cc	/^  void Add(const std::string& key, const std::string& value) {$/;"	f	class:leveldb::Harness
Add	leveldb/util/bloom_test.cc	/^  void Add(const Slice& s) {$/;"	f	class:leveldb::BloomTest
Add	leveldb/util/histogram.cc	/^void Histogram::Add(double value) {$/;"	f	class:leveldb::Histogram
Add	test/script_tests.cpp	/^    TestBuilder& Add(const CScript& script)$/;"	f	class:__anon94::TestBuilder
AddAddressKnown	net.h	/^    void AddAddressKnown(const CAddress& addr)$/;"	f	class:CNode
AddBlock	main.h	/^     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {$/;"	f	class:CBlockFileInfo
AddBytes	leveldb/db/db_bench.cc	/^  void AddBytes(int64_t n) {$/;"	f	class:leveldb::__anon15::Stats
AddCScript	keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	wallet/wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddChain	wallet/hdkeystore.cpp	/^bool CHDKeyStore::AddChain(const CHDChain& chain)$/;"	f	class:CHDKeyStore
AddCryptedKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CCryptoKeyStore
AddCryptedKey	wallet/wallet.cpp	/^bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,$/;"	f	class:CWallet
AddCryptedMasterSeed	wallet/hdkeystore.cpp	/^bool CHDKeyStore::AddCryptedMasterSeed(const HDChainID& hash, const std::vector<unsigned char>& vchCryptedSecret)$/;"	f	class:CHDKeyStore
AddDestData	wallet/wallet.cpp	/^bool CWallet::AddDestData(const CTxDestination &dest, const string &key, const string &value)$/;"	f	class:CWallet
AddFile	leveldb/db/version_edit.h	/^  void AddFile(int level, uint64_t file,$/;"	f	class:leveldb::VersionEdit
AddInputDeletions	leveldb/db/version_set.cc	/^void Compaction::AddInputDeletions(VersionEdit* edit) {$/;"	f	class:leveldb::Compaction
AddInventoryKnown	net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddIterators	leveldb/db/version_set.cc	/^void Version::AddIterators(const ReadOptions& options,$/;"	f	class:leveldb::Version
AddKey	keystore.cpp	/^bool CKeyStore::AddKey(const CKey &key)$/;"	f	class:CKeyStore
AddKey	leveldb/table/filter_block.cc	/^void FilterBlockBuilder::AddKey(const Slice& key) {$/;"	f	class:leveldb::FilterBlockBuilder
AddKeyPool	wallet/wallet.cpp	/^bool CWallet::AddKeyPool(CPubKey& key)$/;"	f	class:CWallet
AddKeyPubKey	keystore.cpp	/^bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CBasicKeyStore
AddKeyPubKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)$/;"	f	class:CCryptoKeyStore
AddKeyPubKey	wallet/wallet.cpp	/^bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)$/;"	f	class:CWallet
AddLiveFiles	leveldb/db/version_set.cc	/^void VersionSet::AddLiveFiles(std::set<uint64_t>* live) {$/;"	f	class:leveldb::VersionSet
AddLocal	net.cpp	/^bool AddLocal(const CNetAddr &addr, int nScore)$/;"	f
AddLocal	net.cpp	/^bool AddLocal(const CService& addr, int nScore)$/;"	f
AddMasterSeed	wallet/hdkeystore.cpp	/^bool CHDKeyStore::AddMasterSeed(const HDChainID& hash, const CKeyingMaterial& masterSeed)$/;"	f	class:CHDKeyStore
AddMessage	leveldb/db/db_bench.cc	/^  void AddMessage(Slice msg) {$/;"	f	class:leveldb::__anon15::Stats
AddNumOfCoins	cache.h	/^    inline void AddNumOfCoins(const type_Color &color, int64_t num_of_coins)$/;"	f	class:color_license::ColorLicense
AddOneShot	net.cpp	/^void AddOneShot(string strDest)$/;"	f
AddOrder	cache.cpp	/^void OrderList::AddOrder(const TxInfo &txinfo)$/;"	f	class:order_list::OrderList
AddOrphanTx	main.cpp	/^bool AddOrphanTx(const CTransaction& tx, NodeId peer)$/;"	f
AddRecord	leveldb/db/log_writer.cc	/^Status Writer::AddRecord(const Slice& slice) {$/;"	f	class:leveldb::log::Writer
AddRef	net.h	/^    CNode* AddRef()$/;"	f	class:CNode
AddTimeData	timedata.cpp	/^void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)$/;"	f
AddToBlockIndex	main.cpp	/^CBlockIndex* AddToBlockIndex(const CBlockHeader& block)$/;"	f
AddToSpends	wallet/wallet.cpp	/^void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)$/;"	f	class:CWallet
AddToSpends	wallet/wallet.cpp	/^void CWallet::AddToSpends(const uint256& wtxid)$/;"	f	class:CWallet
AddToWallet	wallet/wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	wallet/wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)$/;"	f	class:CWallet
AddTransactionsUpdated	txmempool.cpp	/^void CTxMemPool::AddTransactionsUpdated(unsigned int n)$/;"	f	class:CTxMemPool
AddWatchOnly	keystore.cpp	/^bool CBasicKeyStore::AddWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
AddWatchOnly	wallet/wallet.cpp	/^bool CWallet::AddWatchOnly(const CScript &dest)$/;"	f	class:CWallet
AddWhitelistedRange	net.cpp	/^void CNode::AddWhitelistedRange(const CSubNet &subnet)$/;"	f	class:CNode
Add_	addrman.cpp	/^bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)$/;"	f	class:CAddrMan
AddressCurrentlyConnected	net.cpp	/^void AddressCurrentlyConnected(const CService& addr)$/;"	f
AdvertizeLocal	net.cpp	/^void AdvertizeLocal(CNode *pnode)$/;"	f
AfterFile	leveldb/db/version_set.cc	/^static bool AfterFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
AlertKey	chainparams.h	/^    const std::vector<unsigned char>& AlertKey() const { return vAlertPubKey; }$/;"	f	class:CChainParams
AllEntriesFor	leveldb/db/db_test.cc	/^  std::string AllEntriesFor(const Slice& user_key) {$/;"	f	class:leveldb::DBTest
AllianceMember	cache.h	/^    AllianceMember()$/;"	f	class:alliance_member::AllianceMember
AllianceMember	cache.h	/^class AllianceMember : public CacheInterface<Tc_t, Te_t>$/;"	c	namespace:alliance_member
AllianceThreshold	chainparams.h	/^    double AllianceThreshold() const { return nAllianceThreshold; }$/;"	f	class:CChainParams
Allocate	leveldb/util/arena.h	/^inline char* Arena::Allocate(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateAligned	leveldb/util/arena.cc	/^char* Arena::AllocateAligned(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFallback	leveldb/util/arena.cc	/^char* Arena::AllocateFallback(size_t bytes) {$/;"	f	class:leveldb::Arena
AllocateFileRange	util.cpp	/^void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {$/;"	f
AllocateNewBlock	leveldb/util/arena.cc	/^char* Arena::AllocateNewBlock(size_t block_bytes) {$/;"	f	class:leveldb::Arena
AllowFree	txmempool.h	/^inline bool AllowFree(double dPriority)$/;"	f
AllowFreeThreshold	txmempool.h	/^inline double AllowFreeThreshold()$/;"	f
AlreadyHave	main.cpp	/^bool static AlreadyHave(const CInv& inv)$/;"	f	file:
AlternateFunc_CheckTxFeeAndColor	main.cpp	/^bool (*AlternateFunc_CheckTxFeeAndColor)(const CTransaction tx) = NULL;$/;"	v
AlternateFunc_GetCoinsFromCache	main.cpp	/^bool (*AlternateFunc_GetCoinsFromCache)(const COutPoint &outpoint,$/;"	v
AlternateFunc_GetTransaction	main.cpp	/^bool (*AlternateFunc_GetTransaction)(const uint256 &transaction_hash,$/;"	v
AmountFromValue	rpcserver.cpp	/^CAmount AmountFromValue(const Value& value)$/;"	f
AmountFromValueInt64	rpcserver.cpp	/^int64_t AmountFromValueInt64(const Value& value)$/;"	f
AnnotatedMixin	sync.h	/^class LOCKABLE AnnotatedMixin : public PARENT$/;"	c
AppInit	bitcoind.cpp	/^bool AppInit(int argc, char* argv[])$/;"	f
AppInit2	init.cpp	/^bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)$/;"	f
AppInitRPC	bitcoin-cli.cpp	/^static bool AppInitRPC(int argc, char* argv[])$/;"	f	file:
Append	leveldb/db/leveldb_main.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon25::StdoutPrinter
Append	leveldb/db/log_test.cc	/^    virtual Status Append(const Slice& slice) {$/;"	f	class:leveldb::log::LogTest::StringDest
Append	leveldb/db/write_batch.cc	/^void WriteBatchInternal::Append(WriteBatch* dst, const WriteBatch* src) {$/;"	f	class:leveldb::WriteBatchInternal
Append	leveldb/helpers/memenv/memenv.cc	/^  Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon26::FileState
Append	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon26::WritableFileImpl
Append	leveldb/table/table_test.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::StringSink
Append	leveldb/util/env_posix.cc	/^  virtual Status Append(const Slice& data) {$/;"	f	class:leveldb::__anon42::PosixWritableFile
Append	leveldb/util/env_win.cc	/^Status Win32MapFile::Append( const Slice& data )$/;"	f	class:leveldb::Win32::Win32MapFile
AppendEscapedStringTo	leveldb/util/logging.cc	/^void AppendEscapedStringTo(std::string* str, const Slice& value) {$/;"	f	namespace:leveldb
AppendInternalKey	leveldb/db/dbformat.cc	/^void AppendInternalKey(std::string* result, const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
AppendNumberTo	leveldb/util/logging.cc	/^void AppendNumberTo(std::string* str, uint64_t num) {$/;"	f	namespace:leveldb
AppendVersion	leveldb/db/version_set.cc	/^void VersionSet::AppendVersion(Version* v) {$/;"	f	class:leveldb::VersionSet
AppendWithSpace	leveldb/db/db_bench.cc	/^static void AppendWithSpace(std::string* str, Slice msg) {$/;"	f	namespace:leveldb::__anon15
AppliesTo	alert.cpp	/^bool CAlert::AppliesTo(int nVersion, std::string strSubVerIn) const$/;"	f	class:CAlert
AppliesToMe	alert.cpp	/^bool CAlert::AppliesToMe() const$/;"	f	class:CAlert
Apply	leveldb/db/version_set.cc	/^  void Apply(VersionEdit* edit) {$/;"	f	class:leveldb::VersionSet::Builder
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Cancel_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_InvalidType_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Match_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Mint_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Normal_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Order_
Apply	main.cpp	/^    bool Apply(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Vote_
Apply	main.h	/^    virtual bool Apply(const CTransaction &tx, const CBlock *pblock) {$/;"	f	class:type_transaction_handler::HandlerInterface
ApplyDeltas	txmempool.cpp	/^void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)$/;"	f	class:CTxMemPool
ApplyTxInUndo	main.cpp	/^static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint& out)$/;"	f	file:
ApproximateBestSubset	wallet/wallet.cpp	/^static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*, unsigned int> > > vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,$/;"	f	file:
ApproximateMemoryUsage	leveldb/db/memtable.cc	/^size_t MemTable::ApproximateMemoryUsage() { return arena_.MemoryUsage(); }$/;"	f	class:leveldb::MemTable
ApproximateOffsetOf	leveldb/db/version_set.cc	/^uint64_t VersionSet::ApproximateOffsetOf(Version* v, const InternalKey& ikey) {$/;"	f	class:leveldb::VersionSet
ApproximateOffsetOf	leveldb/table/table.cc	/^uint64_t Table::ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::Table
ApproximateOffsetOf	leveldb/table/table_test.cc	/^  uint64_t ApproximateOffsetOf(const Slice& key) const {$/;"	f	class:leveldb::TableConstructor
ArchiveFile	leveldb/db/repair.cc	/^  void ArchiveFile(const std::string& fname) {$/;"	f	class:leveldb::__anon17::Repairer	file:
AreBaseParamsConfigured	chainparamsbase.cpp	/^bool AreBaseParamsConfigured()$/;"	f
AreInputsStandard	main.cpp	/^bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)$/;"	f
Arena	leveldb/util/arena.cc	/^Arena::Arena() {$/;"	f	class:leveldb::Arena
Arena	leveldb/util/arena.h	/^class Arena {$/;"	c	namespace:leveldb
ArenaTest	leveldb/util/arena_test.cc	/^class ArenaTest { };$/;"	c	namespace:leveldb	file:
ArithToUint256	arith_uint256.cpp	/^uint256 ArithToUint256(const arith_uint256 &a)$/;"	f
Array	json/json_spirit_value.h	/^        typedef typename Config::Array_type Array;$/;"	t	class:json_spirit::Value_impl
Array	json/json_spirit_value.h	/^    typedef Config::Array_type  Array;$/;"	t	namespace:json_spirit
ArrayToString	test/arith_uint256_tests.cpp	/^std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f
ArrayToString	test/uint256_tests.cpp	/^std::string ArrayToString(const unsigned char A[], unsigned int width)$/;"	f
Array_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::Array_type Array_type;$/;"	t	class:json_spirit::Semantic_actions
Array_type	json/json_spirit_value.h	/^        typedef std::vector< Value_type > Array_type;$/;"	t	struct:json_spirit::Config_map
Array_type	json/json_spirit_value.h	/^        typedef std::vector< Value_type > Array_type;$/;"	t	struct:json_spirit::Config_vector
Array_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::Array_type Array_type;$/;"	t	class:json_spirit::Generator
AskFor	net.cpp	/^void CNode::AskFor(const CInv& inv)$/;"	f	class:CNode
AssertHeld	leveldb/port/port_posix.h	/^  void AssertHeld() { }$/;"	f	class:leveldb::port::Mutex
AssertHeld	leveldb/port/port_win.cc	/^void Mutex::AssertHeld() {$/;"	f	class:leveldb::port::Mutex
AssertLockHeld	sync.h	96;"	d
AssertLockHeldInternal	sync.cpp	/^void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)$/;"	f
AssertLockHeldInternal	sync.h	/^void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}$/;"	f
AtomicCounter	leveldb/db/db_test.cc	/^  AtomicCounter() : count_(0) { }$/;"	f	class:leveldb::__anon18::AtomicCounter
AtomicCounter	leveldb/db/db_test.cc	/^class AtomicCounter {$/;"	c	namespace:leveldb::__anon18	file:
AtomicPointer	leveldb/port/atomic_pointer.h	/^  AtomicPointer() { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/atomic_pointer.h	/^  explicit AtomicPointer(void* p) : rep_(p) {}$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/atomic_pointer.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	leveldb/port/port_example.h	/^  explicit AtomicPointer(void* v) : rep_(v) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/port_example.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
AtomicPointer	leveldb/port/port_win.cc	/^AtomicPointer::AtomicPointer(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/port_win.h	/^  AtomicPointer() : rep_(NULL) { }$/;"	f	class:leveldb::port::AtomicPointer
AtomicPointer	leveldb/port/port_win.h	/^class AtomicPointer {$/;"	c	namespace:leveldb::port
Attempt	addrman.h	/^    void Attempt(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Attempt_	addrman.cpp	/^void CAddrMan::Attempt_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
AutoCompactTest	leveldb/db/autocompact_test.cc	/^  AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
AutoCompactTest	leveldb/db/autocompact_test.cc	/^class AutoCompactTest {$/;"	c	namespace:leveldb	file:
AvailableCoins	wallet/wallet.cpp	/^void CWallet::AvailableCoins(vector<COutput>& vCoins, const type_Color& color, bool fOnlyConfirmed, const CCoinControl *coinControl,$/;"	f	class:CWallet
AvailableCoinsForType	wallet/wallet.cpp	/^void CWallet::AvailableCoinsForType(vector<COutput>& vCoins, const type_Color& send_color, int type, bool fOnlyConfirmed, bool fIncludeZeroValue) const$/;"	f	class:CWallet
AvailableDataFormatsString	rest.cpp	/^static string AvailableDataFormatsString()$/;"	f	file:
Average	leveldb/util/histogram.cc	/^double Histogram::Average() const {$/;"	f	class:leveldb::Histogram
B	test/util_tests.cpp	280;"	d	file:
B	test/util_tests.cpp	302;"	d	file:
BAD_TXNS_TYPE_	main.cpp	/^const char * const BAD_TXNS_TYPE_ = "bad-txns-type-";$/;"	m	namespace:type_transaction_handler::__anon48	file:
BANDWIDTH	net.h	/^        BANDWIDTH$/;"	e	enum:CNetRecorder::ERecordType
BANVOTE	primitives/transaction.h	/^    BANVOTE,$/;"	e	enum:TransactionType
BDB_CPPFLAGS	Makefile	/^BDB_CPPFLAGS =  -I\/usr\/include\/libdb\/$/;"	m
BDB_LIBS	Makefile	/^BDB_LIBS = -ldb_cxx-5.3$/;"	m
BE32	secp256k1/src/hash_impl.h	31;"	d
BE32	secp256k1/src/hash_impl.h	33;"	d
BEGIN	utilstrencodings.h	16;"	d
BENCHMARKS	leveldb/Makefile	/^BENCHMARKS = db_bench_sqlite3 db_bench_tree_db$/;"	m
BF_EXPLICIT	init.cpp	/^    BF_EXPLICIT     = (1U << 0),$/;"	e	enum:BindFlags	file:
BF_NONE	init.cpp	/^    BF_NONE         = 0,$/;"	e	enum:BindFlags	file:
BF_REPORT_ERROR	init.cpp	/^    BF_REPORT_ERROR = (1U << 1),$/;"	e	enum:BindFlags	file:
BF_WHITELIST	init.cpp	/^    BF_WHITELIST    = (1U << 2),$/;"	e	enum:BindFlags	file:
BGItem	leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	s	class:leveldb::__anon42::PosixEnv	file:
BGQueue	leveldb/util/env_posix.cc	/^  typedef std::deque<BGItem> BGQueue;$/;"	t	class:leveldb::__anon42::PosixEnv	file:
BGThread	leveldb/util/env_posix.cc	/^void PosixEnv::BGThread() {$/;"	f	class:leveldb::__anon42::PosixEnv
BGThreadWrapper	leveldb/util/env_posix.cc	/^  static void* BGThreadWrapper(void* arg) {$/;"	f	class:leveldb::__anon42::PosixEnv	file:
BGWork	leveldb/db/db_impl.cc	/^void DBImpl::BGWork(void* db) {$/;"	f	class:leveldb::DBImpl
BINARY_OP	leveldb/util/testharness.h	77;"	d
BINARY_OP	leveldb/util/testharness.h	93;"	d
BIP0031_VERSION	version.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BIP22ValidationResult	rpcmining.cpp	/^static Value BIP22ValidationResult(const CValidationState& state)$/;"	f	file:
BIP32Hash	hash.cpp	/^void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])$/;"	f
BIP32_EXTKEY_SIZE	pubkey.h	/^const unsigned int BIP32_EXTKEY_SIZE = 74;$/;"	v
BITCOINCONSENSUS_API_VER	script/bitcoinconsensus.h	34;"	d
BITCOIN_ADDRMAN_H	addrman.h	6;"	d
BITCOIN_ALERT_H	alert.h	7;"	d
BITCOIN_AMOUNT_H	amount.h	7;"	d
BITCOIN_ARITH_UINT256_H	arith_uint256.h	7;"	d
BITCOIN_BASE58_H	base58.h	15;"	d
BITCOIN_BITCOINCONSENSUS_H	script/bitcoinconsensus.h	7;"	d
BITCOIN_BLOOM_H	bloom.h	6;"	d
BITCOIN_CHAINPARAMSBASE_H	chainparamsbase.h	7;"	d
BITCOIN_CHAINPARAMSSEEDS_H	chainparamsseeds.h	2;"	d
BITCOIN_CHAINPARAMS_H	chainparams.h	8;"	d
BITCOIN_CHAIN_H	chain.h	7;"	d
BITCOIN_CHECKPOINTS_H	checkpoints.h	6;"	d
BITCOIN_CHECKQUEUE_H	checkqueue.h	6;"	d
BITCOIN_CLIENTVERSION_H	clientversion.h	7;"	d
BITCOIN_COINCONTROL_H	coincontrol.h	6;"	d
BITCOIN_COINS_H	coins.h	7;"	d
BITCOIN_COMPAT_BYTESWAP_H	compat/byteswap.h	6;"	d
BITCOIN_COMPAT_ENDIAN_H	compat/endian.h	6;"	d
BITCOIN_COMPAT_H	compat.h	7;"	d
BITCOIN_COMPAT_SANITY_H	compat/sanity.h	6;"	d
BITCOIN_COMPRESSOR_H	compressor.h	7;"	d
BITCOIN_CONFIG_H	config/bitcoin-config.h	6;"	d
BITCOIN_CONFIG_INCLUDES	Makefile	/^BITCOIN_CONFIG_INCLUDES = -I$(builddir)\/config$/;"	m
BITCOIN_CONSENSUS_CONSENSUS_H	consensus/consensus.h	7;"	d
BITCOIN_CONSENSUS_PARAMS_H	consensus/params.h	7;"	d
BITCOIN_CONSENSUS_VALIDATION_H	consensus/validation.h	7;"	d
BITCOIN_CORE_H	Makefile	/^BITCOIN_CORE_H = \\$/;"	m
BITCOIN_CORE_IO_H	core_io.h	6;"	d
BITCOIN_CRYPTO_COMMON_H	crypto/common.h	6;"	d
BITCOIN_CRYPTO_HMAC_SHA256_H	crypto/hmac_sha256.h	6;"	d
BITCOIN_CRYPTO_HMAC_SHA512_H	crypto/hmac_sha512.h	6;"	d
BITCOIN_CRYPTO_RIPEMD160_H	crypto/ripemd160.h	6;"	d
BITCOIN_CRYPTO_SHA1_H	crypto/sha1.h	6;"	d
BITCOIN_CRYPTO_SHA256_H	crypto/sha256.h	6;"	d
BITCOIN_CRYPTO_SHA512_H	crypto/sha512.h	6;"	d
BITCOIN_ECCRYPTOVERIFY_H	eccryptoverify.h	7;"	d
BITCOIN_ECWRAPPER_H	ecwrapper.h	6;"	d
BITCOIN_HASH_H	hash.h	7;"	d
BITCOIN_INCLUDES	Makefile	/^BITCOIN_INCLUDES = -I$(builddir) -I$(builddir)\/obj $(BOOST_CPPFLAGS) \\$/;"	m
BITCOIN_INIT_H	init.h	7;"	d
BITCOIN_KEYSTORE_H	keystore.h	8;"	d
BITCOIN_KEY_H	key.h	7;"	d
BITCOIN_LEVELDBWRAPPER_H	leveldbwrapper.h	6;"	d
BITCOIN_LIMITEDMAP_H	limitedmap.h	6;"	d
BITCOIN_MAIN_H	main.h	8;"	d
BITCOIN_MEMUSAGE_H	memusage.h	6;"	d
BITCOIN_MERKLEBLOCK_H	merkleblock.h	7;"	d
BITCOIN_MINER_H	miner.h	8;"	d
BITCOIN_MRUSET_H	mruset.h	6;"	d
BITCOIN_NETBASE_H	netbase.h	6;"	d
BITCOIN_NET_H	net.h	7;"	d
BITCOIN_NOUI_H	noui.h	6;"	d
BITCOIN_POLICYESTIMATOR_H	policy/fees.h	6;"	d
BITCOIN_POW_H	pow.h	8;"	d
BITCOIN_PRIMITIVES_BLOCK_H	primitives/block.h	8;"	d
BITCOIN_PRIMITIVES_TRANSACTION_H	primitives/transaction.h	8;"	d
BITCOIN_PROTOCOL_H	protocol.h	11;"	d
BITCOIN_PUBKEY_H	pubkey.h	8;"	d
BITCOIN_RANDOM_H	random.h	7;"	d
BITCOIN_RPCCLIENT_H	rpcclient.h	7;"	d
BITCOIN_RPCPROTOCOL_H	rpcprotocol.h	7;"	d
BITCOIN_RPCSERVER_H	rpcserver.h	8;"	d
BITCOIN_SCHEDULER_H	scheduler.h	6;"	d
BITCOIN_SCRIPT_INTERPRETER_H	script/interpreter.h	7;"	d
BITCOIN_SCRIPT_SCRIPT_ERROR_H	script/script_error.h	7;"	d
BITCOIN_SCRIPT_SCRIPT_H	script/script.h	7;"	d
BITCOIN_SCRIPT_SIGCACHE_H	script/sigcache.h	7;"	d
BITCOIN_SCRIPT_SIGN_H	script/sign.h	7;"	d
BITCOIN_SCRIPT_STANDARD_H	script/standard.h	7;"	d
BITCOIN_SERIALIZE_H	serialize.h	8;"	d
BITCOIN_STREAMS_H	streams.h	7;"	d
BITCOIN_SUPPORT_ALLOCATORS_SECURE_H	support/allocators/secure.h	7;"	d
BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H	support/allocators/zeroafterfree.h	7;"	d
BITCOIN_SUPPORT_CLEANSE_H	support/cleanse.h	7;"	d
BITCOIN_SUPPORT_PAGELOCKER_H	support/pagelocker.h	7;"	d
BITCOIN_SYNC_H	sync.h	7;"	d
BITCOIN_TEST_BIGNUM_H	test/bignum.h	7;"	d
BITCOIN_TEST_H	Makefile	/^BITCOIN_TEST_H = \\$/;"	m
BITCOIN_TEST_SRC	Makefile	/^BITCOIN_TEST_SRC = test\/arith_uint256_tests.cpp \\$/;"	m
BITCOIN_TEST_TEST_BITCOIN_H	test/test_bitcoin.h	2;"	d
BITCOIN_THREADSAFETY_H	threadsafety.h	7;"	d
BITCOIN_TIMEDATA_H	timedata.h	6;"	d
BITCOIN_TXDB_H	txdb.h	7;"	d
BITCOIN_TXMEMPOOL_H	txmempool.h	8;"	d
BITCOIN_UINT256_H	uint256.h	7;"	d
BITCOIN_UI_INTERFACE_H	ui_interface.h	7;"	d
BITCOIN_UNDO_H	undo.h	7;"	d
BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H	univalue/univalue_escapes.h	3;"	d
BITCOIN_UNIVALUE_UNIVALUE_H	univalue/univalue.h	6;"	d
BITCOIN_UTILMONEYSTR_H	utilmoneystr.h	10;"	d
BITCOIN_UTILSTRENCODINGS_H	utilstrencodings.h	10;"	d
BITCOIN_UTILTIME_H	utiltime.h	7;"	d
BITCOIN_UTIL_H	util.h	11;"	d
BITCOIN_VALIDATIONINTERFACE_H	validationinterface.h	7;"	d
BITCOIN_VERSION_H	version.h	6;"	d
BITCOIN_WALLET_CRYPTER_H	wallet/crypter.h	6;"	d
BITCOIN_WALLET_DB_H	wallet/db.h	7;"	d
BITCOIN_WALLET_HDKEYSTORE_H	wallet/hdkeystore.h	6;"	d
BITCOIN_WALLET_WALLETDB_H	wallet/walletdb.h	8;"	d
BITCOIN_WALLET_WALLET_H	wallet/wallet.h	8;"	d
BITCOIN_WALLET_WALLET_ISMINE_H	wallet/wallet_ismine.h	7;"	d
BLOCKFILE_CHUNK_SIZE	main.h	/^static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; \/\/ 16 MiB$/;"	v
BLOCK_DOWNLOAD_WINDOW	main.h	/^static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;$/;"	v
BLOCK_FAILED_CHILD	chain.h	/^    BLOCK_FAILED_CHILD       =   64, \/\/! descends from failed block$/;"	e	enum:BlockStatus
BLOCK_FAILED_MASK	chain.h	/^    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,$/;"	e	enum:BlockStatus
BLOCK_FAILED_VALID	chain.h	/^    BLOCK_FAILED_VALID       =   32, \/\/! stage after last reached validness failed$/;"	e	enum:BlockStatus
BLOCK_HAVE_DATA	chain.h	/^    BLOCK_HAVE_DATA          =    8, \/\/! full block available in blk*.dat$/;"	e	enum:BlockStatus
BLOCK_HAVE_MASK	chain.h	/^    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,$/;"	e	enum:BlockStatus
BLOCK_HAVE_UNDO	chain.h	/^    BLOCK_HAVE_UNDO          =   16, \/\/! undo data available in rev*.dat$/;"	e	enum:BlockStatus
BLOCK_STALLING_TIMEOUT	main.h	/^static const unsigned int BLOCK_STALLING_TIMEOUT = 2;$/;"	v
BLOCK_TEST	leveldb/table/table_test.cc	/^  BLOCK_TEST,$/;"	e	enum:leveldb::TestType	file:
BLOCK_VALID_CHAIN	chain.h	/^    BLOCK_VALID_CHAIN        =    4,$/;"	e	enum:BlockStatus
BLOCK_VALID_HEADER	chain.h	/^    BLOCK_VALID_HEADER       =    1,$/;"	e	enum:BlockStatus
BLOCK_VALID_MASK	chain.h	/^    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |$/;"	e	enum:BlockStatus
BLOCK_VALID_SCRIPTS	chain.h	/^    BLOCK_VALID_SCRIPTS      =    5,$/;"	e	enum:BlockStatus
BLOCK_VALID_TRANSACTIONS	chain.h	/^    BLOCK_VALID_TRANSACTIONS =    3,$/;"	e	enum:BlockStatus
BLOCK_VALID_TREE	chain.h	/^    BLOCK_VALID_TREE         =    2,$/;"	e	enum:BlockStatus
BLOCK_VALID_UNKNOWN	chain.h	/^    BLOCK_VALID_UNKNOWN      =    0,$/;"	e	enum:BlockStatus
BLOOM_UPDATE_ALL	bloom.h	/^    BLOOM_UPDATE_ALL = 1,$/;"	e	enum:bloomflags
BLOOM_UPDATE_MASK	bloom.h	/^    BLOOM_UPDATE_MASK = 3,$/;"	e	enum:bloomflags
BLOOM_UPDATE_NONE	bloom.h	/^    BLOOM_UPDATE_NONE = 0,$/;"	e	enum:bloomflags
BLOOM_UPDATE_P2PUBKEY_ONLY	bloom.h	/^    BLOOM_UPDATE_P2PUBKEY_ONLY = 2,$/;"	e	enum:bloomflags
BM_LogAndApply	leveldb/db/db_test.cc	/^void BM_LogAndApply(int iters, int num_base_files) {$/;"	f	namespace:leveldb
BOOST_AUTO_TEST_CASE	test/Checkpoints_tests.cpp	/^BOOST_AUTO_TEST_CASE(sanity)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banning)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_banscore)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_bantime)$/;"	f
BOOST_AUTO_TEST_CASE	test/DoS_tests.cpp	/^BOOST_AUTO_TEST_CASE(DoS_mapOrphans)$/;"	f
BOOST_AUTO_TEST_CASE	test/accounting_tests.cpp	/^BOOST_AUTO_TEST_CASE(acc_orderupgrade)$/;"	f
BOOST_AUTO_TEST_CASE	test/alert_tests.cpp	/^BOOST_AUTO_TEST_CASE(AlertApplies)$/;"	f
BOOST_AUTO_TEST_CASE	test/alert_tests.cpp	/^BOOST_AUTO_TEST_CASE(AlertNotify)$/;"	f
BOOST_AUTO_TEST_CASE	test/alert_tests.cpp	/^BOOST_AUTO_TEST_CASE(PartitionAlert)$/;"	f
BOOST_AUTO_TEST_CASE	test/allocator_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_LockedPageManagerBase)$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( bitwiseOperators )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( divide )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( getmaxcoverage ) \/\/ some more tests just to get 100% coverage$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( multiply )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( plusMinus )$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( shifts ) { \/\/ "<<"  ">>"  "<<="  ">>="$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( unaryOperators ) \/\/ !    ~    -$/;"	f
BOOST_AUTO_TEST_CASE	test/arith_uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE(bignum_SetCompact)$/;"	f
BOOST_AUTO_TEST_CASE	test/base32_tests.cpp	/^BOOST_AUTO_TEST_CASE(base32_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_DecodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_EncodeBase58)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_keys_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)$/;"	f
BOOST_AUTO_TEST_CASE	test/base58_tests.cpp	/^BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)$/;"	f
BOOST_AUTO_TEST_CASE	test/base64_tests.cpp	/^BOOST_AUTO_TEST_CASE(base64_testvectors)$/;"	f
BOOST_AUTO_TEST_CASE	test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test1) {$/;"	f
BOOST_AUTO_TEST_CASE	test/bip32_tests.cpp	/^BOOST_AUTO_TEST_CASE(bip32_test2) {$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_key)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(bloom_match)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_1)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)$/;"	f
BOOST_AUTO_TEST_CASE	test/bloom_tests.cpp	/^BOOST_AUTO_TEST_CASE(rolling_bloom)$/;"	f
BOOST_AUTO_TEST_CASE	test/checkblock_tests.cpp	/^BOOST_AUTO_TEST_CASE(May15)$/;"	f
BOOST_AUTO_TEST_CASE	test/coins_tests.cpp	/^BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/compress_tests.cpp	/^BOOST_AUTO_TEST_CASE(compress_amounts)$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(ripemd160_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha1_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha256_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/crypto_tests.cpp	/^BOOST_AUTO_TEST_CASE(sha512_testvectors) {$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(boolargno)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubledash)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(intarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/getarg_tests.cpp	/^BOOST_AUTO_TEST_CASE(stringarg)$/;"	f
BOOST_AUTO_TEST_CASE	test/hash_tests.cpp	/^BOOST_AUTO_TEST_CASE(murmurhash3)$/;"	f
BOOST_AUTO_TEST_CASE	test/key_tests.cpp	/^BOOST_AUTO_TEST_CASE(key_test1)$/;"	f
BOOST_AUTO_TEST_CASE	test/main_tests.cpp	/^BOOST_AUTO_TEST_CASE(block_subsidy_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/main_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_combiner_all)$/;"	f
BOOST_AUTO_TEST_CASE	test/mempool_tests.cpp	/^BOOST_AUTO_TEST_CASE(MempoolRemoveTest)$/;"	f
BOOST_AUTO_TEST_CASE	test/miner_tests.cpp	/^BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)$/;"	f
BOOST_AUTO_TEST_CASE	test/mruset_tests.cpp	/^BOOST_AUTO_TEST_CASE(mruset_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_Sign)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_Solver1)$/;"	f
BOOST_AUTO_TEST_CASE	test/multisig_tests.cpp	/^BOOST_AUTO_TEST_CASE(multisig_verify)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_networks)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_properties)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(netbase_splithost)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(onioncat_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/netbase_tests.cpp	/^BOOST_AUTO_TEST_CASE(subnet_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_malleability)$/;"	f
BOOST_AUTO_TEST_CASE	test/pmt_tests.cpp	/^BOOST_AUTO_TEST_CASE(pmt_test1)$/;"	f
BOOST_AUTO_TEST_CASE	test/policyestimator_tests.cpp	/^BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)$/;"	f
BOOST_AUTO_TEST_CASE	test/pow_tests.cpp	/^BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_command.cpp	/^BOOST_AUTO_TEST_CASE(rpc_createrawtransaction_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_command.cpp	/^BOOST_AUTO_TEST_CASE(rpc_decodelicenseinfo_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_command.cpp	/^BOOST_AUTO_TEST_CASE(rpc_decoderawtransaction_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_command.cpp	/^BOOST_AUTO_TEST_CASE(rpc_encodelicenseinfo_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(json_parse_errors)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_parse_monetary_values)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawparams)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_rawsign)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_addmultisig)$/;"	f
BOOST_AUTO_TEST_CASE	test/rpc_wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(rpc_wallet)$/;"	f
BOOST_AUTO_TEST_CASE	test/sanity_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_sanity)$/;"	f
BOOST_AUTO_TEST_CASE	test/scheduler_tests.cpp	/^BOOST_AUTO_TEST_CASE(manythreads)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(AreInputsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(is)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(norecurse)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(set)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(sign)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_P2SH_tests.cpp	/^BOOST_AUTO_TEST_CASE(switchover)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_IsPushOnly_on_invalid_scripts)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_PushData)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_build)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_combineSigs)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_standard_push)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_valid)$/;"	f
BOOST_AUTO_TEST_CASE	test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(creation)$/;"	f
BOOST_AUTO_TEST_CASE	test/scriptnum_tests.cpp	/^BOOST_AUTO_TEST_CASE(operators)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(compactsize)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(doubles_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(floats_conversion)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(insert_delete)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(noncanonical)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(sizes)$/;"	f
BOOST_AUTO_TEST_CASE	test/serialize_tests.cpp	/^BOOST_AUTO_TEST_CASE(varints)$/;"	f
BOOST_AUTO_TEST_CASE	test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_from_data)$/;"	f
BOOST_AUTO_TEST_CASE	test/sighash_tests.cpp	/^BOOST_AUTO_TEST_CASE(sighash_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/sigopcount_tests.cpp	/^BOOST_AUTO_TEST_CASE(GetSigOpCount)$/;"	f
BOOST_AUTO_TEST_CASE	test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(getlocator_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/skiplist_tests.cpp	/^BOOST_AUTO_TEST_CASE(skiplist_test)$/;"	f
BOOST_AUTO_TEST_CASE	test/timedata_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_MedianFilter)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_transaction_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_Get)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_IsStandard)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_invalid)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(tx_valid)$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( basics ) \/\/ constructors, equality, inequality$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( comparison ) \/\/ <= >= < >$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( conversion )$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE( methods ) \/\/ GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_array)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_constructor)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_object)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_readwrite)$/;"	f
BOOST_AUTO_TEST_CASE	test/univalue_tests.cpp	/^BOOST_AUTO_TEST_CASE(univalue_set)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(gettime)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(strprintf_numbers)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatParagraph)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_FormatSubVersion)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(test_ParseInt32)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_FormatMoney)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_GetArg)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_HexStr)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_IsHex)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseHex)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseMoney)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_ParseParameters)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_TimingResistantEqual)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_criticalsection)$/;"	f
BOOST_AUTO_TEST_CASE	test/util_tests.cpp	/^BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)$/;"	f
BOOST_AUTO_TEST_CASE	wallet/test/wallet_tests.cpp	/^BOOST_AUTO_TEST_CASE(coin_selection_tests)$/;"	f
BOOST_CHRONO_LIB	Makefile	/^BOOST_CHRONO_LIB = -lboost_chrono-mt$/;"	m
BOOST_CPPFLAGS	Makefile	/^BOOST_CPPFLAGS = -pthread -I\/usr\/include$/;"	m
BOOST_FILESYSTEM_LIB	Makefile	/^BOOST_FILESYSTEM_LIB = -lboost_filesystem$/;"	m
BOOST_FIXTURE_TEST_CASE	test/cache_activate.cpp	/^BOOST_FIXTURE_TEST_CASE(CacheTestActivateAddress, CacheTestFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/cache_color_license.cpp	/^BOOST_FIXTURE_TEST_CASE(CacheTestColorLicense, CacheTestFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_license.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateLicenseHandlerCheckValidExistedColor, CreateLicenseHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_license.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateLicenseHandlerCheckValidInvalidInfo, CreateLicenseHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_license.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateLicenseHandlerCheckValidNotAlliance, CreateLicenseHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_license.cpp	/^BOOST_FIXTURE_TEST_CASE(CreateLicenseHandlerCheckValidPass, CreateLicenseHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_license.cpp	/^BOOST_FIXTURE_TEST_CASE(TransferLicenseHandlerCheckValidNewLicnse, TransferLicenseHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_license.cpp	/^BOOST_FIXTURE_TEST_CASE(TransferLicenseHandlerCheckValidNonOwner, TransferLicenseHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_normal.cpp	/^BOOST_FIXTURE_TEST_CASE(NormalHandlerApplyMemberOnly, NormalHandlerFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_normal.cpp	/^BOOST_FIXTURE_TEST_CASE(NormalHandlerApplyNoMemberOnly, NormalHandlerFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_normal.cpp	/^BOOST_FIXTURE_TEST_CASE(NormalHandlerCheckValidInactivatedColor, NormalHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_normal.cpp	/^BOOST_FIXTURE_TEST_CASE(NormalHandlerCheckValidInactivatedMember, NormalHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_normal.cpp	/^BOOST_FIXTURE_TEST_CASE(NormalHandlerCheckValidPass, NormalHandlerCheckValidFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/handler_normal.cpp	/^BOOST_FIXTURE_TEST_CASE(NormalHandlerUndo, NormalHandlerFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_getfixedaddress_test, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_getlicenseinfo_test, RPCTestFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_getnewaddress_test, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdaddchain_test_1, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdaddchain_test_2, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdaddchain_test_3, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdaddchain_test_4, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdgetinfo_test, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdkeypoolrefill_test, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdsetchain_test_1, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_hdsetchain_test_2, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_importprivkey_test, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_listwalletaddress_test, RPCTestWalletFixture)$/;"	f
BOOST_FIXTURE_TEST_CASE	test/rpc_command.cpp	/^BOOST_FIXTURE_TEST_CASE(rpc_sendlicensetoaddress_test, RPCTestWalletFixture)$/;"	f
BOOST_LDFLAGS	Makefile	/^BOOST_LDFLAGS = -L\/usr\/lib64$/;"	m
BOOST_LIBS	Makefile	/^BOOST_LIBS = -L\/usr\/lib64 -lboost_system -lboost_filesystem -lboost_program_options-mt -lboost_thread -lboost_chrono-mt$/;"	m
BOOST_PROGRAM_OPTIONS_LIB	Makefile	/^BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options-mt$/;"	m
BOOST_SYSTEM_LIB	Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_TEST_MODULE	test/test_bitcoin.cpp	5;"	d	file:
BOOST_THREAD_LIB	Makefile	/^BOOST_THREAD_LIB = -lboost_thread$/;"	m
BOOST_UNIT_TEST_FRAMEWORK_LIB	Makefile	/^BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework-mt$/;"	m
BREW	Makefile	/^BREW = $/;"	m
BREW	secp256k1/Makefile	/^BREW = $/;"	m
BTN_ABORT	ui_interface.h	/^        BTN_ABORT   = 0x00040000U, \/\/ QMessageBox::Abort$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_APPLY	ui_interface.h	/^        BTN_APPLY   = 0x02000000U, \/\/ QMessageBox::Apply$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CANCEL	ui_interface.h	/^        BTN_CANCEL  = 0x00400000U, \/\/ QMessageBox::Cancel$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_CLOSE	ui_interface.h	/^        BTN_CLOSE   = 0x00200000U, \/\/ QMessageBox::Close$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_DISCARD	ui_interface.h	/^        BTN_DISCARD = 0x00800000U, \/\/ QMessageBox::Discard$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_HELP	ui_interface.h	/^        BTN_HELP    = 0x01000000U, \/\/ QMessageBox::Help$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_IGNORE	ui_interface.h	/^        BTN_IGNORE  = 0x00100000U, \/\/ QMessageBox::Ignore$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_MASK	ui_interface.h	/^        BTN_MASK = (BTN_OK | BTN_YES | BTN_NO | BTN_ABORT | BTN_RETRY | BTN_IGNORE |$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_NO	ui_interface.h	/^        BTN_NO      = 0x00010000U, \/\/ QMessageBox::No$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_OK	ui_interface.h	/^        BTN_OK      = 0x00000400U, \/\/ QMessageBox::Ok$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RESET	ui_interface.h	/^        BTN_RESET   = 0x04000000U, \/\/ QMessageBox::Reset$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_RETRY	ui_interface.h	/^        BTN_RETRY   = 0x00080000U, \/\/ QMessageBox::Retry$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BTN_YES	ui_interface.h	/^        BTN_YES     = 0x00004000U, \/\/ QMessageBox::Yes$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BUILD_DATE	clientversion.cpp	73;"	d	file:
BUILD_DATE	clientversion.cpp	75;"	d	file:
BUILD_DATE	obj/build.h	2;"	d
BUILD_DESC	clientversion.cpp	63;"	d	file:
BUILD_DESC	clientversion.cpp	65;"	d	file:
BUILD_DESC	clientversion.cpp	67;"	d	file:
BUILD_DESC_FROM_COMMIT	clientversion.cpp	55;"	d	file:
BUILD_DESC_FROM_UNKNOWN	clientversion.cpp	58;"	d	file:
BUILD_DESC_WITH_SUFFIX	clientversion.cpp	52;"	d	file:
BUILD_SUFFIX	obj/build.h	1;"	d
BUILD_TEST	Makefile	/^BUILD_TEST = test$/;"	m
BYAMOUNT	policy/licenseinfo.h	/^    BYAMOUNT$/;"	e	enum:FeeTypes
BYSIZE	policy/licenseinfo.h	/^    BYSIZE,$/;"	e	enum:FeeTypes
BackgroundCall	leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCall() {$/;"	f	class:leveldb::DBImpl
BackgroundCompaction	leveldb/db/db_impl.cc	/^void DBImpl::BackgroundCompaction() {$/;"	f	class:leveldb::DBImpl
BackupHeight	cache.h	/^    int BackupHeight() const$/;"	f	class:CacheInterface
BackupWallet	wallet/walletdb.cpp	/^bool BackupWallet(const CWallet& wallet, const std::string& strDest)$/;"	f
Ban	net.cpp	/^bool CNode::Ban(const CNetAddr &addr) {$/;"	f	class:CNode
BanVoteList	main.cpp	/^map<string, vector<map<string, bool> > > BanVoteList;$/;"	v
Base58Prefix	chainparams.h	/^    const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }$/;"	f	class:CChainParams
Base58Type	chainparams.h	/^    enum Base58Type {$/;"	g	class:CChainParams
BaseParams	chainparamsbase.cpp	/^const CBaseChainParams& BaseParams()$/;"	f
BaseSignatureChecker	script/interpreter.h	/^class BaseSignatureChecker$/;"	c
BaseSignatureCreator	script/sign.h	/^    BaseSignatureCreator(const CKeyStore* keystoreIn) : keystore(keystoreIn) {}$/;"	f	class:BaseSignatureCreator
BaseSignatureCreator	script/sign.h	/^class BaseSignatureCreator {$/;"	c
BasicTestingSetup	test/test_bitcoin.cpp	/^BasicTestingSetup::BasicTestingSetup()$/;"	f	class:BasicTestingSetup
BasicTestingSetup	test/test_bitcoin.h	/^struct BasicTestingSetup {$/;"	s
BatchWrite	coins.cpp	/^bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }$/;"	f	class:CCoinsView
BatchWrite	coins.cpp	/^bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }$/;"	f	class:CCoinsViewBacked
BatchWrite	coins.cpp	/^bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
BatchWrite	test/coins_tests.cpp	/^    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)$/;"	f	class:__anon93::CCoinsViewTest
BatchWrite	txdb.cpp	/^bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {$/;"	f	class:CCoinsViewDB
BatchWriteCoins	txdb.cpp	/^void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {$/;"	f	file:
BatchWriteHashBestChain	txdb.cpp	/^void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {$/;"	f	file:
BeforeFile	leveldb/db/version_set.cc	/^static bool BeforeFile(const Comparator* ucmp,$/;"	f	namespace:leveldb
Benchmark	leveldb/db/db_bench.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	leveldb/db/db_bench.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	leveldb/doc/bench/db_bench_sqlite3.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Benchmark	leveldb/doc/bench/db_bench_tree_db.cc	/^  Benchmark()$/;"	f	class:leveldb::Benchmark
Benchmark	leveldb/doc/bench/db_bench_tree_db.cc	/^class Benchmark {$/;"	c	namespace:leveldb	file:
Between	leveldb/db/db_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
Between	leveldb/table/table_test.cc	/^static bool Between(uint64_t val, uint64_t low, uint64_t high) {$/;"	f	namespace:leveldb
BigString	leveldb/db/log_test.cc	/^static std::string BigString(const std::string& partial_string, size_t n) {$/;"	f	namespace:leveldb::log
Bind	init.cpp	/^bool static Bind(const CService &addr, unsigned int flags)$/;"	f	file:
BindFlags	init.cpp	/^enum BindFlags {$/;"	g	file:
BindListenPort	net.cpp	/^bool BindListenPort(const CService &addrBind, string& strError, bool fWhitelisted)$/;"	f
BindWallet	wallet/wallet.h	/^    void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
Block	leveldb/table/block.cc	/^Block::Block(const BlockContents& contents)$/;"	f	class:leveldb::Block
Block	leveldb/table/block.h	/^class Block {$/;"	c	namespace:leveldb
BlockBuilder	leveldb/table/block_builder.cc	/^BlockBuilder::BlockBuilder(const Options* options)$/;"	f	class:leveldb::BlockBuilder
BlockBuilder	leveldb/table/block_builder.h	/^class BlockBuilder {$/;"	c	namespace:leveldb
BlockChecked	rpcmining.cpp	/^    virtual void BlockChecked(const CBlock& block, const CValidationState& stateIn) {$/;"	f	class:submitblock_StateCatcher
BlockChecked	validationinterface.h	/^    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;$/;"	m	struct:CMainSignals
BlockChecked	validationinterface.h	/^    virtual void BlockChecked(const CBlock&, const CValidationState&) {}$/;"	f	class:CValidationInterface
BlockConstructor	leveldb/table/table_test.cc	/^  explicit BlockConstructor(const Comparator* cmp)$/;"	f	class:leveldb::BlockConstructor
BlockConstructor	leveldb/table/table_test.cc	/^class BlockConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
BlockContents	leveldb/table/format.h	/^struct BlockContents {$/;"	s	namespace:leveldb
BlockFunction	leveldb/table/two_level_iterator.cc	/^typedef Iterator* (*BlockFunction)(void*, const ReadOptions&, const Slice&);$/;"	t	namespace:leveldb::__anon30	file:
BlockHandle	leveldb/table/format.h	/^class BlockHandle {$/;"	c	namespace:leveldb
BlockHandle	leveldb/table/format.h	/^inline BlockHandle::BlockHandle()$/;"	f	class:leveldb::BlockHandle
BlockHasher	main.h	/^struct BlockHasher$/;"	s
BlockHeaderSignatureChecker	script/interpreter.h	/^    BlockHeaderSignatureChecker(const CBlock* blockIn) : block(blockIn) {}$/;"	f	class:BlockHeaderSignatureChecker
BlockHeaderSignatureChecker	script/interpreter.h	/^class BlockHeaderSignatureChecker : public BaseSignatureChecker$/;"	c
BlockHeaderSignatureCreator	script/sign.cpp	/^BlockHeaderSignatureCreator::BlockHeaderSignatureCreator(const CKeyStore* keystoreIn, const CBlock* blockIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), block(blockIn), nHashType(nHashTypeIn), checker(block) {}$/;"	f	class:BlockHeaderSignatureCreator
BlockHeaderSignatureCreator	script/sign.h	/^class BlockHeaderSignatureCreator : public BaseSignatureCreator {$/;"	c
BlockMap	main.h	/^typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;$/;"	t
BlockMiner	cache.h	/^    BlockMiner()$/;"	f	class:block_miner::BlockMiner
BlockMiner	cache.h	/^class BlockMiner : public CacheInterface<Tc_t, Te_t>$/;"	c	namespace:block_miner
BlockNotifyCallback	init.cpp	/^static void BlockNotifyCallback(const uint256& hashNewTip)$/;"	f	file:
BlockReader	leveldb/table/table.cc	/^Iterator* Table::BlockReader(void* arg,$/;"	f	class:leveldb::Table
BlockStatus	chain.h	/^enum BlockStatus {$/;"	g
BloomFilterPolicy	leveldb/util/bloom.cc	/^  explicit BloomFilterPolicy(int bits_per_key)$/;"	f	class:leveldb::__anon40::BloomFilterPolicy
BloomFilterPolicy	leveldb/util/bloom.cc	/^class BloomFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb::__anon40	file:
BloomHash	leveldb/util/bloom.cc	/^static uint32_t BloomHash(const Slice& key) {$/;"	f	namespace:leveldb::__anon40
BloomTest	leveldb/util/bloom_test.cc	/^  BloomTest() : policy_(NewBloomFilterPolicy(10)) { }$/;"	f	class:leveldb::BloomTest
BloomTest	leveldb/util/bloom_test.cc	/^class BloomTest {$/;"	c	namespace:leveldb	file:
BoostAsioToCNetAddr	rpcserver.cpp	/^CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address)$/;"	f
Broadcast	validationinterface.h	/^    boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;$/;"	m	struct:CMainSignals
Build	leveldb/db/corruption_test.cc	/^  void Build(int n) {$/;"	f	class:leveldb::CorruptionTest
Build	leveldb/util/bloom_test.cc	/^  void Build() {$/;"	f	class:leveldb::BloomTest
BuildBatchGroup	leveldb/db/db_impl.cc	/^WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {$/;"	f	class:leveldb::DBImpl
BuildCreditingTransaction	test/script_tests.cpp	/^CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)$/;"	f
BuildMerkleTree	primitives/block.cpp	/^uint256 CBlock::BuildMerkleTree(bool* fMutated) const$/;"	f	class:CBlock
BuildSkip	chain.cpp	/^void CBlockIndex::BuildSkip()$/;"	f	class:CBlockIndex
BuildSpendingTransaction	test/script_tests.cpp	/^CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)$/;"	f
BuildTable	leveldb/db/builder.cc	/^Status BuildTable(const std::string& dbname,$/;"	f	namespace:leveldb
Builder	leveldb/db/version_set.cc	/^  Builder(VersionSet* vset, Version* base)$/;"	f	class:leveldb::VersionSet::Builder
Builder	leveldb/db/version_set.cc	/^class VersionSet::Builder {$/;"	c	class:leveldb::VersionSet	file:
BySmallestKey	leveldb/db/version_set.cc	/^  struct BySmallestKey {$/;"	s	class:leveldb::VersionSet::Builder	file:
ByteSize	leveldb/db/write_batch_internal.h	/^  static size_t ByteSize(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
BytewiseComparator	leveldb/util/comparator.cc	/^const Comparator* BytewiseComparator() {$/;"	f	namespace:leveldb
BytewiseComparatorImpl	leveldb/util/comparator.cc	/^  BytewiseComparatorImpl() { }$/;"	f	class:leveldb::__anon44::BytewiseComparatorImpl
BytewiseComparatorImpl	leveldb/util/comparator.cc	/^class BytewiseComparatorImpl : public Comparator {$/;"	c	namespace:leveldb::__anon44	file:
CADDR_TIME_VERSION	version.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CANCEL	primitives/transaction.h	/^    CANCEL,$/;"	e	enum:TransactionType
CAccount	wallet/wallet.h	/^    CAccount()$/;"	f	class:CAccount
CAccount	wallet/wallet.h	/^class CAccount$/;"	c
CAccountingEntry	wallet/wallet.h	/^    CAccountingEntry()$/;"	f	class:CAccountingEntry
CAccountingEntry	wallet/wallet.h	/^class CAccountingEntry$/;"	c
CAddrDB	net.cpp	/^CAddrDB::CAddrDB()$/;"	f	class:CAddrDB
CAddrDB	net.h	/^class CAddrDB$/;"	c
CAddrInfo	addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	addrman.h	/^    CAddrMan()$/;"	f	class:CAddrMan
CAddrMan	addrman.h	/^class CAddrMan$/;"	c
CAddress	protocol.cpp	/^CAddress::CAddress() : CService()$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(CService ipIn, uint64_t nServicesIn) : CService(ipIn)$/;"	f	class:CAddress
CAddress	protocol.h	/^class CAddress : public CService$/;"	c
CAddressBookData	wallet/wallet.h	/^    CAddressBookData()$/;"	f	class:CAddressBookData
CAddressBookData	wallet/wallet.h	/^class CAddressBookData$/;"	c
CAffectedKeysVisitor	wallet/wallet.cpp	/^    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}$/;"	f	class:CAffectedKeysVisitor
CAffectedKeysVisitor	wallet/wallet.cpp	/^class CAffectedKeysVisitor : public boost::static_visitor<void> {$/;"	c	file:
CAlert	alert.h	/^    CAlert()$/;"	f	class:CAlert
CAlert	alert.h	/^class CAlert : public CUnsignedAlert$/;"	c
CAmount	amount.h	/^typedef int64_t CAmount;$/;"	t
CAutoFile	streams.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	streams.h	/^class CAutoFile$/;"	c
CBandwidthRecord	net.h	/^        CBandwidthRecord() {}$/;"	f	class:CNetRecorder::CBandwidthRecord
CBandwidthRecord	net.h	/^        CBandwidthRecord(std::string address, int64_t when, int64_t bandwidth) :$/;"	f	class:CNetRecorder::CBandwidthRecord
CBandwidthRecord	net.h	/^    class CBandwidthRecord : public CRecord$/;"	c	class:CNetRecorder
CBase58Data	base58.cpp	/^CBase58Data::CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	base58.h	/^class CBase58Data$/;"	c
CBaseChainParams	chainparamsbase.h	/^    CBaseChainParams() {}$/;"	f	class:CBaseChainParams
CBaseChainParams	chainparamsbase.h	/^class CBaseChainParams$/;"	c
CBaseMainParams	chainparamsbase.cpp	/^    CBaseMainParams()$/;"	f	class:CBaseMainParams
CBaseMainParams	chainparamsbase.cpp	/^class CBaseMainParams : public CBaseChainParams$/;"	c	file:
CBaseRegTestParams	chainparamsbase.cpp	/^    CBaseRegTestParams()$/;"	f	class:CBaseRegTestParams
CBaseRegTestParams	chainparamsbase.cpp	/^class CBaseRegTestParams : public CBaseTestNetParams$/;"	c	file:
CBaseTestNetParams	chainparamsbase.cpp	/^    CBaseTestNetParams()$/;"	f	class:CBaseTestNetParams
CBaseTestNetParams	chainparamsbase.cpp	/^class CBaseTestNetParams : public CBaseMainParams$/;"	c	file:
CBaseUnitTestParams	chainparamsbase.cpp	/^    CBaseUnitTestParams()$/;"	f	class:CBaseUnitTestParams
CBaseUnitTestParams	chainparamsbase.cpp	/^class CBaseUnitTestParams : public CBaseMainParams$/;"	c	file:
CBasicKeyStore	keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBigNum	test/bignum.h	/^    CBigNum()$/;"	f	class:CBigNum
CBigNum	test/bignum.h	/^    CBigNum(const CBigNum& b)$/;"	f	class:CBigNum
CBigNum	test/bignum.h	/^    CBigNum(long long n)          { BN_init(this); setint64(n); }$/;"	f	class:CBigNum
CBigNum	test/bignum.h	/^    explicit CBigNum(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
CBigNum	test/bignum.h	/^class CBigNum : public BIGNUM$/;"	c
CBitcoinAddress	base58.h	/^    CBitcoinAddress() {}$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^class CBitcoinAddress : public CBase58Data {$/;"	c
CBitcoinAddressVisitor	base58.cpp	/^    CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}$/;"	f	class:__anon63::CBitcoinAddressVisitor
CBitcoinAddressVisitor	base58.cpp	/^class CBitcoinAddressVisitor : public boost::static_visitor<bool>$/;"	c	namespace:__anon63	file:
CBitcoinExtKey	base58.h	/^typedef CBitcoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;$/;"	t
CBitcoinExtKeyBase	base58.h	/^    CBitcoinExtKeyBase() {}$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	base58.h	/^    CBitcoinExtKeyBase(const K &key)$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	base58.h	/^    CBitcoinExtKeyBase(const std::string& strBase58c) {$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	base58.h	/^class CBitcoinExtKeyBase : public CBase58Data$/;"	c
CBitcoinExtPubKey	base58.h	/^typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;$/;"	t
CBitcoinSecret	base58.h	/^    CBitcoinSecret() {}$/;"	f	class:CBitcoinSecret
CBitcoinSecret	base58.h	/^    CBitcoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }$/;"	f	class:CBitcoinSecret
CBitcoinSecret	base58.h	/^class CBitcoinSecret : public CBase58Data$/;"	c
CBlock	primitives/block.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	primitives/block.h	/^    CBlock(const CBlockHeader &header)$/;"	f	class:CBlock
CBlock	primitives/block.h	/^class CBlock : public CBlockHeader$/;"	c
CBlockFileInfo	main.h	/^     CBlockFileInfo() {$/;"	f	class:CBlockFileInfo
CBlockFileInfo	main.h	/^class CBlockFileInfo$/;"	c
CBlockHeader	primitives/block.h	/^    CBlockHeader()$/;"	f	class:CBlockHeader
CBlockHeader	primitives/block.h	/^class CBlockHeader$/;"	c
CBlockHeaderSignatureSerializer	script/interpreter.cpp	/^    CBlockHeaderSignatureSerializer(const CBlockHeader& headerIn, const CScript& scriptCodeIn, int nHashTypeIn) :$/;"	f	class:__anon88::CBlockHeaderSignatureSerializer
CBlockHeaderSignatureSerializer	script/interpreter.cpp	/^class CBlockHeaderSignatureSerializer$/;"	c	namespace:__anon88	file:
CBlockIndex	chain.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	chain.h	/^    CBlockIndex(const CBlockHeader& block)$/;"	f	class:CBlockIndex
CBlockIndex	chain.h	/^class CBlockIndex$/;"	c
CBlockIndexWorkComparator	main.cpp	/^    struct CBlockIndexWorkComparator {$/;"	s	namespace:__anon46	file:
CBlockLocator	primitives/block.h	/^    CBlockLocator() {}$/;"	f	struct:CBlockLocator
CBlockLocator	primitives/block.h	/^    CBlockLocator(const std::vector<uint256>& vHaveIn)$/;"	f	struct:CBlockLocator
CBlockLocator	primitives/block.h	/^struct CBlockLocator$/;"	s
CBlockPolicyEstimator	policy/fees.cpp	/^CBlockPolicyEstimator::CBlockPolicyEstimator(const CFeeRate& _minRelayFee)$/;"	f	class:CBlockPolicyEstimator
CBlockPolicyEstimator	policy/fees.h	/^class CBlockPolicyEstimator$/;"	c
CBlockReject	main.cpp	/^struct CBlockReject {$/;"	s	namespace:__anon47	file:
CBlockTemplate	miner.h	/^struct CBlockTemplate$/;"	s
CBlockTreeDB	txdb.cpp	/^CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDBWrapper(GetDataDir() \/ "blocks" \/ "index", nCacheSize, fMemory, fWipe)$/;"	f	class:CBlockTreeDB
CBlockTreeDB	txdb.h	/^class CBlockTreeDB : public CLevelDBWrapper$/;"	c
CBlockUndo	undo.h	/^class CBlockUndo$/;"	c
CBloomFilter	bloom.cpp	/^CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn) :$/;"	f	class:CBloomFilter
CBloomFilter	bloom.cpp	/^CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :$/;"	f	class:CBloomFilter
CBloomFilter	bloom.h	/^    CBloomFilter() : isFull(true), isEmpty(false), nHashFuncs(0), nTweak(0), nFlags(0) {}$/;"	f	class:CBloomFilter
CBloomFilter	bloom.h	/^class CBloomFilter$/;"	c
CBufferedFile	streams.h	/^    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :$/;"	f	class:CBufferedFile
CBufferedFile	streams.h	/^class CBufferedFile$/;"	c
CC	Makefile	/^CC = gcc$/;"	m
CC	secp256k1/Makefile	/^CC = gcc$/;"	m
CCACHE	Makefile	/^CCACHE = $/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	secp256k1/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CCLD	secp256k1/Makefile	/^CCLD = $(CC)$/;"	m
CCachedAddress	main.cpp	/^    CCachedAddress(const arith_uint256& fake_hash_value)$/;"	f	struct:__anon49::CCachedAddress
CCachedAddress	main.cpp	/^struct CCachedAddress$/;"	s	namespace:__anon49	file:
CCachedOutputAddress	main.cpp	/^    CCachedOutputAddress(const arith_uint256& fake_hash_value) :$/;"	f	struct:__anon49::CCachedOutputAddress
CCachedOutputAddress	main.cpp	/^struct CCachedOutputAddress : CCachedAddress$/;"	s	namespace:__anon49	file:
CChain	chain.h	/^class CChain {$/;"	c
CChainParams	chainparams.h	/^    CChainParams() {}$/;"	f	class:CChainParams
CChainParams	chainparams.h	/^class CChainParams$/;"	c
CCheckQueue	checkqueue.h	/^    CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}$/;"	f	class:CCheckQueue
CCheckQueue	checkqueue.h	/^class CCheckQueue$/;"	c
CCheckQueueControl	checkqueue.h	/^    CCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)$/;"	f	class:CCheckQueueControl
CCheckQueueControl	checkqueue.h	/^class CCheckQueueControl$/;"	c
CCheckpointData	checkpoints.h	/^struct CCheckpointData {$/;"	s	namespace:Checkpoints
CClientUIInterface	ui_interface.h	/^class CClientUIInterface$/;"	c
CCoin	rest.cpp	/^struct CCoin {$/;"	s	file:
CCoinControl	coincontrol.h	/^    CCoinControl()$/;"	f	class:CCoinControl
CCoinControl	coincontrol.h	/^class CCoinControl$/;"	c
CCoins	coins.h	/^    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0)$/;"	f	class:CCoins
CCoins	coins.h	/^    CCoins(const CTransaction &tx, int nHeightIn) : fCoinBase(tx.IsCoinBase()), vout(tx.vout), nHeight(nHeightIn), nVersion(tx.nVersion)$/;"	f	class:CCoins
CCoins	coins.h	/^class CCoins$/;"	c
CCoinsCacheEntry	coins.h	/^    CCoinsCacheEntry() : coins(), flags(0) {}$/;"	f	struct:CCoinsCacheEntry
CCoinsCacheEntry	coins.h	/^struct CCoinsCacheEntry$/;"	s
CCoinsKeyHasher	coins.cpp	/^CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}$/;"	f	class:CCoinsKeyHasher
CCoinsKeyHasher	coins.h	/^class CCoinsKeyHasher$/;"	c
CCoinsMap	coins.h	/^typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;$/;"	t
CCoinsModifier	coins.cpp	/^CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage) : cache(cache_), it(it_), cachedCoinUsage(usage) {$/;"	f	class:CCoinsModifier
CCoinsModifier	coins.h	/^class CCoinsModifier$/;"	c
CCoinsStats	coins.h	/^    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0) {}$/;"	f	struct:CCoinsStats
CCoinsStats	coins.h	/^struct CCoinsStats$/;"	s
CCoinsView	coins.h	/^class CCoinsView$/;"	c
CCoinsViewBacked	coins.cpp	/^CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }$/;"	f	class:CCoinsViewBacked
CCoinsViewBacked	coins.h	/^class CCoinsViewBacked : public CCoinsView$/;"	c
CCoinsViewCache	coins.cpp	/^CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }$/;"	f	class:CCoinsViewCache
CCoinsViewCache	coins.h	/^class CCoinsViewCache : public CCoinsViewBacked$/;"	c
CCoinsViewCacheTest	test/coins_tests.cpp	/^    CCoinsViewCacheTest(CCoinsView* base) : CCoinsViewCache(base) {}$/;"	f	class:__anon93::CCoinsViewCacheTest
CCoinsViewCacheTest	test/coins_tests.cpp	/^class CCoinsViewCacheTest : public CCoinsViewCache$/;"	c	namespace:__anon93	file:
CCoinsViewDB	txdb.cpp	/^CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() \/ "chainstate", nCacheSize, fMemory, fWipe)$/;"	f	class:CCoinsViewDB
CCoinsViewDB	txdb.h	/^class CCoinsViewDB : public CCoinsView$/;"	c
CCoinsViewErrorCatcher	init.cpp	/^    CCoinsViewErrorCatcher(CCoinsView* view) : CCoinsViewBacked(view) {}$/;"	f	class:CCoinsViewErrorCatcher
CCoinsViewErrorCatcher	init.cpp	/^class CCoinsViewErrorCatcher : public CCoinsViewBacked$/;"	c	file:
CCoinsViewMemPool	txmempool.cpp	/^CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }$/;"	f	class:CCoinsViewMemPool
CCoinsViewMemPool	txmempool.h	/^class CCoinsViewMemPool : public CCoinsViewBacked$/;"	c
CCoinsViewTest	test/coins_tests.cpp	/^class CCoinsViewTest : public CCoinsView$/;"	c	namespace:__anon93	file:
CConditionVariable	sync.h	/^typedef boost::condition_variable CConditionVariable;$/;"	t
CConnectionFailed	bitcoin-cli.cpp	/^    explicit inline CConnectionFailed(const std::string& msg) :$/;"	f	class:CConnectionFailed
CConnectionFailed	bitcoin-cli.cpp	/^class CConnectionFailed : public std::runtime_error$/;"	c	file:
CCriticalBlock	sync.h	/^typedef CMutexLock<CCriticalSection> CCriticalBlock;$/;"	t
CCriticalSection	sync.h	/^typedef AnnotatedMixin<boost::recursive_mutex> CCriticalSection;$/;"	t
CCrypter	wallet/crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	wallet/crypter.h	/^class CCrypter$/;"	c
CCryptoKeyStore	wallet/crypter.h	/^    CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)$/;"	f	class:CCryptoKeyStore
CCryptoKeyStore	wallet/crypter.h	/^class CCryptoKeyStore : public CBasicKeyStore$/;"	c
CDB	wallet/db.cpp	/^CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnCloseIn) : pdb(NULL), activeTxn(NULL)$/;"	f	class:CDB
CDB	wallet/db.h	/^class CDB$/;"	c
CDBEnv	wallet/db.cpp	/^CDBEnv::CDBEnv() : dbenv(NULL)$/;"	f	class:CDBEnv
CDBEnv	wallet/db.h	/^class CDBEnv$/;"	c
CDNSSeedData	chainparams.h	/^    CDNSSeedData(const std::string &strName, const std::string &strHost) : name(strName), host(strHost) {}$/;"	f	struct:CDNSSeedData
CDNSSeedData	chainparams.h	/^struct CDNSSeedData {$/;"	s
CDataStream	streams.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	streams.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	streams.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	streams.h	/^class CDataStream$/;"	c
CDiskBlockIndex	chain.h	/^    CDiskBlockIndex() {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	chain.h	/^    explicit CDiskBlockIndex(const CBlockIndex* pindex) : CBlockIndex(*pindex) {$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	chain.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskBlockPos	chain.h	/^    CDiskBlockPos() {$/;"	f	struct:CDiskBlockPos
CDiskBlockPos	chain.h	/^    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {$/;"	f	struct:CDiskBlockPos
CDiskBlockPos	chain.h	/^struct CDiskBlockPos$/;"	s
CDiskTxPos	main.h	/^    CDiskTxPos() {$/;"	f	struct:CDiskTxPos
CDiskTxPos	main.h	/^    CDiskTxPos(const CDiskBlockPos &blockIn, unsigned int nTxOffsetIn) : CDiskBlockPos(blockIn.nFile, blockIn.nPos), nTxOffset(nTxOffsetIn) {}$/;"	f	struct:CDiskTxPos
CDiskTxPos	main.h	/^struct CDiskTxPos : public CDiskBlockPos {$/;"	s
CECKey	ecwrapper.cpp	/^CECKey::CECKey() {$/;"	f	class:CECKey
CECKey	ecwrapper.h	/^class CECKey {$/;"	c
CENT	amount.h	/^static const CAmount CENT = 1000000;$/;"	v
CExtKey	key.h	/^struct CExtKey {$/;"	s
CExtPubKey	pubkey.h	/^struct CExtPubKey {$/;"	s
CFLAGS	Makefile	/^CFLAGS = -I\/usr\/local\/ssl\/include$/;"	m
CFLAGS	secp256k1/Makefile	/^CFLAGS = -I\/usr\/local\/ssl\/include -W -std=c89 -pedantic -Wall -Wextra -Wcast-align -Wnested-externs -Wshadow -Wstrict-prototypes -Wno-unused-function -Wno-long-long -Wno-overlength-strings$/;"	m
CFeeRate	amount.cpp	/^CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^    CFeeRate() : nSatoshisPerK(0) { }$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }$/;"	f	class:CFeeRate
CFeeRate	amount.h	/^class CFeeRate$/;"	c
CFileReader	net.cpp	/^CNetRecorder::CFileReader::CFileReader(boost::filesystem::path path)$/;"	f	class:CNetRecorder::CFileReader
CFileReader	net.h	/^    class CFileReader$/;"	c	class:CNetRecorder
CFileWriter	net.h	/^        CFileWriter() : fp_(NULL) {}  \/\/!< For static variable's constructor.$/;"	f	class:CNetRecorder::CFileWriter
CFileWriter	net.h	/^    class CFileWriter$/;"	c	class:CNetRecorder
CFlatData	serialize.h	/^    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }$/;"	f	class:CFlatData
CFlatData	serialize.h	/^    explicit CFlatData(std::vector<T,TAl> &v)$/;"	f	class:CFlatData
CFlatData	serialize.h	/^class CFlatData$/;"	c
CHDChain	wallet/hdkeystore.h	/^    CHDChain()$/;"	f	class:CHDChain
CHDChain	wallet/hdkeystore.h	/^    CHDChain(int64_t nCreateTime_)$/;"	f	class:CHDChain
CHDChain	wallet/hdkeystore.h	/^class CHDChain$/;"	c
CHDKeyStore	wallet/hdkeystore.h	/^class CHDKeyStore : public CCryptoKeyStore$/;"	c
CHDPubKey	wallet/hdkeystore.h	/^    CHDPubKey()$/;"	f	class:CHDPubKey
CHDPubKey	wallet/hdkeystore.h	/^class CHDPubKey$/;"	c
CHECK	secp256k1/src/util.h	37;"	d
CHECK	secp256k1/src/util.h	43;"	d
CHECKASSIGNMENTOPERATOR	test/arith_uint256_tests.cpp	227;"	d	file:
CHECKBITWISEOPERATOR	test/arith_uint256_tests.cpp	223;"	d	file:
CHECKSUM_OFFSET	protocol.h	/^        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,$/;"	e	enum:CMessageHeader::__anon1
CHECKSUM_SIZE	protocol.h	/^        CHECKSUM_SIZE = sizeof(int),$/;"	e	enum:CMessageHeader::__anon1
CHMAC_SHA256	crypto/hmac_sha256.cpp	/^CHMAC_SHA256::CHMAC_SHA256(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA256
CHMAC_SHA256	crypto/hmac_sha256.h	/^class CHMAC_SHA256$/;"	c
CHMAC_SHA512	crypto/hmac_sha512.cpp	/^CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)$/;"	f	class:CHMAC_SHA512
CHMAC_SHA512	crypto/hmac_sha512.h	/^class CHMAC_SHA512$/;"	c
CHash160	hash.h	/^class CHash160 {$/;"	c
CHash256	hash.h	/^class CHash256 {$/;"	c
CHashWriter	hash.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CHashWriter
CHashWriter	hash.h	/^class CHashWriter$/;"	c
CImportingNow	init.cpp	/^    CImportingNow()$/;"	f	struct:CImportingNow
CImportingNow	init.cpp	/^struct CImportingNow$/;"	s	file:
CInPoint	txmempool.h	/^    CInPoint() { SetNull(); }$/;"	f	class:CInPoint
CInPoint	txmempool.h	/^    CInPoint(const CTransaction* ptxIn, uint32_t nIn) { ptx = ptxIn; n = nIn; }$/;"	f	class:CInPoint
CInPoint	txmempool.h	/^class CInPoint$/;"	c
CInit	util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	util.cpp	/^class CInit$/;"	c	file:
CInv	protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(const std::string& strType, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.h	/^class CInv$/;"	c
CIterator	cache.h	/^    typedef typename Tc::const_iterator CIterator;$/;"	t	class:CacheInterface
CKey	key.h	/^    CKey() : fValid(false), fCompressed(false)$/;"	f	class:CKey
CKey	key.h	/^    CKey(const CKey& secret) : fValid(secret.fValid), fCompressed(secret.fCompressed)$/;"	f	class:CKey
CKey	key.h	/^class CKey$/;"	c
CKeyID	pubkey.h	/^    CKeyID() : uint160() {}$/;"	f	class:CKeyID
CKeyID	pubkey.h	/^    CKeyID(const uint160& in) : uint160(in) {}$/;"	f	class:CKeyID
CKeyID	pubkey.h	/^class CKeyID : public uint160$/;"	c
CKeyMetadata	wallet/walletdb.h	/^    CKeyMetadata()$/;"	f	class:CKeyMetadata
CKeyMetadata	wallet/walletdb.h	/^    CKeyMetadata(int64_t nCreateTime_)$/;"	f	class:CKeyMetadata
CKeyMetadata	wallet/walletdb.h	/^class CKeyMetadata$/;"	c
CKeyPool	wallet/wallet.cpp	/^CKeyPool::CKeyPool()$/;"	f	class:CKeyPool
CKeyPool	wallet/wallet.cpp	/^CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn)$/;"	f	class:CKeyPool
CKeyPool	wallet/wallet.h	/^class CKeyPool$/;"	c
CKeyStore	keystore.h	/^class CKeyStore$/;"	c
CKeyingMaterial	keystore.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CKeyingMaterial	wallet/crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLEANFILES	Makefile	/^CLEANFILES = $(EXTRA_LIBRARIES) *.gcda *.gcno $(am__append_23)$/;"	m
CLEAN_BITCOIN_TEST	Makefile	/^CLEAN_BITCOIN_TEST = test\/*.gcda test\/*.gcno $(GENERATED_TEST_FILES)$/;"	m
CLIENT_VERSION	clientversion.h	/^static const int CLIENT_VERSION =$/;"	v
CLIENT_VERSION_BUILD	Makefile	/^CLIENT_VERSION_BUILD = 0$/;"	m
CLIENT_VERSION_BUILD	clientversion.h	21;"	d
CLIENT_VERSION_BUILD	config/bitcoin-config.h	12;"	d
CLIENT_VERSION_IS_RELEASE	Makefile	/^CLIENT_VERSION_IS_RELEASE = true$/;"	m
CLIENT_VERSION_IS_RELEASE	clientversion.h	24;"	d
CLIENT_VERSION_IS_RELEASE	config/bitcoin-config.h	15;"	d
CLIENT_VERSION_MAJOR	Makefile	/^CLIENT_VERSION_MAJOR = 1$/;"	m
CLIENT_VERSION_MAJOR	clientversion.h	18;"	d
CLIENT_VERSION_MAJOR	config/bitcoin-config.h	18;"	d
CLIENT_VERSION_MINOR	Makefile	/^CLIENT_VERSION_MINOR = 1$/;"	m
CLIENT_VERSION_MINOR	clientversion.h	19;"	d
CLIENT_VERSION_MINOR	config/bitcoin-config.h	21;"	d
CLIENT_VERSION_REVISION	Makefile	/^CLIENT_VERSION_REVISION = 2$/;"	m
CLIENT_VERSION_REVISION	clientversion.h	20;"	d
CLIENT_VERSION_REVISION	config/bitcoin-config.h	24;"	d
CLIENT_VERSION_SUFFIX	clientversion.cpp	21;"	d	file:
CLevelDBBatch	leveldbwrapper.h	/^class CLevelDBBatch$/;"	c
CLevelDBWrapper	leveldbwrapper.cpp	/^CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe)$/;"	f	class:CLevelDBWrapper
CLevelDBWrapper	leveldbwrapper.h	/^class CLevelDBWrapper$/;"	c
CLicenseInfo	policy/licenseinfo.cpp	/^CLicenseInfo::CLicenseInfo() : nVersion(1), name(""), description(""), issuer(""), fDivisibility(true),$/;"	f	class:CLicenseInfo
CLicenseInfo	policy/licenseinfo.h	/^class CLicenseInfo$/;"	c
CLockLocation	sync.cpp	/^    CLockLocation(const char* pszName, const char* pszFile, int nLine)$/;"	f	struct:CLockLocation
CLockLocation	sync.cpp	/^struct CLockLocation {$/;"	s	file:
CMainCleanup	main.cpp	/^    CMainCleanup() {}$/;"	f	class:CMainCleanup
CMainCleanup	main.cpp	/^class CMainCleanup$/;"	c	file:
CMainParams	chainparams.cpp	/^    CMainParams()$/;"	f	class:CMainParams
CMainParams	chainparams.cpp	/^class CMainParams : public CChainParams$/;"	c	file:
CMainSignals	validationinterface.h	/^struct CMainSignals {$/;"	s
CMasterKey	wallet/crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	wallet/crypter.h	/^class CMasterKey$/;"	c
CMedianFilter	timedata.h	/^    CMedianFilter(unsigned int size, T initial_value) : nSize(size)$/;"	f	class:CMedianFilter
CMedianFilter	timedata.h	/^class CMedianFilter$/;"	c
CMerkleBlock	merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.h	/^    CMerkleBlock() {}$/;"	f	class:CMerkleBlock
CMerkleBlock	merkleblock.h	/^class CMerkleBlock$/;"	c
CMerkleTx	wallet/wallet.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	wallet/wallet.h	/^    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)$/;"	f	class:CMerkleTx
CMerkleTx	wallet/wallet.h	/^class CMerkleTx : public CTransaction$/;"	c
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.h	/^class CMessageHeader$/;"	c
CMutableTransaction	primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0), type(NORMAL) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	primitives/transaction.cpp	/^CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime), type(tx.type) {}$/;"	f	class:CMutableTransaction
CMutableTransaction	primitives/transaction.h	/^struct CMutableTransaction$/;"	s
CMutexLock	sync.h	/^    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)$/;"	f	class:CMutexLock
CMutexLock	sync.h	/^    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)$/;"	f	class:CMutexLock
CMutexLock	sync.h	/^class CMutexLock$/;"	c
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const std::string &strIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	netbase.h	/^class CNetAddr$/;"	c
CNetCleanup	net.cpp	/^    CNetCleanup() {}$/;"	f	class:CNetCleanup
CNetCleanup	net.cpp	/^class CNetCleanup$/;"	c	file:
CNetMessage	net.h	/^    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {$/;"	f	class:CNetMessage
CNetMessage	net.h	/^class CNetMessage$/;"	c
CNetRecorder	net.h	/^class CNetRecorder$/;"	c
CNoDestination	script/standard.h	/^class CNoDestination {$/;"	c
CNode	net.cpp	/^CNode::CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn, bool fInboundIn) :$/;"	f	class:CNode
CNode	net.h	/^class CNode$/;"	c
CNodeSignals	net.h	/^struct CNodeSignals {$/;"	s
CNodeState	main.cpp	/^    CNodeState() {$/;"	f	struct:__anon47::CNodeState
CNodeState	main.cpp	/^struct CNodeState {$/;"	s	namespace:__anon47	file:
CNodeStateStats	main.h	/^struct CNodeStateStats {$/;"	s
CNodeStats	net.h	/^class CNodeStats$/;"	c
COIN	amount.h	/^static const CAmount COIN = 100000000;$/;"	v
COINBASE_FLAGS	main.cpp	/^CScript COINBASE_FLAGS;$/;"	v
COINBASE_MATURITY	consensus/consensus.h	/^static const int COINBASE_MATURITY = 10;$/;"	v
COMMAND_SIZE	protocol.h	/^        COMMAND_SIZE = 12,$/;"	e	enum:CMessageHeader::__anon1
COMPARISON_TOOL_REORG_TESTS	Makefile	/^COMPARISON_TOOL_REORG_TESTS = 0$/;"	m
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	secp256k1/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	secp256k1/Makefile	/^CONFIG_CLEAN_FILES = libsecp256k1.pc$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	secp256k1/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config\/bitcoin-config.h$/;"	m
CONFIG_HEADER	secp256k1/Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/libsecp256k1-config.h$/;"	m
COPYRIGHT_STR	clientversion.h	42;"	d
COPYRIGHT_YEAR	Makefile	/^COPYRIGHT_YEAR = 2016$/;"	m
COPYRIGHT_YEAR	clientversion.h	30;"	d
COPYRIGHT_YEAR	config/bitcoin-config.h	27;"	d
COrphan	miner.cpp	/^    COrphan(const CTransaction* ptxIn) : ptx(ptxIn), feeRate(0), dPriority(0)$/;"	f	class:COrphan
COrphan	miner.cpp	/^class COrphan$/;"	c	file:
COrphanBlock	main.cpp	/^struct COrphanBlock {$/;"	s	file:
COrphanTx	main.cpp	/^struct COrphanTx {$/;"	s	file:
COrphanTx	test/DoS_tests.cpp	/^struct COrphanTx {$/;"	s	file:
COutPoint	primitives/transaction.h	/^    COutPoint() { SetNull(); }$/;"	f	class:COutPoint
COutPoint	primitives/transaction.h	/^    COutPoint(uint256 hashIn, uint32_t nIn) { hash = hashIn; n = nIn; }$/;"	f	class:COutPoint
COutPoint	primitives/transaction.h	/^class COutPoint$/;"	c
COutput	wallet/wallet.h	/^    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)$/;"	f	class:COutput
COutput	wallet/wallet.h	/^class COutput$/;"	c
COutputEntry	wallet/wallet.h	/^struct COutputEntry$/;"	s
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPP	secp256k1/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =  -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2$/;"	m
CPPFLAGS	secp256k1/Makefile	/^CPPFLAGS = $/;"	m
CPartialMerkleTree	merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	merkleblock.cpp	/^CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	merkleblock.h	/^class CPartialMerkleTree$/;"	c
CPartialMerkleTreeTester	test/pmt_tests.cpp	/^class CPartialMerkleTreeTester : public CPartialMerkleTree$/;"	c	file:
CPrivKey	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	pubkey.h	/^    CPubKey()$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^    CPubKey(const T pbegin, const T pend)$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^    CPubKey(const std::vector<unsigned char>& vch)$/;"	f	class:CPubKey
CPubKey	pubkey.h	/^class CPubKey$/;"	c
CRC	leveldb/util/crc32c_test.cc	/^class CRC { };$/;"	c	namespace:leveldb::crc32c	file:
CRIPEMD160	crypto/ripemd160.cpp	/^CRIPEMD160::CRIPEMD160() : bytes(0)$/;"	f	class:CRIPEMD160
CRIPEMD160	crypto/ripemd160.h	/^class CRIPEMD160$/;"	c
CRPCCommand	rpcserver.h	/^class CRPCCommand$/;"	c
CRPCConvertParam	rpcclient.cpp	/^class CRPCConvertParam$/;"	c	file:
CRPCConvertTable	rpcclient.cpp	/^CRPCConvertTable::CRPCConvertTable()$/;"	f	class:CRPCConvertTable
CRPCConvertTable	rpcclient.cpp	/^class CRPCConvertTable$/;"	c	file:
CRPCSignals	rpcserver.cpp	/^static struct CRPCSignals$/;"	s	file:
CRPCTable	rpcserver.cpp	/^CRPCTable::CRPCTable()$/;"	f	class:CRPCTable
CRPCTable	rpcserver.h	/^class CRPCTable$/;"	c
CRTTRecord	net.h	/^        CRTTRecord() {}$/;"	f	class:CNetRecorder::CRTTRecord
CRTTRecord	net.h	/^        CRTTRecord(std::string address, int64_t when, int64_t rtt) :$/;"	f	class:CNetRecorder::CRTTRecord
CRTTRecord	net.h	/^    class CRTTRecord : public CRecord$/;"	c	class:CNetRecorder
CRYPTO_CFLAGS	Makefile	/^CRYPTO_CFLAGS =  $/;"	m
CRYPTO_CFLAGS	secp256k1/Makefile	/^CRYPTO_CFLAGS =  $/;"	m
CRYPTO_LIBS	Makefile	/^CRYPTO_LIBS = -lcrypto  $/;"	m
CRYPTO_LIBS	secp256k1/Makefile	/^CRYPTO_LIBS = -lcrypto  $/;"	m
CRecipient	wallet/wallet.h	/^struct CRecipient$/;"	s
CRecord	net.h	/^    class CRecord$/;"	c	class:CNetRecorder
CRegTestParams	chainparams.cpp	/^    CRegTestParams() {$/;"	f	class:CRegTestParams
CRegTestParams	chainparams.cpp	/^class CRegTestParams : public CTestNetParams {$/;"	c	file:
CReserveKey	wallet/wallet.h	/^    CReserveKey(CWallet* pwalletIn)$/;"	f	class:CReserveKey
CReserveKey	wallet/wallet.h	/^class CReserveKey$/;"	c
CRollingBloomFilter	bloom.cpp	/^CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate, unsigned int nTweak) :$/;"	f	class:CRollingBloomFilter
CRollingBloomFilter	bloom.h	/^class CRollingBloomFilter$/;"	c
CSCOPE	secp256k1/Makefile	/^CSCOPE = cscope$/;"	m
CSHA1	crypto/sha1.cpp	/^CSHA1::CSHA1() : bytes(0)$/;"	f	class:CSHA1
CSHA1	crypto/sha1.h	/^class CSHA1$/;"	c
CSHA256	crypto/sha256.cpp	/^CSHA256::CSHA256() : bytes(0)$/;"	f	class:CSHA256
CSHA256	crypto/sha256.h	/^class CSHA256$/;"	c
CSHA512	crypto/sha512.cpp	/^CSHA512::CSHA512() : bytes(0)$/;"	f	class:CSHA512
CSHA512	crypto/sha512.h	/^class CSHA512$/;"	c
CScheduler	scheduler.cpp	/^CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)$/;"	f	class:CScheduler
CScheduler	scheduler.h	/^class CScheduler$/;"	c
CScript	script/script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script/script.h	/^    CScript(int64_t b)        { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^    explicit CScript(const CScriptNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	script/script.h	/^class CScript : public std::vector<unsigned char>$/;"	c
CScriptCheck	main.h	/^    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}$/;"	f	class:CScriptCheck
CScriptCheck	main.h	/^    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :$/;"	f	class:CScriptCheck
CScriptCheck	main.h	/^class CScriptCheck$/;"	c
CScriptCompressor	compressor.h	/^    CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }$/;"	f	class:CScriptCompressor
CScriptCompressor	compressor.h	/^class CScriptCompressor$/;"	c
CScriptID	script/standard.cpp	/^CScriptID::CScriptID(const CScript& in) : uint160(Hash160(in.begin(), in.end())) {}$/;"	f	class:CScriptID
CScriptID	script/standard.h	/^    CScriptID() : uint160() {}$/;"	f	class:CScriptID
CScriptID	script/standard.h	/^    CScriptID(const uint160& in) : uint160(in) {}$/;"	f	class:CScriptID
CScriptID	script/standard.h	/^class CScriptID : public uint160$/;"	c
CScriptNum	script/script.h	/^    explicit CScriptNum(const int64_t& n)$/;"	f	class:CScriptNum
CScriptNum	script/script.h	/^    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal)$/;"	f	class:CScriptNum
CScriptNum	script/script.h	/^class CScriptNum$/;"	c
CScriptVisitor	script/standard.cpp	/^    CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:__anon84::CScriptVisitor
CScriptVisitor	script/standard.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	namespace:__anon84	file:
CSemaphore	sync.h	/^    CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^    CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionSerialize	serialize.h	/^struct CSerActionSerialize$/;"	s
CSerActionUnserialize	serialize.h	/^struct CSerActionUnserialize$/;"	s
CSerializeData	support/allocators/zeroafterfree.h	/^typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;$/;"	t
CService	netbase.cpp	/^CService::CService()$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const char *pszIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const char *pszIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const std::string &strIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const std::string &strIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	netbase.h	/^class CService : public CNetAddr$/;"	c
CSignatureCache	script/sigcache.cpp	/^class CSignatureCache$/;"	c	namespace:__anon86	file:
CSizeComputer	serialize.h	/^    CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}$/;"	f	class:CSizeComputer
CSizeComputer	serialize.h	/^class CSizeComputer$/;"	c
CSubNet	netbase.cpp	/^CSubNet::CSubNet():$/;"	f	class:CSubNet
CSubNet	netbase.cpp	/^CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)$/;"	f	class:CSubNet
CSubNet	netbase.h	/^class CSubNet$/;"	c
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTAGS	secp256k1/Makefile	/^CTAGS = ctags$/;"	m
CT_DELETED	ui_interface.h	/^    CT_DELETED$/;"	e	enum:ChangeType
CT_NEW	ui_interface.h	/^    CT_NEW,$/;"	e	enum:ChangeType
CT_UPDATED	ui_interface.h	/^    CT_UPDATED,$/;"	e	enum:ChangeType
CTestNetParams	chainparams.cpp	/^    CTestNetParams() {$/;"	f	class:CTestNetParams
CTestNetParams	chainparams.cpp	/^class CTestNetParams : public CMainParams {$/;"	c	file:
CTransaction	primitives/transaction.cpp	/^CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0), type(NORMAL) {}$/;"	f	class:CTransaction
CTransaction	primitives/transaction.cpp	/^CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime), type(tx.type)$/;"	f	class:CTransaction
CTransaction	primitives/transaction.h	/^class CTransaction$/;"	c
CTransactionSignatureSerializer	script/interpreter.cpp	/^    CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :$/;"	f	class:__anon88::CTransactionSignatureSerializer
CTransactionSignatureSerializer	script/interpreter.cpp	/^class CTransactionSignatureSerializer {$/;"	c	namespace:__anon88	file:
CTranslationInterface	util.h	/^class CTranslationInterface$/;"	c
CTxDestination	script/standard.h	/^typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;$/;"	t
CTxIn	primitives/transaction.cpp	/^CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	primitives/transaction.cpp	/^CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)$/;"	f	class:CTxIn
CTxIn	primitives/transaction.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	primitives/transaction.h	/^class CTxIn$/;"	c
CTxInUndo	undo.h	/^    CTxInUndo() : txout(), fCoinBase(false), nHeight(0), nVersion(0), color(0), type(0)$/;"	f	class:CTxInUndo
CTxInUndo	undo.h	/^    CTxInUndo(const CTxOut &txoutIn, bool fCoinBaseIn = false, unsigned int nHeightIn = 0,$/;"	f	class:CTxInUndo
CTxInUndo	undo.h	/^class CTxInUndo$/;"	c
CTxMemPool	txmempool.cpp	/^CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :$/;"	f	class:CTxMemPool
CTxMemPool	txmempool.h	/^class CTxMemPool$/;"	c
CTxMemPoolEntry	txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry():$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	txmempool.cpp	/^CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)$/;"	f	class:CTxMemPoolEntry
CTxMemPoolEntry	txmempool.h	/^class CTxMemPoolEntry$/;"	c
CTxOut	primitives/transaction.cpp	/^CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn, type_Color colorIn)$/;"	f	class:CTxOut
CTxOut	primitives/transaction.h	/^    CTxOut()$/;"	f	class:CTxOut
CTxOut	primitives/transaction.h	/^class CTxOut$/;"	c
CTxOutCompressor	compressor.h	/^    CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }$/;"	f	class:CTxOutCompressor
CTxOutCompressor	compressor.h	/^class CTxOutCompressor$/;"	c
CTxUndo	undo.h	/^class CTxUndo$/;"	c
CURRENT_VERSION	primitives/block.h	/^    static const int32_t CURRENT_VERSION=3;$/;"	m	class:CBlockHeader
CURRENT_VERSION	primitives/transaction.h	/^    static const int32_t CURRENT_VERSION=1;$/;"	m	class:CTransaction
CURRENT_VERSION	wallet/hdkeystore.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CHDChain
CURRENT_VERSION	wallet/hdkeystore.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CHDPubKey
CURRENT_VERSION	wallet/walletdb.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CKeyMetadata
CUnsignedAlert	alert.h	/^class CUnsignedAlert$/;"	c
CValidationInterface	validationinterface.h	/^class CValidationInterface {$/;"	c
CValidationState	consensus/validation.h	/^    CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}$/;"	f	class:CValidationState
CValidationState	consensus/validation.h	/^class CValidationState {$/;"	c
CVarInt	serialize.h	/^    CVarInt(I& nIn) : n(nIn) { }$/;"	f	class:CVarInt
CVarInt	serialize.h	/^class CVarInt$/;"	c
CVerifyDB	main.cpp	/^CVerifyDB::CVerifyDB()$/;"	f	class:CVerifyDB
CVerifyDB	main.h	/^class CVerifyDB$/;"	c
CWaitableCriticalSection	sync.h	/^typedef AnnotatedMixin<boost::mutex> CWaitableCriticalSection;$/;"	t
CWallet	wallet/wallet.h	/^    CWallet()$/;"	f	class:CWallet
CWallet	wallet/wallet.h	/^    CWallet(std::string strWalletFileIn)$/;"	f	class:CWallet
CWallet	wallet/wallet.h	/^class CWallet : public CHDKeyStore, public CValidationInterface$/;"	c
CWalletDB	wallet/walletdb.h	/^    CWalletDB(const std::string& strFilename, const char* pszMode = "r+", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)$/;"	f	class:CWalletDB
CWalletDB	wallet/walletdb.h	/^class CWalletDB : public CDB$/;"	c
CWalletKey	wallet/wallet.cpp	/^CWalletKey::CWalletKey(int64_t nExpires)$/;"	f	class:CWalletKey
CWalletKey	wallet/wallet.h	/^class CWalletKey$/;"	c
CWalletScanState	wallet/walletdb.cpp	/^    CWalletScanState()$/;"	f	class:CWalletScanState
CWalletScanState	wallet/walletdb.cpp	/^class CWalletScanState$/;"	c	file:
CWalletTx	wallet/wallet.h	/^    CWalletTx()$/;"	f	class:CWalletTx
CWalletTx	wallet/wallet.h	/^    CWalletTx(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
CWalletTx	wallet/wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet/wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet/wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CWallet_UnitTest	test/test_bitcoin.h	/^    CWallet_UnitTest(std::string strWalletFileIn) :$/;"	f	class:CWallet_UnitTest
CWallet_UnitTest	test/test_bitcoin.h	/^class CWallet_UnitTest : public CWallet$/;"	c
CXX	Makefile	/^CXX = c++ -std=c++03$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = c++ -std=c++03 -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2 -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter  -Wstack-protector -fstack-protector-all -fPIE$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	secp256k1/Makefile	/^CYGPATH_W = echo$/;"	m
Cache	leveldb/include/leveldb/cache.h	/^  Cache() { }$/;"	f	class:leveldb::Cache
Cache	leveldb/include/leveldb/cache.h	/^class Cache {$/;"	c	namespace:leveldb
CacheInterface	cache.h	/^    CacheInterface()$/;"	f	class:CacheInterface
CacheInterface	cache.h	/^class CacheInterface$/;"	c
CacheSetupFixture	test/test_bitcoin.h	/^    CacheSetupFixture()$/;"	f	struct:CacheSetupFixture
CacheSetupFixture	test/test_bitcoin.h	/^struct CacheSetupFixture$/;"	s
CacheTest	leveldb/util/cache_test.cc	/^  CacheTest() : cache_(NewLRUCache(kCacheSize)) {$/;"	f	class:leveldb::CacheTest
CacheTest	leveldb/util/cache_test.cc	/^class CacheTest {$/;"	c	namespace:leveldb	file:
CacheTestFixture	test/cache_activate.cpp	/^    CacheTestFixture()$/;"	f	struct:CacheTestFixture
CacheTestFixture	test/cache_activate.cpp	/^struct CacheTestFixture : public CacheSetupFixture, public BasicTestingSetup$/;"	s	file:
CacheTestFixture	test/cache_color_license.cpp	/^    CacheTestFixture()$/;"	f	struct:CacheTestFixture
CacheTestFixture	test/cache_color_license.cpp	/^struct CacheTestFixture : public CacheSetupFixture, public BasicTestingSetup$/;"	s	file:
CachingTransactionSignatureChecker	script/sigcache.h	/^    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}$/;"	f	class:CachingTransactionSignatureChecker
CachingTransactionSignatureChecker	script/sigcache.h	/^class CachingTransactionSignatureChecker : public TransactionSignatureChecker$/;"	c
CalcHash	merkleblock.cpp	/^uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {$/;"	f	class:CPartialMerkleTree
CalcMaskSize	coins.cpp	/^void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {$/;"	f	class:CCoins
CalcTreeWidth	merkleblock.h	/^    unsigned int CalcTreeWidth(int height) {$/;"	f	class:CPartialMerkleTree
CalculateCurrentUsage	main.cpp	/^uint64_t CalculateCurrentUsage()$/;"	f
CalculateModifiedSize	primitives/transaction.cpp	/^unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const$/;"	f	class:CTransaction
CalculateNextWorkRequired	pow.cpp	/^unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)$/;"	f
CallRPC	bitcoin-cli.cpp	/^Object CallRPC(const string& strMethod, const Array& params)$/;"	f
CallRPC	test/test_bitcoin.cpp	/^Value CallRPC(string args)$/;"	f
CanSupportFeature	wallet/wallet.h	/^    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }$/;"	f	class:CWallet
CancelOrder	wallet/wallet.cpp	/^string CWallet::CancelOrder(CWalletTx& wtxNew, uint256& txid)$/;"	f	class:CWallet
Cancels	alert.cpp	/^bool CAlert::Cancels(const CAlert& alert) const$/;"	f	class:CAlert
CastToBool	script/interpreter.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
Ch	crypto/sha256.cpp	/^uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon6::sha256
Ch	crypto/sha512.cpp	/^uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }$/;"	f	namespace:__anon8::sha512
Ch	secp256k1/src/hash_impl.h	16;"	d
Ch	secp256k1/src/hash_impl.h	288;"	d
ChainCode	hash.h	/^typedef uint256 ChainCode;$/;"	t
ChainCode	pubkey.h	/^typedef uint256 ChainCode;$/;"	t
Change	leveldb/db/skiplist_test.cc	/^  void Change(ReaderState s) {$/;"	f	class:leveldb::TestState
ChangeOptions	leveldb/db/db_test.cc	/^  bool ChangeOptions() {$/;"	f	class:leveldb::DBTest
ChangeOptions	leveldb/table/table_builder.cc	/^Status TableBuilder::ChangeOptions(const Options& options) {$/;"	f	class:leveldb::TableBuilder
ChangeType	ui_interface.h	/^enum ChangeType {$/;"	g
ChangeWalletPassphrase	wallet/wallet.cpp	/^bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)$/;"	f	class:CWallet
Char_type	json/json_spirit_reader_template.h	/^        typedef typename Istream_type::char_type Char_type;$/;"	t	struct:json_spirit::Multi_pass_iters
Char_type	json/json_spirit_reader_template.h	/^        typedef typename String_type::value_type Char_type;$/;"	t	class:json_spirit::Semantic_actions
Char_type	json/json_spirit_writer_template.h	/^        typedef typename String_type::value_type Char_type;$/;"	t	class:json_spirit::Generator
Check	addrman.h	/^    void Check()$/;"	f	class:CAddrMan
Check	eccryptoverify.cpp	/^bool Check(const unsigned char *vch) {$/;"	f	namespace:eccrypto
Check	key.cpp	/^bool CKey::Check(const unsigned char *vch) {$/;"	f	class:CKey
Check	leveldb/db/corruption_test.cc	/^  void Check(int min_expected, int max_expected) {$/;"	f	class:leveldb::CorruptionTest
CheckAdd	test/scriptnum_tests.cpp	/^static void CheckAdd(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckBlock	checkpoints.cpp	/^    bool CheckBlock(const CCheckpointData& data, int nHeight, const uint256& hash)$/;"	f	namespace:Checkpoints
CheckBlock	main.cpp	/^bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot, bool fNCheckFork)$/;"	f
CheckBlockHeader	main.cpp	/^bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW, unsigned int nSameMiner)$/;"	f
CheckBlockHeaderSignature	main.cpp	/^bool CheckBlockHeaderSignature(const CBlock& block, CValidationState& state)$/;"	f
CheckBlockIndex	main.cpp	/^void static CheckBlockIndex()$/;"	f	file:
CheckCoinBaseTransactions	main.cpp	/^bool CheckCoinBaseTransactions(const CBlock& block)$/;"	f
CheckCompare	test/scriptnum_tests.cpp	/^static void CheckCompare(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckCondition	leveldb/db/c_test.c	35;"	d	file:
CheckCreateInt	test/scriptnum_tests.cpp	/^static void CheckCreateInt(const int64_t& num)$/;"	f	file:
CheckCreateVch	test/scriptnum_tests.cpp	/^static void CheckCreateVch(const int64_t& num)$/;"	f	file:
CheckDel	leveldb/db/c_test.c	/^static void CheckDel(void* ptr, const char* k, size_t klen) {$/;"	f	file:
CheckDiskSpace	main.cpp	/^bool CheckDiskSpace(uint64_t nAdditionalBytes)$/;"	f
CheckEqual	leveldb/db/c_test.c	/^static void CheckEqual(const char* expected, const char* v, size_t n) {$/;"	f	file:
CheckFalse	test/handler_license.cpp	/^    void CheckFalse(int ndos, const std::string &msg)$/;"	f	struct:CreateLicenseHandlerCheckValidFixture
CheckFalse	test/handler_license.cpp	/^    void CheckFalse(int ndos, const std::string &msg)$/;"	f	struct:TransferLicenseHandlerCheckValidFixture
CheckFalse	test/handler_normal.cpp	/^    void CheckFalse(int ndos, const std::string &msg)$/;"	f	struct:NormalHandlerCheckValidFixture
CheckFee	main.cpp	/^bool Fee::CheckFee(const type_Color& Color, const int64_t& Value) const {$/;"	f	class:Fee
CheckFinalTx	main.cpp	/^bool CheckFinalTx(const CTransaction &tx)$/;"	f
CheckForkWarningConditions	main.cpp	/^void CheckForkWarningConditions()$/;"	f
CheckForkWarningConditionsOnNewFork	main.cpp	/^void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)$/;"	f
CheckFormat	main.cpp	/^    bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_
CheckFormat	main.cpp	/^    bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_InvalidType_
CheckFormat	main.cpp	/^    bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
CheckFormat	main.cpp	/^    bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Match_
CheckFormat	main.cpp	/^    bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Mint_
CheckFormat	main.cpp	/^    bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Normal_
CheckFormat	main.cpp	/^    bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Vote_
CheckFormat	main.h	/^    virtual bool CheckFormat(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::HandlerInterface
CheckGet	leveldb/db/c_test.c	/^static void CheckGet($/;"	f	file:
CheckInitialOffsetRecord	leveldb/db/log_test.cc	/^  void CheckInitialOffsetRecord(uint64_t initial_offset,$/;"	f	class:leveldb::log::LogTest
CheckInputs	main.cpp	/^bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)$/;"	f
CheckIter	leveldb/db/c_test.c	/^static void CheckIter(leveldb_iterator_t* iter,$/;"	f	file:
CheckMapValueExpected_	test/test_bitcoin.cpp	/^bool CWallet_UnitTest::CheckMapValueExpected_(const mapValue_t &tx_map_value)$/;"	f	class:CWallet_UnitTest
CheckMerkleBranch	primitives/block.cpp	/^uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)$/;"	f	class:CBlock
CheckMinimalPush	script/interpreter.cpp	/^bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {$/;"	f	file:
CheckMiningReward	main.cpp	/^bool Fee::CheckMiningReward(const CTransaction& tx, unsigned int cnt) const {$/;"	f	class:Fee
CheckNegate	test/scriptnum_tests.cpp	/^static void CheckNegate(const int64_t& num)$/;"	f	file:
CheckNoError	leveldb/db/c_test.c	29;"	d	file:
CheckNotRepeated	main.cpp	/^    bool CheckNotRepeated(const CTransaction &tx, const CTransaction &pool_tx,$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_
CheckNotRepeated	main.cpp	/^    bool CheckNotRepeated(const CTransaction &tx, const CTransaction &pool_tx,$/;"	f	class:type_transaction_handler::__anon48::Handler_InvalidType_
CheckNotRepeated	main.cpp	/^    bool CheckNotRepeated(const CTransaction &tx, const CTransaction &pool_tx,$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
CheckNotRepeated	main.cpp	/^    bool CheckNotRepeated(const CTransaction &tx, const CTransaction &pool_tx,$/;"	f	class:type_transaction_handler::__anon48::Handler_Vote_
CheckNotRepeated	main.h	/^    virtual bool CheckNotRepeated($/;"	f	class:type_transaction_handler::HandlerInterface
CheckOffsetPastEndReturnsNoRecords	leveldb/db/log_test.cc	/^  void CheckOffsetPastEndReturnsNoRecords(uint64_t offset_past_end) {$/;"	f	class:leveldb::log::LogTest
CheckProofOfWork	pow.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params, unsigned int nSameMiner)$/;"	f
CheckPubKeyEncoding	script/interpreter.cpp	/^bool static CheckPubKeyEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {$/;"	f	file:
CheckPut	leveldb/db/c_test.c	/^static void CheckPut(void* ptr,$/;"	f	file:
CheckReopenLogFile	util.cpp	/^static bool CheckReopenLogFile()$/;"	f	file:
CheckRepeatedTypeTransactionInPool	main.cpp	/^bool CheckRepeatedTypeTransactionInPool($/;"	f
CheckSig	script/interpreter.cpp	/^bool BlockHeaderSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const$/;"	f	class:BlockHeaderSignatureChecker
CheckSig	script/interpreter.cpp	/^bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const$/;"	f	class:TransactionSignatureChecker
CheckSig	script/interpreter.h	/^    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const$/;"	f	class:BaseSignatureChecker
CheckSignature	alert.cpp	/^bool CAlert::CheckSignature(const std::vector<unsigned char>& alertKey) const$/;"	f	class:CAlert
CheckSignatureElement	eccryptoverify.cpp	/^bool CheckSignatureElement(const unsigned char *vch, int len, bool half) {$/;"	f	namespace:eccrypto
CheckSignatureEncoding	script/interpreter.cpp	/^bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {$/;"	f	file:
CheckSubtract	test/scriptnum_tests.cpp	/^static void CheckSubtract(const int64_t& num1, const int64_t& num2)$/;"	f	file:
CheckTransaction	main.cpp	/^bool CheckTransaction(const CTransaction& tx, CValidationState &state)$/;"	f
CheckTransactionType	main.cpp	/^bool CheckTransactionType(const CTransaction& tx, CValidationState &state,$/;"	f
CheckTxFeeAndColor	main.cpp	/^bool CheckTxFeeAndColor(const CTransaction tx, const CBlock *pblock, bool fCheckFee)$/;"	f
CheckTxFeeAndColor_UnitTest	test/test_bitcoin.cpp	/^bool CheckTxFeeAndColor_UnitTest(const CTransaction tx)$/;"	f
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Cancel_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_InvalidType_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Match_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Mint_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Normal_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Order_
CheckValid	main.cpp	/^    bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::__anon48::Handler_Vote_
CheckValid	main.h	/^    virtual bool CheckValid(const CTransaction &tx, CValidationState &state,$/;"	f	class:type_transaction_handler::HandlerInterface
Check_	addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
Checker	script/sign.h	/^    const BaseSignatureChecker& Checker() const { return checker; }$/;"	f	class:BlockHeaderSignatureCreator
Checker	script/sign.h	/^    const BaseSignatureChecker& Checker() const { return checker; }$/;"	f	class:TransactionSignatureCreator
CheckpointLSN	wallet/db.cpp	/^void CDBEnv::CheckpointLSN(const std::string& strFile)$/;"	f	class:CDBEnv
Checkpoints	chainparams.h	/^    const Checkpoints::CCheckpointData& Checkpoints() const { return checkpointData; }$/;"	f	class:CChainParams
Checkpoints	checkpoints.cpp	/^namespace Checkpoints {$/;"	n	file:
Checkpoints	checkpoints.h	/^namespace Checkpoints$/;"	n
CleanKey	wallet/crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Cleanup	coins.h	/^    void Cleanup() {$/;"	f	class:CCoins
Cleanup	leveldb/include/leveldb/iterator.h	/^  struct Cleanup {$/;"	s	class:leveldb::Iterator
CleanupBlockRevFiles	init.cpp	/^void CleanupBlockRevFiles()$/;"	f
CleanupCompaction	leveldb/db/db_impl.cc	/^void DBImpl::CleanupCompaction(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
CleanupFunction	leveldb/include/leveldb/iterator.h	/^  typedef void (*CleanupFunction)(void* arg1, void* arg2);$/;"	t	class:leveldb::Iterator
CleanupIteratorState	leveldb/db/db_impl.cc	/^static void CleanupIteratorState(void* arg1, void* arg2) {$/;"	f	namespace:leveldb::__anon14
Clear	addrman.h	/^    void Clear()$/;"	f	class:CAddrMan
Clear	coins.h	/^    void Clear()$/;"	f	class:CCoins
Clear	leveldb/db/dbformat.h	/^  void Clear() { rep_.clear(); }$/;"	f	class:leveldb::InternalKey
Clear	leveldb/db/version_edit.cc	/^void VersionEdit::Clear() {$/;"	f	class:leveldb::VersionEdit
Clear	leveldb/db/write_batch.cc	/^void WriteBatch::Clear() {$/;"	f	class:leveldb::WriteBatch
Clear	leveldb/util/histogram.cc	/^void Histogram::Clear() {$/;"	f	class:leveldb::Histogram
ClearBanned	net.cpp	/^void CNode::ClearBanned()$/;"	f	class:CNode
ClearCurrent	policy/fees.cpp	/^void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)$/;"	f	class:TxConfirmStats
ClearDatadirCache	util.cpp	/^void ClearDatadirCache()$/;"	f
ClearNew	addrman.cpp	/^void CAddrMan::ClearNew(int nUBucket, int nUBucketPos)$/;"	f	class:CAddrMan
ClearPrioritisation	txmempool.cpp	/^void CTxMemPool::ClearPrioritisation(const uint256 hash)$/;"	f	class:CTxMemPool
ClearSavedValue	leveldb/db/db_iter.cc	/^  inline void ClearSavedValue() {$/;"	f	class:leveldb::__anon22::DBIter	file:
ClearUnspendable	coins.h	/^    void ClearUnspendable()$/;"	f	class:CCoins
ClientAllowed	rpcserver.cpp	/^bool ClientAllowed(const boost::asio::ip::address& address)$/;"	f
ClipToRange	leveldb/db/db_impl.cc	/^static void ClipToRange(T* ptr, V minvalue, V maxvalue) {$/;"	f	namespace:leveldb
Close	leveldb/db/db_test.cc	/^  void Close() {$/;"	f	class:leveldb::DBTest
Close	leveldb/db/leveldb_main.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon25::StdoutPrinter
Close	leveldb/db/log_test.cc	/^    virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Close	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::__anon26::WritableFileImpl
Close	leveldb/table/table_test.cc	/^  virtual Status Close() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Close	leveldb/util/env_posix.cc	/^  virtual Status Close() {$/;"	f	class:leveldb::__anon42::PosixWritableFile
Close	leveldb/util/env_win.cc	/^Status Win32MapFile::Close()$/;"	f	class:leveldb::Win32::Win32MapFile
Close	wallet/db.cpp	/^void CDB::Close()$/;"	f	class:CDB
Close	wallet/db.cpp	/^void CDBEnv::Close()$/;"	f	class:CDBEnv
CloseDb	wallet/db.cpp	/^void CDBEnv::CloseDb(const std::string& strFile)$/;"	f	class:CDBEnv
CloseSocket	netbase.cpp	/^bool CloseSocket(SOCKET& hSocket)$/;"	f
CloseSocketDisconnect	net.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CmpCompare	leveldb/db/c_test.c	/^static int CmpCompare(void* arg, const char* a, size_t alen,$/;"	f	file:
CmpDestroy	leveldb/db/c_test.c	/^static void CmpDestroy(void* arg) { }$/;"	f	file:
CmpName	leveldb/db/c_test.c	/^static const char* CmpName(void* arg) {$/;"	f	file:
Code	leveldb/include/leveldb/status.h	/^  enum Code {$/;"	g	class:leveldb::Status
Coding	leveldb/util/coding_test.cc	/^class Coding { };$/;"	c	namespace:leveldb	file:
CoinSet	wallet/test/wallet_tests.cpp	/^typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;$/;"	t	file:
ColorFromValue	rpcserver.cpp	/^type_Color ColorFromValue(const Value& value)$/;"	f
ColorLicense	cache.h	/^    ColorLicense()$/;"	f	class:color_license::ColorLicense
ColorLicense	cache.h	/^class ColorLicense : public CacheInterface<Tc_t, Te_t>$/;"	c	namespace:color_license
CombineMultisig	script/sign.cpp	/^static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,$/;"	f	file:
CombineSignatures	script/sign.cpp	/^CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,$/;"	f
CombineSignatures	script/sign.cpp	/^CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f
CombineSignatures	script/sign.cpp	/^static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,$/;"	f	file:
CombinerAll	net.h	/^struct CombinerAll$/;"	s
CommandLineRPC	bitcoin-cli.cpp	/^int CommandLineRPC(int argc, char *argv[])$/;"	f
CommitTransaction	test/test_bitcoin.h	/^    inline bool CommitTransaction(CWalletTx &wtxNew, CReserveKey &reservekey)$/;"	f	class:CWallet_UnitTest
CommitTransaction	wallet/wallet.cpp	/^bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)$/;"	f	class:CWallet
Compact	leveldb/db/db_bench.cc	/^  void Compact(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Compact	leveldb/db/db_test.cc	/^  void Compact(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Compact	streams.h	/^    inline void Compact()$/;"	f	class:CDataStream
CompactMemTable	leveldb/db/db_impl.cc	/^void DBImpl::CompactMemTable() {$/;"	f	class:leveldb::DBImpl
CompactRange	leveldb/db/db_impl.cc	/^void DBImpl::CompactRange(const Slice* begin, const Slice* end) {$/;"	f	class:leveldb::DBImpl
CompactRange	leveldb/db/db_test.cc	/^  virtual void CompactRange(const Slice* start, const Slice* end) {$/;"	f	class:leveldb::ModelDB
CompactRange	leveldb/db/version_set.cc	/^Compaction* VersionSet::CompactRange($/;"	f	class:leveldb::VersionSet
Compaction	leveldb/db/version_set.cc	/^Compaction::Compaction(int level)$/;"	f	class:leveldb::Compaction
Compaction	leveldb/db/version_set.h	/^class Compaction {$/;"	c	namespace:leveldb
CompactionState	leveldb/db/db_impl.cc	/^  explicit CompactionState(Compaction* c)$/;"	f	struct:leveldb::DBImpl::CompactionState
CompactionState	leveldb/db/db_impl.cc	/^struct DBImpl::CompactionState {$/;"	s	class:leveldb::DBImpl	file:
CompactionStats	leveldb/db/db_impl.h	/^    CompactionStats() : micros(0), bytes_read(0), bytes_written(0) { }$/;"	f	struct:leveldb::DBImpl::CompactionStats
CompactionStats	leveldb/db/db_impl.h	/^  struct CompactionStats {$/;"	s	class:leveldb::DBImpl
Comparator	leveldb/db/skiplist_test.cc	/^struct Comparator {$/;"	s	namespace:leveldb	file:
Comparator	leveldb/include/leveldb/comparator.h	/^class Comparator {$/;"	c	namespace:leveldb
Compare	leveldb/db/c.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	struct:leveldb_comparator_t
Compare	leveldb/db/dbformat.cc	/^int InternalKeyComparator::Compare(const Slice& akey, const Slice& bkey) const {$/;"	f	class:leveldb::InternalKeyComparator
Compare	leveldb/db/dbformat.h	/^inline int InternalKeyComparator::Compare($/;"	f	class:leveldb::InternalKeyComparator
Compare	leveldb/table/block.cc	/^  inline int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::Block::Iter	file:
Compare	leveldb/table/table_test.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon33::ReverseKeyComparator
Compare	leveldb/util/comparator.cc	/^  virtual int Compare(const Slice& a, const Slice& b) const {$/;"	f	class:leveldb::__anon44::BytewiseComparatorImpl
CompareBigEndian	eccryptoverify.cpp	/^int CompareBigEndian(const unsigned char *c1, size_t c1len, const unsigned char *c2, size_t c2len) {$/;"	f	namespace:__anon62
CompareBlocksByHeight	rpcblockchain.cpp	/^struct CompareBlocksByHeight$/;"	s	file:
CompareIterators	leveldb/db/db_test.cc	/^static bool CompareIterators(int step,$/;"	f	namespace:leveldb
CompareTo	arith_uint256.cpp	/^int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const$/;"	f	class:base_uint
CompareTo	base58.cpp	/^int CBase58Data::CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompareValueOnly	wallet/wallet.cpp	/^struct CompareValueOnly$/;"	s	file:
Compress	compressor.cpp	/^bool CScriptCompressor::Compress(std::vector<unsigned char> &out) const$/;"	f	class:CScriptCompressor
CompressAmount	compressor.cpp	/^uint64_t CTxOutCompressor::CompressAmount(uint64_t n)$/;"	f	class:CTxOutCompressor
CompressibleString	leveldb/util/testutil.cc	/^extern Slice CompressibleString(Random* rnd, double compressed_fraction,$/;"	f	namespace:leveldb::test
CompressionType	leveldb/include/leveldb/options.h	/^enum CompressionType {$/;"	g	namespace:leveldb
ComputePriority	primitives/transaction.cpp	/^double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSize) const$/;"	f	class:CTransaction
ConcurrentReader	leveldb/db/skiplist_test.cc	/^static void ConcurrentReader(void* arg) {$/;"	f	namespace:leveldb
ConcurrentTest	leveldb/db/skiplist_test.cc	/^  ConcurrentTest() : list_(Comparator(), &arena_) { }$/;"	f	class:leveldb::ConcurrentTest
ConcurrentTest	leveldb/db/skiplist_test.cc	/^class ConcurrentTest {$/;"	c	namespace:leveldb	file:
CondVar	leveldb/port/port_example.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	leveldb/port/port_posix.cc	/^CondVar::CondVar(Mutex* mu)$/;"	f	class:leveldb::port::CondVar
CondVar	leveldb/port/port_posix.h	/^class CondVar {$/;"	c	namespace:leveldb::port
CondVar	leveldb/port/port_win.cc	/^CondVar::CondVar(Mutex* mu) :$/;"	f	class:leveldb::port::CondVar
CondVar	leveldb/port/port_win.h	/^class CondVar {$/;"	c	namespace:leveldb::port
Config	json/json_spirit_value.h	/^    typedef Config_vector< std::string > Config;$/;"	t	namespace:json_spirit
Config_map	json/json_spirit_value.h	/^    struct Config_map$/;"	s	namespace:json_spirit
Config_type	json/json_spirit_reader_template.h	/^        typedef typename Value_type::Config_type Config_type;$/;"	t	class:json_spirit::Semantic_actions
Config_type	json/json_spirit_value.h	/^        typedef Config Config_type;$/;"	t	class:json_spirit::Value_impl
Config_type	json/json_spirit_writer_template.h	/^        typedef typename Value_type::Config_type Config_type;$/;"	t	class:json_spirit::Generator
Config_vector	json/json_spirit_value.h	/^    struct Config_vector$/;"	s	namespace:json_spirit
ConnectBlock	main.cpp	/^bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool fJustCheck, bool fMiningPool)$/;"	f
ConnectNode	net.cpp	/^CNode* ConnectNode(CAddress addrConnect, const char *pszDest)$/;"	f
ConnectSocket	netbase.cpp	/^bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectSocketByName	netbase.cpp	/^bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)$/;"	f
ConnectSocketDirectly	netbase.cpp	/^bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)$/;"	f	file:
ConnectThroughProxy	netbase.cpp	/^static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)$/;"	f	file:
ConnectTip	main.cpp	/^bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *pblock) {$/;"	f	file:
ConnectTransactions	test/test_bitcoin.cpp	/^void ConnectTransactions(const uint256 &src_hash,$/;"	f
Connected	addrman.h	/^    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	addrman.cpp	/^void CAddrMan::Connected_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
Consensus	consensus/params.h	/^namespace Consensus {$/;"	n
Consensus	miner.h	/^namespace Consensus { struct Params; };$/;"	n
Const_str_ptr	json/json_spirit_value.h	/^        typedef typename String_type::const_pointer Const_str_ptr;  \/\/ eg const char*$/;"	t	class:json_spirit::Value_impl
Constructor	leveldb/table/table_test.cc	/^  explicit Constructor(const Comparator* cmp) : data_(STLLessThan(cmp)) { }$/;"	f	class:leveldb::Constructor
Constructor	leveldb/table/table_test.cc	/^class Constructor {$/;"	c	namespace:leveldb	file:
ConsumeDecimalNumber	leveldb/util/logging.cc	/^bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {$/;"	f	namespace:leveldb
Contains	chain.h	/^    bool Contains(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Contains	leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::Contains(const Key& key) const {$/;"	f	class:leveldb::SkipList
Contents	leveldb/db/db_test.cc	/^  std::string Contents() {$/;"	f	class:leveldb::DBTest
Contents	leveldb/db/write_batch_internal.h	/^  static Slice Contents(const WriteBatch* batch) {$/;"	f	class:leveldb::WriteBatchInternal
ContextualCheckBlock	main.cpp	/^bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)$/;"	f
ContextualCheckBlockHeader	main.cpp	/^bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)$/;"	f
ConvertLogFilesToTables	leveldb/db/repair.cc	/^  void ConvertLogFilesToTables() {$/;"	f	class:leveldb::__anon17::Repairer	file:
ConvertLogToTable	leveldb/db/repair.cc	/^  Status ConvertLogToTable(uint64_t log) {$/;"	f	class:leveldb::__anon17::Repairer	file:
CopyNodeStats	rpcnet.cpp	/^static void CopyNodeStats(std::vector<CNodeStats>& vstats)$/;"	f	file:
CopyState	leveldb/util/status.cc	/^const char* Status::CopyState(const char* state) {$/;"	f	class:leveldb::Status
CopyString	leveldb/db/c.cc	/^static char* CopyString(const std::string& str) {$/;"	f	file:
Corrupt	leveldb/db/corruption_test.cc	/^  void Corrupt(FileType filetype, int offset, int bytes_to_corrupt) {$/;"	f	class:leveldb::CorruptionTest
Corruption	leveldb/db/dumpfile.cc	/^  virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::__anon23::CorruptionReporter
Corruption	leveldb/db/log_test.cc	/^    virtual void Corruption(size_t bytes, const Status& status) {$/;"	f	class:leveldb::log::LogTest::ReportCollector
Corruption	leveldb/include/leveldb/status.h	/^  static Status Corruption(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
CorruptionError	leveldb/table/block.cc	/^  void CorruptionError() {$/;"	f	class:leveldb::Block::Iter	file:
CorruptionPossible	consensus/validation.h	/^    bool CorruptionPossible() const {$/;"	f	class:CValidationState
CorruptionReporter	leveldb/db/dumpfile.cc	/^class CorruptionReporter : public log::Reader::Reporter {$/;"	c	namespace:leveldb::__anon23	file:
CorruptionTest	leveldb/db/corruption_test.cc	/^  CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
CorruptionTest	leveldb/db/corruption_test.cc	/^class CorruptionTest {$/;"	c	namespace:leveldb	file:
Count	leveldb/db/write_batch.cc	/^int WriteBatchInternal::Count(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
CountFiles	leveldb/db/db_test.cc	/^  int CountFiles() {$/;"	f	class:leveldb::DBTest
Crc32c	leveldb/db/db_bench.cc	/^  void Crc32c(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Create	addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)$/;"	f	class:CAddrMan
CreateAddress	test/test_bitcoin.cpp	/^string CreateAddress()$/;"	f
CreateCancel	wallet/wallet.cpp	/^bool CWallet::CreateCancel(uint256& txhash, CWalletTx& wtxNew, string& strFailReason)$/;"	f	class:CWallet
CreateDestination	test/test_bitcoin.cpp	/^CTxDestination CreateDestination()$/;"	f
CreateDir	leveldb/helpers/memenv/memenv.cc	/^  virtual Status CreateDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
CreateDir	leveldb/include/leveldb/env.h	/^  Status CreateDir(const std::string& d) { return target_->CreateDir(d); }$/;"	f	class:leveldb::EnvWrapper
CreateDir	leveldb/util/env_posix.cc	/^  virtual Status CreateDir(const std::string& name) {$/;"	f	class:leveldb::__anon42::PosixEnv
CreateDir	leveldb/util/env_win.cc	/^Status Win32Env::CreateDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
CreateDirInner	leveldb/util/env_win.cc	/^static Status CreateDirInner( const std::string& dirname )$/;"	f	namespace:leveldb::Win32
CreateFilter	leveldb/db/c.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	struct:leveldb_filterpolicy_t
CreateFilter	leveldb/db/dbformat.cc	/^void InternalFilterPolicy::CreateFilter(const Slice* keys, int n,$/;"	f	class:leveldb::InternalFilterPolicy
CreateFilter	leveldb/table/filter_block_test.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::TestHashFilter
CreateFilter	leveldb/util/bloom.cc	/^  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {$/;"	f	class:leveldb::__anon40::BloomFilterPolicy
CreateInstance	support/pagelocker.h	/^    static void CreateInstance()$/;"	f	class:LockedPageManager
CreateLicense	wallet/rpcwallet.cpp	/^static void CreateLicense(const CTxDestination &address, const type_Color color, const string &info, CWalletTx& wtxNew)$/;"	f	file:
CreateLicenseHandlerCheckValidFixture	test/handler_license.cpp	/^    CreateLicenseHandlerCheckValidFixture()$/;"	f	struct:CreateLicenseHandlerCheckValidFixture
CreateLicenseHandlerCheckValidFixture	test/handler_license.cpp	/^struct CreateLicenseHandlerCheckValidFixture : public LicenseHandlerFixture$/;"	s	file:
CreateMatch	wallet/wallet.cpp	/^bool CWallet::CreateMatch(uint256& txhash1, uint256& txhash2, CWalletTx& wtxNew, string& strFailReason)$/;"	f	class:CWallet
CreateMerge	wallet/wallet.cpp	/^bool CWallet::CreateMerge(const vector<CRecipient>& vecSend, const type_Color& send_color, CWalletTx& wtxNew,$/;"	f	class:CWallet
CreateNewBlock	miner.cpp	/^CBlockTemplate* CreateNewBlock(CWallet *pwallet, CPubKey pubkey, uint32_t& nStartTime)$/;"	f
CreateNewBlock	miner.cpp	/^CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn, CWallet *pwallet, bool fMiningPool, uint32_t nStartTime)$/;"	f
CreateNewBlockWithKey	miner.cpp	/^CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)$/;"	f
CreateOrder	wallet/wallet.cpp	/^bool CWallet::CreateOrder(const int64_t sell_Amount, const type_Color sell_color, const int64_t buy_Amount, const type_Color buy_color, CWalletTx& wtxNew,$/;"	f	class:CWallet
CreatePidFile	util.cpp	/^void CreatePidFile(const boost::filesystem::path &path, pid_t pid)$/;"	f
CreateProcess	secp256k1/build-aux/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	secp256k1/libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateSig	script/sign.cpp	/^bool BlockHeaderSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const$/;"	f	class:BlockHeaderSignatureCreator
CreateSig	script/sign.cpp	/^bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const$/;"	f	class:TransactionSignatureCreator
CreateTheBilling_	main.cpp	/^    map<string, vector<map<string, bool> > >::iterator CreateTheBilling_(string &candidates)$/;"	f	class:type_transaction_handler::__anon48::Handler_Vote_	file:
CreateTheBilling_	main.cpp	/^    map<string, vector<map<string, bool> > >::iterator CreateTheBilling_(string &candidates, map<string, vector<map<string, bool> > > &VList)$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_	file:
CreateTransaction	test/test_bitcoin.cpp	/^void CreateTransaction($/;"	f
CreateTransaction	wallet/wallet.cpp	/^bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, const type_Color& send_color, CWalletTx& wtxNew,$/;"	f	class:CWallet
CreateTypeTransaction	test/test_bitcoin.h	/^    bool CreateTypeTransaction(const std::vector<CRecipient>& vecSend, const type_Color &send_color, int type,$/;"	f	class:CWallet_UnitTest
CreateTypeTransaction	wallet/wallet.cpp	/^bool CWallet::CreateTypeTransaction(const std::vector<CRecipient>& vecSend, const type_Color& send_color, int type, CWalletTx& wtxNew,$/;"	f	class:CWallet
CryptedKeyMap	keystore.h	/^typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
CurrentDir	leveldb/util/env_win.cc	/^static const std::string CurrentDir = GetCurrentDir();$/;"	m	namespace:leveldb::Win32	file:
CurrentDirW	leveldb/util/env_win.cc	/^static const std::wstring CurrentDirW = GetCurrentDirW();$/;"	m	namespace:leveldb::Win32	file:
CurrentFileName	leveldb/db/filename.cc	/^std::string CurrentFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
CurrentOptions	leveldb/db/db_test.cc	/^  Options CurrentOptions() {$/;"	f	class:leveldb::DBTest
CurrentSizeEstimate	leveldb/table/block_builder.cc	/^size_t BlockBuilder::CurrentSizeEstimate() const {$/;"	f	class:leveldb::BlockBuilder
DATA	secp256k1/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DATABASE_FLUSH_INTERVAL	main.h	/^static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;$/;"	v
DATABASE_WRITE_INTERVAL	main.h	/^static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;$/;"	v
DB	leveldb/include/leveldb/db.h	/^  DB() { }$/;"	f	class:leveldb::DB
DB	leveldb/include/leveldb/db.h	/^class DB {$/;"	c	namespace:leveldb
DBConstructor	leveldb/table/table_test.cc	/^  explicit DBConstructor(const Comparator* cmp)$/;"	f	class:leveldb::DBConstructor
DBConstructor	leveldb/table/table_test.cc	/^class DBConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
DBErrors	wallet/walletdb.h	/^enum DBErrors$/;"	g
DBImpl	leveldb/db/db_impl.cc	/^DBImpl::DBImpl(const Options& raw_options, const std::string& dbname)$/;"	f	class:leveldb::DBImpl
DBImpl	leveldb/db/db_impl.h	/^class DBImpl : public DB {$/;"	c	namespace:leveldb
DBIter	leveldb/db/db_iter.cc	/^  DBIter(DBImpl* db, const Comparator* cmp, Iterator* iter, SequenceNumber s,$/;"	f	class:leveldb::__anon22::DBIter
DBIter	leveldb/db/db_iter.cc	/^class DBIter: public Iterator {$/;"	c	namespace:leveldb::__anon22	file:
DBState	leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBState	leveldb/doc/bench/db_bench_tree_db.cc	/^  enum DBState {$/;"	g	class:leveldb::Benchmark	file:
DBSynchronize	leveldb/doc/bench/db_bench_tree_db.cc	/^static void DBSynchronize(kyotocabinet::TreeDB* db_)$/;"	f	file:
DBTest	leveldb/db/db_test.cc	/^  DBTest() : option_config_(kDefault),$/;"	f	class:leveldb::DBTest
DBTest	leveldb/db/db_test.cc	/^class DBTest {$/;"	c	namespace:leveldb	file:
DB_BEST_BLOCK	txdb.cpp	/^static const char DB_BEST_BLOCK = 'B';$/;"	v	file:
DB_BLOCK_FILES	txdb.cpp	/^static const char DB_BLOCK_FILES = 'f';$/;"	v	file:
DB_BLOCK_INDEX	txdb.cpp	/^static const char DB_BLOCK_INDEX = 'b';$/;"	v	file:
DB_COINS	txdb.cpp	/^static const char DB_COINS = 'c';$/;"	v	file:
DB_CORRUPT	wallet/walletdb.h	/^    DB_CORRUPT,$/;"	e	enum:DBErrors
DB_FLAG	txdb.cpp	/^static const char DB_FLAG = 'F';$/;"	v	file:
DB_LAST_BLOCK	txdb.cpp	/^static const char DB_LAST_BLOCK = 'l';$/;"	v	file:
DB_LOAD_FAIL	wallet/walletdb.h	/^    DB_LOAD_FAIL,$/;"	e	enum:DBErrors
DB_LOAD_OK	wallet/walletdb.h	/^    DB_LOAD_OK,$/;"	e	enum:DBErrors
DB_NEED_REWRITE	wallet/walletdb.h	/^    DB_NEED_REWRITE$/;"	e	enum:DBErrors
DB_NONCRITICAL_ERROR	wallet/walletdb.h	/^    DB_NONCRITICAL_ERROR,$/;"	e	enum:DBErrors
DB_REINDEX_FLAG	txdb.cpp	/^static const char DB_REINDEX_FLAG = 'R';$/;"	v	file:
DB_TEST	leveldb/table/table_test.cc	/^  DB_TEST$/;"	e	enum:leveldb::TestType	file:
DB_TOO_NEW	wallet/walletdb.h	/^    DB_TOO_NEW,$/;"	e	enum:DBErrors
DB_TXINDEX	txdb.cpp	/^static const char DB_TXINDEX = 't';$/;"	v	file:
DEBUG_CHECK	secp256k1/src/util.h	52;"	d
DEBUG_CHECK	secp256k1/src/util.h	54;"	d
DEFAULT_ADMIN_COLOR	main.h	/^static const type_Color DEFAULT_ADMIN_COLOR = 0x0000;$/;"	v
DEFAULT_ALERTS	main.h	/^static const bool DEFAULT_ALERTS = true;$/;"	v
DEFAULT_BLOCK_MAX_SIZE	main.h	/^static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;$/;"	v
DEFAULT_BLOCK_MIN_SIZE	main.h	/^static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;$/;"	v
DEFAULT_BLOCK_PRIORITY_SIZE	main.h	/^static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;$/;"	v
DEFAULT_CONNECT_TIMEOUT	netbase.h	/^static const int DEFAULT_CONNECT_TIMEOUT = 5000;$/;"	v
DEFAULT_DECAY	policy/fees.h	/^static const double DEFAULT_DECAY = .998;$/;"	v
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src\/config$/;"	m
DEFAULT_INCLUDES	secp256k1/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src$/;"	m
DEFAULT_LISTEN	net.h	/^static const bool DEFAULT_LISTEN = true;$/;"	v
DEFAULT_MAX_ORPHAN_TRANSACTIONS	main.h	/^static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;$/;"	v
DEFAULT_SCRIPTCHECK_THREADS	main.h	/^static const int DEFAULT_SCRIPTCHECK_THREADS = 0;$/;"	v
DEFAULT_TRANSACTION_FEE	wallet/wallet.h	/^static const CAmount DEFAULT_TRANSACTION_FEE = 0;$/;"	v
DEFAULT_TRANSACTION_MAXFEE	wallet/wallet.h	/^static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;$/;"	v
DEFAULT_TX_CONFIRM_TARGET	wallet/wallet.h	/^static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;$/;"	v
DEFAULT_UPNP	net.h	/^static const bool DEFAULT_UPNP = USE_UPNP;$/;"	v
DEFAULT_UPNP	net.h	/^static const bool DEFAULT_UPNP = false;$/;"	v
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	secp256k1/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	secp256k1/Makefile	/^DEPDIR = .deps$/;"	m
DESCRIPTION_LEN	policy/licenseinfo.h	/^const int DESCRIPTION_LEN = 40;$/;"	v
DEVICEROOT	leveldb/Makefile	/^DEVICEROOT=$(PLATFORMSROOT)\/iPhoneOS.platform\/Developer$/;"	m
DIRTY	coins.h	/^        DIRTY = (1 << 0), \/\/ This cache entry is potentially different from the version in the parent view.$/;"	e	enum:CCoinsCacheEntry::Flags
DISALLOW_COPY_AND_ASSIGN	leveldb/util/env_win.cc	44;"	d	file:
DISTCLEANFILES	Makefile	/^DISTCLEANFILES = obj\/build.h$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	secp256k1/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	secp256k1/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.leveldb.include \\$/;"	m
DIST_COMMON	secp256k1/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(crypto_libbitcoin_crypto_a_SOURCES) \\$/;"	m
DIST_SOURCES	secp256k1/Makefile	/^DIST_SOURCES = $(libsecp256k1_la_SOURCES) \\$/;"	m
DIST_SUBDIRS	Makefile	/^DIST_SUBDIRS = secp256k1$/;"	m
DIST_TARGETS	secp256k1/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DLLTOOL	secp256k1/Makefile	/^DLLTOOL = false$/;"	m
DNSSeeds	chainparams.h	/^    const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }$/;"	f	class:CChainParams
DONE	leveldb/db/skiplist_test.cc	/^    DONE$/;"	e	enum:leveldb::TestState::ReaderState	file:
DO_STRINGIZE	clientversion.h	39;"	d
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	secp256k1/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	secp256k1/Makefile	/^DUMPBIN = $/;"	m
DUMP_ADDRESSES_INTERVAL	net.cpp	33;"	d	file:
Damage	test/pmt_tests.cpp	/^    void Damage() {$/;"	f	class:CPartialMerkleTreeTester
DamagePush	test/script_tests.cpp	/^    TestBuilder& DamagePush(unsigned int pos)$/;"	f	class:__anon94::TestBuilder
DataDir	chainparamsbase.h	/^    const std::string& DataDir() const { return strDataDir; }$/;"	f	class:CBaseChainParams
DateTimeStrFormat	utiltime.cpp	/^std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)$/;"	f
Deactivate	cache.cpp	/^bool ActivateAddr::Deactivate(const type_Color &color, const std::string &addr)$/;"	f	class:activate_addr::ActivateAddr
DebugPrintInit	util.cpp	/^static void DebugPrintInit()$/;"	f	file:
DebugString	leveldb/db/dbformat.cc	/^std::string InternalKey::DebugString() const {$/;"	f	class:leveldb::InternalKey
DebugString	leveldb/db/dbformat.cc	/^std::string ParsedInternalKey::DebugString() const {$/;"	f	class:leveldb::ParsedInternalKey
DebugString	leveldb/db/version_edit.cc	/^std::string VersionEdit::DebugString() const {$/;"	f	class:leveldb::VersionEdit
DebugString	leveldb/db/version_set.cc	/^std::string Version::DebugString() const {$/;"	f	class:leveldb::Version
Decode	key.cpp	/^void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtKey
Decode	pubkey.cpp	/^void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {$/;"	f	class:CExtPubKey
DecodeBase32	utilstrencodings.cpp	/^string DecodeBase32(const string& str)$/;"	f
DecodeBase32	utilstrencodings.cpp	/^vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)$/;"	f
DecodeBase58	base58.cpp	/^bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)$/;"	f
DecodeBase58	base58.cpp	/^bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.cpp	/^bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.cpp	/^bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	utilstrencodings.cpp	/^string DecodeBase64(const string& str)$/;"	f
DecodeBase64	utilstrencodings.cpp	/^vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)$/;"	f
DecodeDumpString	wallet/rpcdump.cpp	/^std::string DecodeDumpString(const std::string &str)$/;"	f
DecodeDumpTime	wallet/rpcdump.cpp	/^int64_t static DecodeDumpTime(const std::string &str)$/;"	f	file:
DecodeEntry	leveldb/table/block.cc	/^static inline const char* DecodeEntry(const char* p, const char* limit,$/;"	f	namespace:leveldb
DecodeFixed32	leveldb/util/coding.h	/^inline uint32_t DecodeFixed32(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFixed64	leveldb/util/coding.h	/^inline uint64_t DecodeFixed64(const char* ptr) {$/;"	f	namespace:leveldb
DecodeFrom	leveldb/db/dbformat.h	/^  void DecodeFrom(const Slice& s) { rep_.assign(s.data(), s.size()); }$/;"	f	class:leveldb::InternalKey
DecodeFrom	leveldb/db/version_edit.cc	/^Status VersionEdit::DecodeFrom(const Slice& src) {$/;"	f	class:leveldb::VersionEdit
DecodeFrom	leveldb/table/format.cc	/^Status BlockHandle::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::BlockHandle
DecodeFrom	leveldb/table/format.cc	/^Status Footer::DecodeFrom(Slice* input) {$/;"	f	class:leveldb::Footer
DecodeHexBlk	core_read.cpp	/^bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)$/;"	f
DecodeHexTx	core_read.cpp	/^bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)$/;"	f
DecodeInfo	policy/licenseinfo.cpp	/^bool CLicenseInfo::DecodeInfo(const std::string& hexStr)$/;"	f	class:CLicenseInfo
DecodeKey	leveldb/util/cache_test.cc	/^static int DecodeKey(const Slice& k) {$/;"	f	namespace:leveldb
DecodeOP_N	script/script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
DecodeValue	leveldb/util/cache_test.cc	/^static int DecodeValue(void* v) { return reinterpret_cast<uintptr_t>(v); }$/;"	f	namespace:leveldb
Decompress	compressor.cpp	/^bool CScriptCompressor::Decompress(unsigned int nSize, const std::vector<unsigned char> &in)$/;"	f	class:CScriptCompressor
Decompress	pubkey.cpp	/^bool CPubKey::Decompress() {$/;"	f	class:CPubKey
DecompressAmount	compressor.cpp	/^uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)$/;"	f	class:CTxOutCompressor
Decrypt	wallet/crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)$/;"	f	class:CCrypter
DecryptKey	wallet/crypter.cpp	/^static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)$/;"	f	file:
DecryptSecret	wallet/crypter.cpp	/^static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)$/;"	f	file:
DecryptSeed	wallet/crypter.cpp	/^bool CCryptoKeyStore::DecryptSeed(const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const$/;"	f	class:CCryptoKeyStore
Default	leveldb/util/env_posix.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
Default	leveldb/util/env_win.cc	/^Env* Env::Default() {$/;"	f	class:leveldb::Env
DefaultConsistencyChecks	chainparams.h	/^    bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }$/;"	f	class:CChainParams
DefaultMinerThreads	chainparams.h	/^    int DefaultMinerThreads() const { return nMinerThreads; }$/;"	f	class:CChainParams
DelAddressBook	wallet/wallet.cpp	/^bool CWallet::DelAddressBook(const CTxDestination& address)$/;"	f	class:CWallet
DelayMilliseconds	leveldb/db/db_test.cc	/^void DelayMilliseconds(int millis) {$/;"	f	namespace:leveldb::__anon18
Delete	addrman.cpp	/^void CAddrMan::Delete(int nId)$/;"	f	class:CAddrMan
Delete	leveldb/db/db_impl.cc	/^Status DB::Delete(const WriteOptions& opt, const Slice& key) {$/;"	f	class:leveldb::DB
Delete	leveldb/db/db_impl.cc	/^Status DBImpl::Delete(const WriteOptions& options, const Slice& key) {$/;"	f	class:leveldb::DBImpl
Delete	leveldb/db/db_test.cc	/^  Status Delete(const std::string& k) {$/;"	f	class:leveldb::DBTest
Delete	leveldb/db/db_test.cc	/^  virtual Status Delete(const WriteOptions& o, const Slice& key) {$/;"	f	class:leveldb::ModelDB
Delete	leveldb/db/dumpfile.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon23::WriteBatchItemPrinter
Delete	leveldb/db/snapshot.h	/^  void Delete(const SnapshotImpl* s) {$/;"	f	class:leveldb::SnapshotList
Delete	leveldb/db/write_batch.cc	/^  virtual void Delete(const Slice& key) {$/;"	f	class:leveldb::__anon16::MemTableInserter
Delete	leveldb/db/write_batch.cc	/^void WriteBatch::Delete(const Slice& key) {$/;"	f	class:leveldb::WriteBatch
DeleteAnSSTFile	leveldb/db/db_test.cc	/^  bool DeleteAnSSTFile() {$/;"	f	class:leveldb::DBTest
DeleteBlock	leveldb/table/table.cc	/^static void DeleteBlock(void* arg, void* ignored) {$/;"	f	namespace:leveldb
DeleteCachedBlock	leveldb/table/table.cc	/^static void DeleteCachedBlock(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteDir	leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteDir(const std::string& dirname) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
DeleteDir	leveldb/include/leveldb/env.h	/^  Status DeleteDir(const std::string& d) { return target_->DeleteDir(d); }$/;"	f	class:leveldb::EnvWrapper
DeleteDir	leveldb/util/env_posix.cc	/^  virtual Status DeleteDir(const std::string& name) {$/;"	f	class:leveldb::__anon42::PosixEnv
DeleteDir	leveldb/util/env_win.cc	/^Status Win32Env::DeleteDir( const std::string& dirname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteEntry	leveldb/db/table_cache.cc	/^static void DeleteEntry(const Slice& key, void* value) {$/;"	f	namespace:leveldb
DeleteFile	leveldb/db/version_edit.h	/^  void DeleteFile(int level, uint64_t file) {$/;"	f	class:leveldb::VersionEdit
DeleteFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
DeleteFile	leveldb/include/leveldb/env.h	/^  Status DeleteFile(const std::string& f) { return target_->DeleteFile(f); }$/;"	f	class:leveldb::EnvWrapper
DeleteFile	leveldb/util/env_posix.cc	/^  virtual Status DeleteFile(const std::string& fname) {$/;"	f	class:leveldb::__anon42::PosixEnv
DeleteFile	leveldb/util/env_win.cc	/^Status Win32Env::DeleteFile( const std::string& fname )$/;"	f	class:leveldb::Win32::Win32Env
DeleteFile	leveldb/util/env_win.cc	34;"	d	file:
DeleteFileInternal	leveldb/helpers/memenv/memenv.cc	/^  void DeleteFileInternal(const std::string& fname) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
DeleteObsoleteFiles	leveldb/db/db_impl.cc	/^void DBImpl::DeleteObsoleteFiles() {$/;"	f	class:leveldb::DBImpl
DeleteRandom	leveldb/db/db_bench.cc	/^  void DeleteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeleteSeq	leveldb/db/db_bench.cc	/^  void DeleteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
DeletedFileSet	leveldb/db/version_edit.h	/^  typedef std::set< std::pair<int, uint64_t> > DeletedFileSet;$/;"	t	class:leveldb::VersionEdit
Deleter	leveldb/util/cache_test.cc	/^  static void Deleter(const Slice& key, void* v) {$/;"	f	class:leveldb::CacheTest
Derive	key.cpp	/^bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {$/;"	f	class:CExtKey
Derive	key.cpp	/^bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CKey
Derive	pubkey.cpp	/^bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {$/;"	f	class:CExtPubKey
Derive	pubkey.cpp	/^bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {$/;"	f	class:CPubKey
DeriveHDPubKeyAtIndex	wallet/hdkeystore.cpp	/^bool CHDKeyStore::DeriveHDPubKeyAtIndex(const HDChainID chainId, CHDPubKey& hdPubKeyOut, unsigned int nIndex, bool internal) const$/;"	f	class:CHDKeyStore
DeriveKey	wallet/hdkeystore.cpp	/^bool CHDKeyStore::DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const$/;"	f	class:CHDKeyStore
DescribeAddressVisitor	rpcmisc.cpp	/^    DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}$/;"	f	class:DescribeAddressVisitor
DescribeAddressVisitor	rpcmisc.cpp	/^class DescribeAddressVisitor : public boost::static_visitor<Object>$/;"	c	file:
DescriptorFileName	leveldb/db/filename.cc	/^std::string DescriptorFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
DestroyAndReopen	leveldb/db/db_test.cc	/^  void DestroyAndReopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
DestroyDB	leveldb/db/db_impl.cc	/^Status DestroyDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
DetachInfo	main.cpp	/^    void DetachInfo()$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
DifficultyAdjustmentInterval	consensus/params.h	/^    int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan \/ nPowTargetSpacing; }$/;"	f	struct:Consensus::Params
Direction	leveldb/db/db_iter.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon22::DBIter	file:
Direction	leveldb/table/merger.cc	/^  enum Direction {$/;"	g	class:leveldb::__anon28::MergingIterator	file:
DisconnectBlock	main.cpp	/^bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)$/;"	f
DisconnectTip	main.cpp	/^bool static DisconnectTip(CValidationState &state) {$/;"	f	file:
Discover	net.cpp	/^void static Discover(boost::thread_group& threadGroup)$/;"	f	file:
DoCompactionWork	leveldb/db/db_impl.cc	/^Status DBImpl::DoCompactionWork(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
DoDelete	leveldb/db/db_bench.cc	/^  void DoDelete(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoPush	test/script_tests.cpp	/^    void DoPush()$/;"	f	class:__anon94::TestBuilder	file:
DoPush	test/script_tests.cpp	/^    void DoPush(const std::vector<unsigned char>& data)$/;"	f	class:__anon94::TestBuilder	file:
DoReads	leveldb/db/autocompact_test.cc	/^void AutoCompactTest::DoReads(int n) {$/;"	f	class:leveldb::AutoCompactTest
DoS	consensus/validation.h	/^    bool DoS(int level, bool ret = false,$/;"	f	class:CValidationState
DoTest	test/script_tests.cpp	/^void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)$/;"	f
DoWrite	leveldb/db/db_bench.cc	/^  void DoWrite(ThreadState* thread, bool seq) {$/;"	f	class:leveldb::Benchmark	file:
DoWriteStringToFile	leveldb/util/env.cc	/^static Status DoWriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
DroppedBytes	leveldb/db/log_test.cc	/^  size_t DroppedBytes() const {$/;"	f	class:leveldb::log::LogTest
DumpAddresses	net.cpp	/^void DumpAddresses()$/;"	f
DumpDescriptor	leveldb/db/dumpfile.cc	/^Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon23
DumpFile	leveldb/db/dumpfile.cc	/^Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb
DumpFileCounts	leveldb/db/db_test.cc	/^  void DumpFileCounts(const char* label) {$/;"	f	class:leveldb::DBTest
DumpFilter	leveldb/util/bloom_test.cc	/^  void DumpFilter() {$/;"	f	class:leveldb::BloomTest
DumpLog	leveldb/db/dumpfile.cc	/^Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon23
DumpSSTableList	leveldb/db/db_test.cc	/^  std::string DumpSSTableList() {$/;"	f	class:leveldb::DBTest
DumpTable	leveldb/db/dumpfile.cc	/^Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon23
DynamicDiff	chainparams.h	/^    double DynamicDiff() const { return nDynamicDiff; }$/;"	f	class:CChainParams
DynamicMemoryUsage	coins.cpp	/^size_t CCoinsViewCache::DynamicMemoryUsage() const {$/;"	f	class:CCoinsViewCache
DynamicMemoryUsage	coins.h	/^    size_t DynamicMemoryUsage() const {$/;"	f	class:CCoins
DynamicMiner	chainparams.h	/^    unsigned int DynamicMiner() const { return nDynamicMiner; }$/;"	f	class:CChainParams
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const X& x)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const boost::unordered_set<X, Y>& s)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::map<X, Y>& m)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::set<X>& s)$/;"	f	namespace:memusage
DynamicUsage	memusage.h	/^static inline size_t DynamicUsage(const std::vector<X>& v)$/;"	f	namespace:memusage
E	test/util_tests.cpp	281;"	d	file:
E	test/util_tests.cpp	303;"	d	file:
ECC_InitSanityCheck	key.cpp	/^bool ECC_InitSanityCheck() {$/;"	f
ECC_Start	key.cpp	/^void ECC_Start() {$/;"	f
ECC_Stop	key.cpp	/^void ECC_Stop() {$/;"	f
ECDSA_SIG_recover_key_GFp	ecwrapper.cpp	/^int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)$/;"	f	namespace:__anon51
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_C	secp256k1/Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	secp256k1/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECHO_T	secp256k1/Makefile	/^ECHO_T = $/;"	m
ECMULT_TABLE_GET_GEJ	secp256k1/src/ecmult_impl.h	73;"	d
ECMULT_TABLE_GET_GE_STORAGE	secp256k1/src/ecmult_impl.h	83;"	d
ECMULT_TABLE_SIZE	secp256k1/src/ecmult_impl.h	69;"	d
EGREP	Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
EGREP	secp256k1/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
ENABLE_OPENSSL_TESTS	secp256k1/src/libsecp256k1-config.h	12;"	d
ENABLE_WALLET	config/bitcoin-config.h	33;"	d
END	utilstrencodings.h	17;"	d
ENTER_CRITICAL_SECTION	sync.h	169;"	d
ERecordType	net.h	/^    enum ERecordType {$/;"	g	class:CNetRecorder
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETAGS	secp256k1/Makefile	/^ETAGS = etags$/;"	m
EXCLUSIVE_LOCKS_REQUIRED	leveldb/port/thread_annotations.h	13;"	d
EXCLUSIVE_LOCKS_REQUIRED	threadsafety.h	31;"	d
EXCLUSIVE_LOCKS_REQUIRED	threadsafety.h	50;"	d
EXCLUSIVE_LOCK_FUNCTION	leveldb/port/thread_annotations.h	37;"	d
EXCLUSIVE_LOCK_FUNCTION	leveldb/util/mutexlock.h	/^  explicit MutexLock(port::Mutex *mu) EXCLUSIVE_LOCK_FUNCTION(mu)$/;"	f	class:leveldb::MutexLock
EXCLUSIVE_LOCK_FUNCTION	net.cpp	/^void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSend)$/;"	f
EXCLUSIVE_LOCK_FUNCTION	sync.h	/^    void lock() EXCLUSIVE_LOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
EXCLUSIVE_LOCK_FUNCTION	threadsafety.h	24;"	d
EXCLUSIVE_LOCK_FUNCTION	threadsafety.h	43;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	leveldb/port/thread_annotations.h	45;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	sync.h	/^    bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)$/;"	f	class:AnnotatedMixin
EXCLUSIVE_TRYLOCK_FUNCTION	threadsafety.h	26;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	threadsafety.h	45;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXEEXT	secp256k1/Makefile	/^EXEEXT = $/;"	m
EXISTING	leveldb/doc/bench/db_bench_sqlite3.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXISTING	leveldb/doc/bench/db_bench_tree_db.cc	/^    EXISTING$/;"	e	enum:leveldb::Benchmark::DBState	file:
EXPECT	secp256k1/src/util.h	31;"	d
EXPECT	secp256k1/src/util.h	33;"	d
EXPORT_SYMBOL	script/bitcoinconsensus.h	14;"	d
EXPORT_SYMBOL	script/bitcoinconsensus.h	16;"	d
EXPORT_SYMBOL	script/bitcoinconsensus.h	20;"	d
EXPORT_SYMBOL	script/bitcoinconsensus.h	23;"	d
EXPORT_SYMBOL	script/bitcoinconsensus.h	27;"	d
EXPORT_SYMBOL	script/bitcoinconsensus.h	66;"	d
EXTRA_DIST	Makefile	/^EXTRA_DIST = $(am__append_20)$/;"	m
EXTRA_DIST	secp256k1/Makefile	/^EXTRA_DIST = autogen.sh$/;"	m
EXTRA_LIBRARIES	Makefile	/^EXTRA_LIBRARIES = crypto\/libbitcoin_crypto.a libbitcoin_util.a \\$/;"	m
EXT_PUBLIC_KEY	chainparams.h	/^        EXT_PUBLIC_KEY,$/;"	e	enum:CChainParams::Base58Type
EXT_SECRET_KEY	chainparams.h	/^        EXT_SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
EditPush	test/script_tests.cpp	/^    TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)$/;"	f	class:__anon94::TestBuilder
EmitPhysicalRecord	leveldb/db/log_writer.cc	/^Status Writer::EmitPhysicalRecord(RecordType t, const char* ptr, size_t n) {$/;"	f	class:leveldb::log::Writer
EmptyIterator	leveldb/table/iterator.cc	/^  EmptyIterator(const Status& s) : status_(s) { }$/;"	f	class:leveldb::__anon29::EmptyIterator
EmptyIterator	leveldb/table/iterator.cc	/^class EmptyIterator : public Iterator {$/;"	c	namespace:leveldb::__anon29	file:
EnableCreateBlock	miner.cpp	/^bool EnableCreateBlock()$/;"	f
EnableMining	main.cpp	/^bool EnableMining(const CBlock& block, bool& fMissPreBlock) {$/;"	f
Encode	key.cpp	/^void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtKey
Encode	leveldb/db/dbformat.h	/^  Slice Encode() const {$/;"	f	class:leveldb::InternalKey
Encode	pubkey.cpp	/^void CExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {$/;"	f	class:CExtPubKey
EncodeBase32	utilstrencodings.cpp	/^string EncodeBase32(const string& str)$/;"	f
EncodeBase32	utilstrencodings.cpp	/^string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	base58.cpp	/^std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	base58.cpp	/^std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	base58.cpp	/^std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	utilstrencodings.cpp	/^string EncodeBase64(const string& str)$/;"	f
EncodeBase64	utilstrencodings.cpp	/^string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeDumpString	wallet/rpcdump.cpp	/^std::string static EncodeDumpString(const std::string &str)$/;"	f	file:
EncodeDumpTime	wallet/rpcdump.cpp	/^std::string static EncodeDumpTime(int64_t nTime)$/;"	f	file:
EncodeFixed32	leveldb/util/coding.cc	/^void EncodeFixed32(char* buf, uint32_t value) {$/;"	f	namespace:leveldb
EncodeFixed64	leveldb/util/coding.cc	/^void EncodeFixed64(char* buf, uint64_t value) {$/;"	f	namespace:leveldb
EncodeHexTx	core_write.cpp	/^string EncodeHexTx(const CTransaction& tx)$/;"	f
EncodeInfo	policy/licenseinfo.cpp	/^std::string CLicenseInfo::EncodeInfo() const$/;"	f	class:CLicenseInfo
EncodeKey	leveldb/db/memtable.cc	/^static const char* EncodeKey(std::string* scratch, const Slice& target) {$/;"	f	namespace:leveldb
EncodeKey	leveldb/util/cache_test.cc	/^static std::string EncodeKey(int k) {$/;"	f	namespace:leveldb
EncodeOP_N	script/script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
EncodeTo	leveldb/db/version_edit.cc	/^void VersionEdit::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::VersionEdit
EncodeTo	leveldb/table/format.cc	/^void BlockHandle::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::BlockHandle
EncodeTo	leveldb/table/format.cc	/^void Footer::EncodeTo(std::string* dst) const {$/;"	f	class:leveldb::Footer
EncodeValue	leveldb/util/cache_test.cc	/^static void* EncodeValue(uintptr_t v) { return reinterpret_cast<void*>(v); }$/;"	f	namespace:leveldb
EncodeVarint32	leveldb/util/coding.cc	/^char* EncodeVarint32(char* dst, uint32_t v) {$/;"	f	namespace:leveldb
EncodeVarint64	leveldb/util/coding.cc	/^char* EncodeVarint64(char* dst, uint64_t v) {$/;"	f	namespace:leveldb
Encrypt	wallet/crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)$/;"	f	class:CCrypter
EncryptHDSeeds	wallet/wallet.cpp	/^bool CWallet::EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CWallet
EncryptKeys	wallet/crypter.cpp	/^bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
EncryptSecret	wallet/crypter.cpp	/^static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f	file:
EncryptSeed	wallet/crypter.cpp	/^bool CCryptoKeyStore::EncryptSeed(const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const$/;"	f	class:CCryptoKeyStore
EncryptSeeds	wallet/hdkeystore.cpp	/^bool CHDKeyStore::EncryptSeeds()$/;"	f	class:CHDKeyStore
EncryptWallet	wallet/wallet.cpp	/^bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
EnsureWalletIsAvailable	wallet/rpcwallet.cpp	/^bool EnsureWalletIsAvailable(bool avoidException)$/;"	f
EnsureWalletIsUnlocked	wallet/rpcwallet.cpp	/^void EnsureWalletIsUnlocked()$/;"	f
Enter	sync.h	/^    void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
EnterCritical	sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
Env	leveldb/include/leveldb/env.h	/^  Env() { }$/;"	f	class:leveldb::Env
Env	leveldb/include/leveldb/env.h	/^class Env {$/;"	c	namespace:leveldb
EnvPosixTest	leveldb/util/env_test.cc	/^  EnvPosixTest() : env_(Env::Default()) { }$/;"	f	class:leveldb::EnvPosixTest
EnvPosixTest	leveldb/util/env_test.cc	/^class EnvPosixTest {$/;"	c	namespace:leveldb	file:
EnvShutdown	wallet/db.cpp	/^void CDBEnv::EnvShutdown()$/;"	f	class:CDBEnv
EnvWrapper	leveldb/include/leveldb/env.h	/^  explicit EnvWrapper(Env* t) : target_(t) { }$/;"	f	class:leveldb::EnvWrapper
EnvWrapper	leveldb/include/leveldb/env.h	/^class EnvWrapper : public Env {$/;"	c	namespace:leveldb
Equal	leveldb/db/skiplist.h	/^  bool Equal(const Key& a, const Key& b) const { return (compare_(a, b) == 0); }$/;"	f	class:leveldb::SkipList
EqualTo	arith_uint256.cpp	/^bool base_uint<BITS>::EqualTo(uint64_t b) const$/;"	f	class:base_uint
Erase	leveldb/util/cache.cc	/^  virtual void Erase(const Slice& key) {$/;"	f	class:leveldb::__anon39::ShardedLRUCache
Erase	leveldb/util/cache.cc	/^void LRUCache::Erase(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon39::LRUCache
Erase	leveldb/util/cache_test.cc	/^  void Erase(int key) {$/;"	f	class:leveldb::CacheTest
Erase	leveldbwrapper.h	/^    bool Erase(const K& key, bool fSync = false) throw(leveldb_error)$/;"	f	class:CLevelDBWrapper
Erase	leveldbwrapper.h	/^    void Erase(const K& key)$/;"	f	class:CLevelDBBatch
Erase	wallet/db.h	/^    bool Erase(const K& key)$/;"	f	class:CDB
EraseDestData	wallet/wallet.cpp	/^bool CWallet::EraseDestData(const CTxDestination &dest, const string &key)$/;"	f	class:CWallet
EraseDestData	wallet/walletdb.cpp	/^bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)$/;"	f	class:CWalletDB
EraseFromWallet	validationinterface.h	/^    virtual void EraseFromWallet(const uint256 &hash) {}$/;"	f	class:CValidationInterface
EraseFromWallet	wallet/wallet.cpp	/^void CWallet::EraseFromWallet(const uint256 &hash)$/;"	f	class:CWallet
EraseHDMasterSeed	wallet/walletdb.cpp	/^bool CWalletDB::EraseHDMasterSeed(const uint256& hash)$/;"	f	class:CWalletDB
EraseKeyPool	wallet/wallet.cpp	/^bool CWallet::EraseKeyPool()$/;"	f	class:CWallet
EraseName	wallet/walletdb.cpp	/^bool CWalletDB::EraseName(const std::string& strAddress)$/;"	f	class:CWalletDB
EraseOrphanTx	main.cpp	/^void static EraseOrphanTx(uint256 hash)$/;"	f	file:
EraseOrphansFor	main.cpp	/^void EraseOrphansFor(NodeId peer)$/;"	f
ErasePool	wallet/walletdb.cpp	/^bool CWalletDB::ErasePool(int64_t nPool)$/;"	f	class:CWalletDB
ErasePurpose	wallet/walletdb.cpp	/^bool CWalletDB::ErasePurpose(const std::string& strPurpose)$/;"	f	class:CWalletDB
EraseTransaction	validationinterface.h	/^    boost::signals2::signal<void (const uint256 &)> EraseTransaction;$/;"	m	struct:CMainSignals
EraseTx	wallet/walletdb.cpp	/^bool CWalletDB::EraseTx(uint256 hash)$/;"	f	class:CWalletDB
EraseWatchOnly	wallet/walletdb.cpp	/^bool CWalletDB::EraseWatchOnly(const CScript &dest)$/;"	f	class:CWalletDB
Error	consensus/validation.h	/^    bool Error(std::string strRejectReasonIn="") {$/;"	f	class:CValidationState
ErrorCheck	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ErrorCheck(int status) {$/;"	f	file:
ErrorEnv	leveldb/util/testutil.h	/^  ErrorEnv() : EnvWrapper(Env::Default()),$/;"	f	class:leveldb::test::ErrorEnv
ErrorEnv	leveldb/util/testutil.h	/^class ErrorEnv : public EnvWrapper {$/;"	c	namespace:leveldb::test
ErrorReply	rpcserver.cpp	/^void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)$/;"	f
Error_position	json/json_spirit_error_position.h	/^    inline Error_position::Error_position( unsigned int line, unsigned int column, const std::string& reason )$/;"	f	class:json_spirit::Error_position
Error_position	json/json_spirit_error_position.h	/^    inline Error_position::Error_position()$/;"	f	class:json_spirit::Error_position
Error_position	json/json_spirit_error_position.h	/^    struct Error_position$/;"	s	namespace:json_spirit
EscapeString	leveldb/util/logging.cc	/^std::string EscapeString(const Slice& value) {$/;"	f	namespace:leveldb
EstimateMedianVal	policy/fees.cpp	/^double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,$/;"	f	class:TxConfirmStats
EvalScript	script/interpreter.cpp	/^bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f
Evict	leveldb/db/table_cache.cc	/^void TableCache::Evict(uint64_t file_number) {$/;"	f	class:leveldb::TableCache
ExecErrorCheck	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void ExecErrorCheck(int status, char *err_msg) {$/;"	f	file:
ExistInPool	main.cpp	/^bool ExistInPool(const CTransaction& tx) {$/;"	f
Exists	leveldbwrapper.h	/^    bool Exists(const K& key) const throw(leveldb_error)$/;"	f	class:CLevelDBWrapper
Exists	wallet/db.h	/^    bool Exists(const K& key)$/;"	f	class:CDB
Extend	leveldb/util/crc32c.cc	/^uint32_t Extend(uint32_t crc, const char* buf, size_t size) {$/;"	f	namespace:leveldb::crc32c
ExtraFormatFlags	tinyformat.h	/^        enum ExtraFormatFlags$/;"	g	class:tinyformat::detail::FormatIterator
ExtractDestination	script/standard.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinations	script/standard.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
ExtractMatches	merkleblock.cpp	/^uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {$/;"	f	class:CPartialMerkleTree
ExtractMetaData	leveldb/db/repair.cc	/^  void ExtractMetaData() {$/;"	f	class:leveldb::__anon17::Repairer	file:
ExtractUserKey	leveldb/db/dbformat.h	/^inline Slice ExtractUserKey(const Slice& internal_key) {$/;"	f	namespace:leveldb
ExtractValueType	leveldb/db/dbformat.h	/^inline ValueType ExtractValueType(const Slice& internal_key) {$/;"	f	namespace:leveldb
FALLTHROUGH_INTENDED	leveldb/util/hash.cc	13;"	d	file:
FD_SETSIZE	compat.h	25;"	d
FD_SETSIZE	compat.h	27;"	d
FEATURE_BASE	wallet/wallet.h	/^    FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	wallet/wallet.h	/^    FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_LATEST	wallet/wallet.h	/^    FEATURE_LATEST = 60000$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	wallet/wallet.h	/^    FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FEE_COLOR	main.h	/^static const type_Color FEE_COLOR = 1;$/;"	v
FEE_ESTIMATES_FILENAME	init.cpp	/^static const char* FEE_ESTIMATES_FILENAME="fee_estimates.dat";$/;"	v	file:
FEE_SPACING	policy/fees.h	/^static const double FEE_SPACING = 1.1;$/;"	v
FEE_VALUE	main.h	/^static const int64_t FEE_VALUE = COIN;$/;"	v
FGREP	Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FGREP	secp256k1/Makefile	/^FGREP = \/usr\/bin\/grep -F$/;"	m
FIXED	policy/licenseinfo.h	/^    FIXED = 0,$/;"	e	enum:FeeTypes
FLAGS_WAL_enabled	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_WAL_enabled = true;$/;"	v	file:
FLAGS_benchmarks	leveldb/db/db_bench.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_benchmarks	leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_benchmarks =$/;"	v	file:
FLAGS_bloom_bits	leveldb/db/db_bench.cc	/^static int FLAGS_bloom_bits = -1;$/;"	v	file:
FLAGS_cache_size	leveldb/db/db_bench.cc	/^static int FLAGS_cache_size = -1;$/;"	v	file:
FLAGS_cache_size	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_cache_size = 4194304;$/;"	v	file:
FLAGS_compression	leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_compression = true;$/;"	v	file:
FLAGS_compression_ratio	leveldb/db/db_bench.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	leveldb/doc/bench/db_bench_sqlite3.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_compression_ratio	leveldb/doc/bench/db_bench_tree_db.cc	/^static double FLAGS_compression_ratio = 0.5;$/;"	v	file:
FLAGS_db	leveldb/db/db_bench.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	leveldb/doc/bench/db_bench_sqlite3.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_db	leveldb/doc/bench/db_bench_tree_db.cc	/^static const char* FLAGS_db = NULL;$/;"	v	file:
FLAGS_histogram	leveldb/db/db_bench.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_histogram	leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_histogram = false;$/;"	v	file:
FLAGS_num	leveldb/db/db_bench.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_num = 1000000;$/;"	v	file:
FLAGS_num_pages	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_num_pages = 4096;$/;"	v	file:
FLAGS_open_files	leveldb/db/db_bench.cc	/^static int FLAGS_open_files = 0;$/;"	v	file:
FLAGS_page_size	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_page_size	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_page_size = 1024;$/;"	v	file:
FLAGS_reads	leveldb/db/db_bench.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_reads	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_reads = -1;$/;"	v	file:
FLAGS_threads	leveldb/db/db_bench.cc	/^static int FLAGS_threads = 1;$/;"	v	file:
FLAGS_transaction	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_transaction = true;$/;"	v	file:
FLAGS_use_existing_db	leveldb/db/db_bench.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	leveldb/doc/bench/db_bench_sqlite3.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_use_existing_db	leveldb/doc/bench/db_bench_tree_db.cc	/^static bool FLAGS_use_existing_db = false;$/;"	v	file:
FLAGS_value_size	leveldb/db/db_bench.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	leveldb/doc/bench/db_bench_sqlite3.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_value_size	leveldb/doc/bench/db_bench_tree_db.cc	/^static int FLAGS_value_size = 100;$/;"	v	file:
FLAGS_write_buffer_size	leveldb/db/db_bench.cc	/^static int FLAGS_write_buffer_size = 0;$/;"	v	file:
FLATDATA	serialize.h	376;"	d
FLUSH_STATE_ALWAYS	main.cpp	/^    FLUSH_STATE_ALWAYS$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_IF_NEEDED	main.cpp	/^    FLUSH_STATE_IF_NEEDED,$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_NONE	main.cpp	/^    FLUSH_STATE_NONE,$/;"	e	enum:FlushStateMode	file:
FLUSH_STATE_PERIODIC	main.cpp	/^    FLUSH_STATE_PERIODIC,$/;"	e	enum:FlushStateMode	file:
FREE	policy/licenseinfo.h	/^    FREE = 0,$/;"	e	enum:MintSchedule
FRESH	coins.h	/^        FRESH = (1 << 1), \/\/ The parent view does not have this entry (or it is pruned).$/;"	e	enum:CCoinsCacheEntry::Flags
FRESH	leveldb/doc/bench/db_bench_sqlite3.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FRESH	leveldb/doc/bench/db_bench_tree_db.cc	/^    FRESH,$/;"	e	enum:leveldb::Benchmark::DBState	file:
FalsePositiveRate	leveldb/util/bloom_test.cc	/^  double FalsePositiveRate() {$/;"	f	class:leveldb::BloomTest
Fee	main.h	/^    inline Fee(type_Color Color, int64_t Value) : color(Color), value(Value) { }$/;"	f	class:Fee
Fee	main.h	/^class Fee$/;"	c
FeeTypes	policy/licenseinfo.h	/^enum FeeTypes {$/;"	g
FetchCoins	coins.cpp	/^CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewCache
FetchNext	net.cpp	/^bool CNetRecorder::CFileReader::FetchNext(CNetRecorder::CRecord* rec)$/;"	f	class:CNetRecorder::CFileReader
FileCommit	util.cpp	/^void FileCommit(FILE *fileout)$/;"	f
FileExists	leveldb/helpers/memenv/memenv.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
FileExists	leveldb/include/leveldb/env.h	/^  bool FileExists(const std::string& f) { return target_->FileExists(f); }$/;"	f	class:leveldb::EnvWrapper
FileExists	leveldb/util/env_posix.cc	/^  virtual bool FileExists(const std::string& fname) {$/;"	f	class:leveldb::__anon42::PosixEnv
FileExists	leveldb/util/env_win.cc	/^bool Win32Env::FileExists(const std::string& fname)$/;"	f	class:leveldb::Win32::Win32Env
FileLock	leveldb/include/leveldb/env.h	/^  FileLock() { }$/;"	f	class:leveldb::FileLock
FileLock	leveldb/include/leveldb/env.h	/^class FileLock {$/;"	c	namespace:leveldb
FileMetaData	leveldb/db/version_edit.h	/^  FileMetaData() : refs(0), allowed_seeks(1 << 30), file_size(0) { }$/;"	f	struct:leveldb::FileMetaData
FileMetaData	leveldb/db/version_edit.h	/^struct FileMetaData {$/;"	s	namespace:leveldb
FileNameTest	leveldb/db/filename_test.cc	/^class FileNameTest { };$/;"	c	namespace:leveldb	file:
FileSet	leveldb/db/version_set.cc	/^  typedef std::set<FileMetaData*, BySmallestKey> FileSet;$/;"	t	class:leveldb::VersionSet::Builder	file:
FileSize	leveldb/table/table_builder.cc	/^uint64_t TableBuilder::FileSize() const {$/;"	f	class:leveldb::TableBuilder
FileState	leveldb/helpers/memenv/memenv.cc	/^  FileState() : refs_(0), size_(0) {}$/;"	f	class:leveldb::__anon26::FileState
FileState	leveldb/helpers/memenv/memenv.cc	/^class FileState {$/;"	c	namespace:leveldb::__anon26	file:
FileSystem	leveldb/helpers/memenv/memenv.cc	/^  typedef std::map<std::string, FileState*> FileSystem;$/;"	t	class:leveldb::__anon26::InMemoryEnv	file:
FileType	leveldb/db/filename.h	/^enum FileType {$/;"	g	namespace:leveldb
FilesPerLevel	leveldb/db/db_test.cc	/^  std::string FilesPerLevel() {$/;"	f	class:leveldb::DBTest
Fill	streams.h	/^    bool Fill() {$/;"	f	class:CBufferedFile
FillLevels	leveldb/db/db_test.cc	/^  void FillLevels(const std::string& smallest, const std::string& largest) {$/;"	f	class:leveldb::DBTest
FilterBlockBuilder	leveldb/table/filter_block.cc	/^FilterBlockBuilder::FilterBlockBuilder(const FilterPolicy* policy)$/;"	f	class:leveldb::FilterBlockBuilder
FilterBlockBuilder	leveldb/table/filter_block.h	/^class FilterBlockBuilder {$/;"	c	namespace:leveldb
FilterBlockReader	leveldb/table/filter_block.cc	/^FilterBlockReader::FilterBlockReader(const FilterPolicy* policy,$/;"	f	class:leveldb::FilterBlockReader
FilterBlockReader	leveldb/table/filter_block.h	/^class FilterBlockReader {$/;"	c	namespace:leveldb
FilterBlockTest	leveldb/table/filter_block_test.cc	/^class FilterBlockTest {$/;"	c	namespace:leveldb	file:
FilterCreate	leveldb/db/c_test.c	/^static char* FilterCreate($/;"	f	file:
FilterDestroy	leveldb/db/c_test.c	/^static void FilterDestroy(void* arg) { }$/;"	f	file:
FilterKeyMatch	leveldb/db/c_test.c	/^unsigned char FilterKeyMatch($/;"	f
FilterName	leveldb/db/c_test.c	/^static const char* FilterName(void* arg) {$/;"	f	file:
FilterPolicy	leveldb/include/leveldb/filter_policy.h	/^class FilterPolicy {$/;"	c	namespace:leveldb
FilterSize	leveldb/util/bloom_test.cc	/^  size_t FilterSize() const {$/;"	f	class:leveldb::BloomTest
Finalize	crypto/hmac_sha256.cpp	/^void CHMAC_SHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA256
Finalize	crypto/hmac_sha512.cpp	/^void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CHMAC_SHA512
Finalize	crypto/ripemd160.cpp	/^void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CRIPEMD160
Finalize	crypto/sha1.cpp	/^void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA1
Finalize	crypto/sha256.cpp	/^void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA256
Finalize	crypto/sha512.cpp	/^void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE])$/;"	f	class:CSHA512
Finalize	hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash160
Finalize	hash.h	/^    void Finalize(unsigned char hash[OUTPUT_SIZE]) {$/;"	f	class:CHash256
Finalize	leveldb/db/version_set.cc	/^void VersionSet::Finalize(Version* v) {$/;"	f	class:leveldb::VersionSet
FinalizeNode	main.cpp	/^void FinalizeNode(NodeId nodeid)$/;"	f	namespace:__anon47
FinalizeNode	net.h	/^    boost::signals2::signal<void (NodeId)> FinalizeNode;$/;"	m	struct:CNodeSignals
Find	addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)$/;"	f	class:CAddrMan
Find	leveldb/db/version_set_test.cc	/^  int Find(const char* key) {$/;"	f	class:leveldb::FindFileTest
Find	script/script.h	/^    int Find(opcodetype op) const$/;"	f	class:CScript
FindAndDelete	script/script.h	/^    int FindAndDelete(const CScript& b)$/;"	f	class:CScript
FindBlockPos	main.cpp	/^bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)$/;"	f
FindByte	streams.h	/^    void FindByte(char ch) {$/;"	f	class:CBufferedFile
FindFile	leveldb/db/version_set.cc	/^int FindFile(const InternalKeyComparator& icmp,$/;"	f	namespace:leveldb
FindFileTest	leveldb/db/version_set_test.cc	/^  FindFileTest() : disjoint_sorted_files_(true) { }$/;"	f	class:leveldb::FindFileTest
FindFileTest	leveldb/db/version_set_test.cc	/^class FindFileTest {$/;"	c	namespace:leveldb	file:
FindFiles	leveldb/db/repair.cc	/^  Status FindFiles() {$/;"	f	class:leveldb::__anon17::Repairer	file:
FindFilesToPrune	main.cpp	/^void FindFilesToPrune(std::set<int>& setFilesToPrune)$/;"	f
FindFork	chain.cpp	/^const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {$/;"	f	class:CChain
FindForkInGlobalIndex	main.cpp	/^CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)$/;"	f
FindGreaterOrEqual	leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindGreaterOrEqual(const Key& key, Node** prev)$/;"	f	class:leveldb::SkipList
FindLargest	leveldb/table/merger.cc	/^void MergingIterator::FindLargest() {$/;"	f	class:leveldb::__anon28::MergingIterator
FindLast	leveldb/db/skiplist.h	/^typename SkipList<Key,Comparator>::Node* SkipList<Key,Comparator>::FindLast()$/;"	f	class:leveldb::SkipList
FindLessThan	leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::FindLessThan(const Key& key) const {$/;"	f	class:leveldb::SkipList
FindMostWorkChain	main.cpp	/^static CBlockIndex* FindMostWorkChain() {$/;"	f	file:
FindNextBlocksToDownload	main.cpp	/^void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBlockIndex*>& vBlocks, NodeId& nodeStaller) {$/;"	f	namespace:__anon47
FindNextUserEntry	leveldb/db/db_iter.cc	/^void DBIter::FindNextUserEntry(bool skipping, std::string* skip) {$/;"	f	class:leveldb::__anon22::DBIter
FindNode	net.cpp	/^CNode* FindNode(const CNetAddr& ip)$/;"	f
FindNode	net.cpp	/^CNode* FindNode(const CService& addr)$/;"	f
FindNode	net.cpp	/^CNode* FindNode(const string& addrName)$/;"	f
FindPointer	leveldb/util/cache.cc	/^  LRUHandle** FindPointer(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon39::HandleTable	file:
FindPrevUserEntry	leveldb/db/db_iter.cc	/^void DBIter::FindPrevUserEntry() {$/;"	f	class:leveldb::__anon22::DBIter
FindShortSuccessor	leveldb/db/c.cc	/^  virtual void FindShortSuccessor(std::string* key) const { }$/;"	f	struct:leveldb_comparator_t
FindShortSuccessor	leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::InternalKeyComparator
FindShortSuccessor	leveldb/table/table_test.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon33::ReverseKeyComparator
FindShortSuccessor	leveldb/util/comparator.cc	/^  virtual void FindShortSuccessor(std::string* key) const {$/;"	f	class:leveldb::__anon44::BytewiseComparatorImpl
FindShortestSeparator	leveldb/db/c.cc	/^  virtual void FindShortestSeparator(std::string*, const Slice&) const { }$/;"	f	struct:leveldb_comparator_t
FindShortestSeparator	leveldb/db/dbformat.cc	/^void InternalKeyComparator::FindShortestSeparator($/;"	f	class:leveldb::InternalKeyComparator
FindShortestSeparator	leveldb/table/table_test.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon33::ReverseKeyComparator
FindShortestSeparator	leveldb/util/comparator.cc	/^  virtual void FindShortestSeparator($/;"	f	class:leveldb::__anon44::BytewiseComparatorImpl
FindSmallest	leveldb/table/merger.cc	/^void MergingIterator::FindSmallest() {$/;"	f	class:leveldb::__anon28::MergingIterator
FindTable	leveldb/db/table_cache.cc	/^Status TableCache::FindTable(uint64_t file_number, uint64_t file_size,$/;"	f	class:leveldb::TableCache
FindUndoPos	main.cpp	/^bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)$/;"	f
FindWalletTx	wallet/walletdb.cpp	/^DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)$/;"	f	class:CWalletDB
Finish	leveldb/table/block_builder.cc	/^Slice BlockBuilder::Finish() {$/;"	f	class:leveldb::BlockBuilder
Finish	leveldb/table/filter_block.cc	/^Slice FilterBlockBuilder::Finish() {$/;"	f	class:leveldb::FilterBlockBuilder
Finish	leveldb/table/table_builder.cc	/^Status TableBuilder::Finish() {$/;"	f	class:leveldb::TableBuilder
Finish	leveldb/table/table_test.cc	/^  void Finish(const Options& options,$/;"	f	class:leveldb::Constructor
FinishCompactionOutputFile	leveldb/db/db_impl.cc	/^Status DBImpl::FinishCompactionOutputFile(CompactionState* compact,$/;"	f	class:leveldb::DBImpl
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::BlockConstructor
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::DBConstructor
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::MemTableConstructor
FinishImpl	leveldb/table/table_test.cc	/^  virtual Status FinishImpl(const Options& options, const KVMap& data) {$/;"	f	class:leveldb::TableConstructor
FinishedSingleOp	leveldb/db/db_bench.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::__anon15::Stats
FinishedSingleOp	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FinishedSingleOp	leveldb/doc/bench/db_bench_tree_db.cc	/^  void FinishedSingleOp() {$/;"	f	class:leveldb::Benchmark	file:
FixChecksum	leveldb/db/log_test.cc	/^  void FixChecksum(int header_offset, int len) {$/;"	f	class:leveldb::log::LogTest
FixedSeeds	chainparams.h	/^    const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }$/;"	f	class:CChainParams
Flag_None	tinyformat.h	/^            Flag_None                = 0,$/;"	e	enum:tinyformat::detail::FormatIterator::ExtraFormatFlags
Flag_SpacePadPositive	tinyformat.h	/^            Flag_SpacePadPositive    = 1<<1, \/\/ pad positive values with spaces$/;"	e	enum:tinyformat::detail::FormatIterator::ExtraFormatFlags
Flag_TruncateToPrecision	tinyformat.h	/^            Flag_TruncateToPrecision = 1<<0, \/\/ truncate length to stream precision()$/;"	e	enum:tinyformat::detail::FormatIterator::ExtraFormatFlags
Flag_VariablePrecision	tinyformat.h	/^            Flag_VariablePrecision   = 1<<3  \/\/ variable field precision in arg list$/;"	e	enum:tinyformat::detail::FormatIterator::ExtraFormatFlags
Flag_VariableWidth	tinyformat.h	/^            Flag_VariableWidth       = 1<<2, \/\/ variable field width in arg list$/;"	e	enum:tinyformat::detail::FormatIterator::ExtraFormatFlags
Flags	coins.h	/^    enum Flags {$/;"	g	struct:CCoinsCacheEntry
Flush	coins.cpp	/^bool CCoinsViewCache::Flush() {$/;"	f	class:CCoinsViewCache
Flush	leveldb/db/leveldb_main.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon25::StdoutPrinter
Flush	leveldb/db/log_test.cc	/^    virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Flush	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::__anon26::WritableFileImpl
Flush	leveldb/table/table_builder.cc	/^void TableBuilder::Flush() {$/;"	f	class:leveldb::TableBuilder
Flush	leveldb/table/table_test.cc	/^  virtual Status Flush() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Flush	leveldb/util/env_posix.cc	/^  virtual Status Flush() {$/;"	f	class:leveldb::__anon42::PosixWritableFile
Flush	leveldb/util/env_win.cc	/^Status Win32MapFile::Flush()$/;"	f	class:leveldb::Win32::Win32MapFile
Flush	leveldbwrapper.h	/^    bool Flush()$/;"	f	class:CLevelDBWrapper
Flush	wallet/db.cpp	/^void CDB::Flush()$/;"	f	class:CDB
Flush	wallet/db.cpp	/^void CDBEnv::Flush(bool fShutdown)$/;"	f	class:CDBEnv
Flush	wallet/wallet.cpp	/^void CWallet::Flush(bool shutdown)$/;"	f	class:CWallet
FlushBlockFile	main.cpp	/^void static FlushBlockFile(bool fFinalize = false)$/;"	f	file:
FlushStateMode	main.cpp	/^enum FlushStateMode {$/;"	g	file:
FlushStateToDisk	main.cpp	/^bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {$/;"	f	file:
FlushStateToDisk	main.cpp	/^void FlushStateToDisk() {$/;"	f
Footer	leveldb/table/format.h	/^  Footer() { }$/;"	f	class:leveldb::Footer
Footer	leveldb/table/format.h	/^class Footer {$/;"	c	namespace:leveldb
ForEachOverlapping	leveldb/db/version_set.cc	/^void Version::ForEachOverlapping(Slice user_key, Slice internal_key,$/;"	f	class:leveldb::Version
ForRead	serialize.h	/^    bool ForRead() const { return false; }$/;"	f	struct:CSerActionSerialize
ForRead	serialize.h	/^    bool ForRead() const { return true; }$/;"	f	struct:CSerActionUnserialize
ForceError	leveldb/db/log_test.cc	/^  void ForceError() {$/;"	f	class:leveldb::log::LogTest
FormatException	util.cpp	/^static std::string FormatException(const std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	clientversion.cpp	/^std::string FormatFullVersion()$/;"	f
FormatIterator	tinyformat.h	/^        FormatIterator(std::ostream& out, const char* fmt)$/;"	f	class:tinyformat::detail::FormatIterator
FormatIterator	tinyformat.h	/^class FormatIterator$/;"	c	namespace:tinyformat::detail
FormatMoney	utilmoneystr.cpp	/^string FormatMoney(const CAmount& n, bool fPlus)$/;"	f
FormatParagraph	utilstrencodings.cpp	/^std::string FormatParagraph(const std::string in, size_t width, size_t indent)$/;"	f
FormatScript	core_write.cpp	/^string FormatScript(const CScript& script)$/;"	f
FormatScriptFlags	test/transaction_tests.cpp	/^string FormatScriptFlags(unsigned int flags)$/;"	f
FormatSubVersion	clientversion.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatTest	leveldb/db/dbformat_test.cc	/^class FormatTest { };$/;"	c	namespace:leveldb	file:
FormatVersion	clientversion.cpp	/^static std::string FormatVersion(int nVersion)$/;"	f	file:
Free	leveldb/db/c_test.c	/^static void Free(char** ptr) {$/;"	f	file:
FromTx	coins.h	/^    void FromTx(const CTransaction &tx, int nHeightIn)$/;"	f	class:CCoins
Function	scheduler.h	/^    typedef boost::function<void(void)> Function;$/;"	t	class:CScheduler
Fuzz	net.cpp	/^void CNode::Fuzz(int nChance)$/;"	f	class:CNode
GCOIN	chainparamsbase.h	/^        GCOIN,$/;"	e	enum:CBaseChainParams::Network
GCOIN_CACHE_H	cache.h	6;"	d
GCOIN_LICENSEINFO_H	policy/licenseinfo.h	6;"	d
GCOV	Makefile	/^GCOV = \/usr\/bin\/gcov$/;"	m
GENERATED_TEST_FILES	Makefile	/^GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)$/;"	m
GENHTML	Makefile	/^GENHTML = $/;"	m
GENISOIMAGE	Makefile	/^GENISOIMAGE = $/;"	m
GETHEADERS_VERSION	version.h	/^static const int GETHEADERS_VERSION = 31800;$/;"	v
GIT	Makefile	/^GIT = \/usr\/bin\/git$/;"	m
GIT_ARCHIVE	clientversion.cpp	46;"	d	file:
GIT_COMMIT_DATE	clientversion.cpp	49;"	d	file:
GIT_COMMIT_ID	clientversion.cpp	48;"	d	file:
GREP	Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREP	secp256k1/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GUARDED_BY	threadsafety.h	18;"	d
GUARDED_BY	threadsafety.h	37;"	d
GUARDED_VAR	threadsafety.h	19;"	d
GUARDED_VAR	threadsafety.h	38;"	d
GZIP_ENV	secp256k1/Makefile	/^GZIP_ENV = --best$/;"	m
GcoinMiner	miner.cpp	/^void static GcoinMiner(CWallet *pwallet, CPubKey pubkey)$/;"	f	file:
GeneralCheckValid	main.cpp	/^bool GeneralCheckValid(const CTransaction& tx, CValidationState &state,$/;"	f	namespace:type_transaction_handler
Generate	leveldb/db/db_bench.cc	/^  Slice Generate(size_t len) {$/;"	f	class:leveldb::__anon15::RandomGenerator
Generate	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon35::RandomGenerator
Generate	leveldb/doc/bench/db_bench_tree_db.cc	/^  Slice Generate(int len) {$/;"	f	class:leveldb::__anon36::RandomGenerator
GenerateFilter	leveldb/table/filter_block.cc	/^void FilterBlockBuilder::GenerateFilter() {$/;"	f	class:leveldb::FilterBlockBuilder
GenerateGcoins	miner.cpp	/^void GenerateGcoins(bool fGenerate, CWallet* pwallet, int nThreads)$/;"	f
GenerateNewKey	test/test_bitcoin.cpp	/^CPubKey GenerateNewKey()$/;"	f
GenerateNewKey	wallet/wallet.cpp	/^CPubKey CWallet::GenerateNewKey()$/;"	f	class:CWallet
Generator	json/json_spirit_writer_template.h	/^        Generator( const Value_type& value, Ostream_type& os, bool pretty )$/;"	f	class:json_spirit::Generator
Generator	json/json_spirit_writer_template.h	/^    class Generator$/;"	c	namespace:json_spirit
Genesis	chain.h	/^    CBlockIndex *Genesis() const {$/;"	f	class:CChain
GenesisBlock	chainparams.h	/^    const CBlock& GenesisBlock() const { return genesis; }$/;"	f	class:CChainParams
Get	base58.cpp	/^CTxDestination CBitcoinAddress::Get() const$/;"	f	class:CBitcoinAddress
Get	leveldb/db/db_impl.cc	/^Status DBImpl::Get(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
Get	leveldb/db/db_test.cc	/^  std::string Get(const std::string& k, const Snapshot* snapshot = NULL) {$/;"	f	class:leveldb::DBTest
Get	leveldb/db/db_test.cc	/^  virtual Status Get(const ReadOptions& options,$/;"	f	class:leveldb::ModelDB
Get	leveldb/db/memtable.cc	/^bool MemTable::Get(const LookupKey& key, std::string* value, Status* s) {$/;"	f	class:leveldb::MemTable
Get	leveldb/db/skiplist_test.cc	/^    intptr_t Get(int k) {$/;"	f	struct:leveldb::ConcurrentTest::State
Get	leveldb/db/table_cache.cc	/^Status TableCache::Get(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
Get	leveldb/db/version_set.cc	/^Status Version::Get(const ReadOptions& options,$/;"	f	class:leveldb::Version
Get	script/sigcache.cpp	/^    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)$/;"	f	class:__anon86::CSignatureCache
Get	streams.h	/^    FILE* Get() const           { return file; }$/;"	f	class:CAutoFile
GetAccountAddress	wallet/rpcwallet.cpp	/^CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)$/;"	f
GetAccountAddresses	wallet/wallet.cpp	/^set<CTxDestination> CWallet::GetAccountAddresses(string strAccount) const$/;"	f	class:CWallet
GetAccountAmounts	wallet/wallet.cpp	/^void CWalletTx::GetAccountAmounts(const string& strAccount, std::map<type_Color, CAmount>& nReceived, std::map<type_Color, CAmount>& nSent, const isminefilter& filter) const$/;"	f	class:CWalletTx
GetAccountBalance	wallet/rpcwallet.cpp	/^CAmount GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter, map<type_Color, CAmount>& color_amount)$/;"	f
GetAccountBalance	wallet/rpcwallet.cpp	/^CAmount GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter, map<type_Color, CAmount>& color_amount)$/;"	f
GetAccountColorBalance	wallet/rpcwallet.cpp	/^CAmount GetAccountColorBalance(CWalletDB& walletdb, const string& strAccount, const type_Color& color, int nMinDepth, const isminefilter& filter)$/;"	f
GetAccountColorBalance	wallet/rpcwallet.cpp	/^CAmount GetAccountColorBalance(const string& strAccount, const type_Color& color, int nMinDepth, const isminefilter& filter)$/;"	f
GetAccountCreditDebit	wallet/walletdb.cpp	/^CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)$/;"	f	class:CWalletDB
GetActualMiningTimespan	pow.cpp	/^int64_t GetActualMiningTimespan(const CBlockIndex* pindexLast, const Consensus::Params& params) {$/;"	f
GetAddr	addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddr_	addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)$/;"	f	class:CAddrMan
GetAddressBalance	wallet/wallet.cpp	/^void CWallet::GetAddressBalance(const string& strAddress, map<type_Color, CAmount>& color_amount, int nMinDepth) const$/;"	f	class:CWallet
GetAddressBalances	wallet/wallet.cpp	/^map<CTxDestination, CAmount> CWallet::GetAddressBalances()$/;"	f	class:CWallet
GetAddressGroupings	wallet/wallet.cpp	/^set< set<CTxDestination> > CWallet::GetAddressGroupings()$/;"	f	class:CWallet
GetAdjustedTime	timedata.cpp	/^int64_t GetAdjustedTime()$/;"	f
GetAllReserveKeys	wallet/wallet.cpp	/^void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const$/;"	f	class:CWallet
GetAllowed	leveldb/util/env_posix.cc	/^  intptr_t GetAllowed() const {$/;"	f	class:leveldb::__anon42::MmapLimiter	file:
GetAmounts	wallet/wallet.cpp	/^void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,$/;"	f	class:CWalletTx
GetAncestor	chain.cpp	/^CBlockIndex* CBlockIndex::GetAncestor(int height)$/;"	f	class:CBlockIndex
GetAncestor	chain.cpp	/^const CBlockIndex* CBlockIndex::GetAncestor(int height) const$/;"	f	class:CBlockIndex
GetAndClear	streams.h	/^    void GetAndClear(CSerializeData &data) {$/;"	f	class:CDataStream
GetApproximateSizes	leveldb/db/db_impl.cc	/^void DBImpl::GetApproximateSizes($/;"	f	class:leveldb::DBImpl
GetApproximateSizes	leveldb/db/db_test.cc	/^  virtual void GetApproximateSizes(const Range* r, int n, uint64_t* sizes) {$/;"	f	class:leveldb::ModelDB
GetArg	util.cpp	/^int64_t GetArg(const std::string& strArg, int64_t nDefault)$/;"	f
GetArg	util.cpp	/^std::string GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f
GetAvailableChainIDs	wallet/hdkeystore.cpp	/^bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)$/;"	f	class:CHDKeyStore
GetAvailableColorCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetAvailableColorCredit(type_Color color, bool fUseCache) const$/;"	f	class:CWalletTx
GetAvailableCredit	wallet/wallet.cpp	/^void CWalletTx::GetAvailableCredit(std::map<type_Color, int64_t> &color_amount) const$/;"	f	class:CWalletTx
GetAvailableWatchOnlyCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const$/;"	f	class:CWalletTx
GetBalance	wallet/wallet.cpp	/^void CWallet::GetBalance(map<type_Color, CAmount>& color_amount) const$/;"	f	class:CWallet
GetBannedList	net.cpp	/^std::vector<std::pair<CNetAddr, int64_t> > CNode::GetBannedList() {$/;"	f	class:CNode
GetBestBlock	coins.cpp	/^uint256 CCoinsView::GetBestBlock() const { return uint256(); }$/;"	f	class:CCoinsView
GetBestBlock	coins.cpp	/^uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }$/;"	f	class:CCoinsViewBacked
GetBestBlock	coins.cpp	/^uint256 CCoinsViewCache::GetBestBlock() const {$/;"	f	class:CCoinsViewCache
GetBestBlock	test/coins_tests.cpp	/^    uint256 GetBestBlock() const { return hashBestBlock_; }$/;"	f	class:__anon93::CCoinsViewTest
GetBestBlock	txdb.cpp	/^uint256 CCoinsViewDB::GetBestBlock() const$/;"	f	class:CCoinsViewDB
GetBlockHash	chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	chain.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHeader	chain.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockHeader	primitives/block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlock
GetBlockPos	chain.h	/^    CDiskBlockPos GetBlockPos() const {$/;"	f	class:CBlockIndex
GetBlockPosFilename	main.cpp	/^boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)$/;"	f
GetBlockProof	pow.cpp	/^arith_uint256 GetBlockProof(const CBlockIndex& block)$/;"	f
GetBlockProofEquivalentTime	pow.cpp	/^int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)$/;"	f
GetBlockStartTime	primitives/block.h	/^    int64_t GetBlockStartTime() const$/;"	f	class:CBlock
GetBlockSubsidy	main.cpp	/^CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)$/;"	f
GetBlockTime	chain.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockTime	primitives/block.h	/^    int64_t GetBlockTime() const$/;"	f	class:CBlockHeader
GetBlockTimeout	main.cpp	/^int64_t GetBlockTimeout(int64_t nTime, int nValidatedQueuedBefore, const Consensus::Params &consensusParams)$/;"	f	namespace:__anon47
GetBlocksToMaturity	wallet/wallet.cpp	/^int CMerkleTx::GetBlocksToMaturity(const int &type) const$/;"	f	class:CMerkleTx
GetBoolArg	util.cpp	/^bool GetBoolArg(const std::string& strArg, bool fDefault)$/;"	f
GetBroadcastTransactions	wallet/wallet.h	/^    bool GetBroadcastTransactions() const { return fBroadcastTransactions; }$/;"	f	class:CWallet
GetBucketPosition	addrman.cpp	/^int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const$/;"	f	class:CAddrInfo
GetByte	netbase.cpp	/^unsigned int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetCScript	keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetCacheSize	coins.cpp	/^unsigned int CCoinsViewCache::GetCacheSize() const {$/;"	f	class:CCoinsViewCache
GetChain	wallet/hdkeystore.cpp	/^bool CHDKeyStore::GetChain(const HDChainID chainId, CHDChain& chainOut) const$/;"	f	class:CHDKeyStore
GetChance	addrman.cpp	/^double CAddrInfo::GetChance(int64_t nNow) const$/;"	f	class:CAddrInfo
GetChange	wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	wallet/wallet.cpp	/^CAmount CWallet::GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetChange	wallet/wallet.cpp	/^CAmount CWalletTx::GetChange() const$/;"	f	class:CWalletTx
GetCheapHash	uint256.h	/^    uint64_t GetCheapHash() const$/;"	f	class:uint256
GetChildren	leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon26::InMemoryEnv
GetChildren	leveldb/include/leveldb/env.h	/^  Status GetChildren(const std::string& dir, std::vector<std::string>* r) {$/;"	f	class:leveldb::EnvWrapper
GetChildren	leveldb/util/env_posix.cc	/^  virtual Status GetChildren(const std::string& dir,$/;"	f	class:leveldb::__anon42::PosixEnv
GetChildren	leveldb/util/env_win.cc	/^Status Win32Env::GetChildren(const std::string& dir, std::vector<std::string>* result)$/;"	f	class:leveldb::Win32::Win32Env
GetCoins	coins.cpp	/^bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }$/;"	f	class:CCoinsView
GetCoins	coins.cpp	/^bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }$/;"	f	class:CCoinsViewBacked
GetCoins	coins.cpp	/^bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {$/;"	f	class:CCoinsViewCache
GetCoins	init.cpp	/^    bool GetCoins(const uint256 &txid, CCoins &coins) const {$/;"	f	class:CCoinsViewErrorCatcher
GetCoins	test/coins_tests.cpp	/^    bool GetCoins(const uint256& txid, CCoins& coins) const$/;"	f	class:__anon93::CCoinsViewTest
GetCoins	txdb.cpp	/^bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {$/;"	f	class:CCoinsViewDB
GetCoins	txmempool.cpp	/^bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const$/;"	f	class:CCoinsViewMemPool
GetCoinsFromCache	main.cpp	/^bool GetCoinsFromCache(const COutPoint &outpoint, CCoins &coins, bool fUseMempool)$/;"	f
GetCoinsFromCache_UnitTest	test/test_bitcoin.cpp	/^bool GetCoinsFromCache_UnitTest(const COutPoint &outpoint,$/;"	f
GetColor	main.h	/^    type_Color GetColor() const { return color; }$/;"	f	class:Fee
GetColor0Balance	test/test_bitcoin.h	/^    int64_t GetColor0Balance() const$/;"	f	class:CWallet_UnitTest
GetColor0Balance	wallet/wallet.cpp	/^CAmount CWallet::GetColor0Balance() const$/;"	f	class:CWallet
GetColorBalance	wallet/wallet.cpp	/^CAmount CWallet::GetColorBalance(const type_Color& color) const$/;"	f	class:CWallet
GetColorBalanceFromFixedAddress	wallet/wallet.cpp	/^CAmount CWallet::GetColorBalanceFromFixedAddress(const string& strFromAddress, const type_Color& color) const$/;"	f	class:CWallet
GetCommand	protocol.cpp	/^const char* CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetComment	test/script_tests.cpp	/^    std::string GetComment()$/;"	f	class:__anon94::TestBuilder
GetCompact	arith_uint256.cpp	/^uint32_t arith_uint256::GetCompact(bool fNegative) const$/;"	f	class:arith_uint256
GetConfigFile	util.cpp	/^fs::path GetConfigFile()$/;"	f
GetConflicts	wallet/wallet.cpp	/^set<uint256> CWallet::GetConflicts(const uint256& txid) const$/;"	f	class:CWallet
GetConflicts	wallet/wallet.cpp	/^set<uint256> CWalletTx::GetConflicts() const$/;"	f	class:CWalletTx
GetConsensus	chainparams.h	/^    const Consensus::Params& GetConsensus() const { return consensus; }$/;"	f	class:CChainParams
GetCredit	wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	wallet/wallet.cpp	/^CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const$/;"	f	class:CWallet
GetCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetCredit(const isminefilter& filter) const$/;"	f	class:CWalletTx
GetCryptedMasterSeed	wallet/hdkeystore.cpp	/^bool CHDKeyStore::GetCryptedMasterSeed(const HDChainID& hash, std::vector<unsigned char>& vchCryptedSecret) const$/;"	f	class:CHDKeyStore
GetCurrentDir	leveldb/util/env_win.cc	/^std::string GetCurrentDir()$/;"	f	namespace:leveldb::Win32
GetCurrentDirW	leveldb/util/env_win.cc	/^std::wstring GetCurrentDirW()$/;"	f	namespace:leveldb::Win32
GetCursor	wallet/db.h	/^    Dbc* GetCursor()$/;"	f	class:CDB
GetDataDir	util.cpp	/^const fs::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDebit	wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	wallet/wallet.cpp	/^CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const$/;"	f	class:CWallet
GetDebit	wallet/wallet.cpp	/^CAmount CWalletTx::GetDebit(const isminefilter& filter) const$/;"	f	class:CWalletTx
GetDebugLogName	util.cpp	/^static std::string GetDebugLogName()$/;"	f	file:
GetDefaultDataDir	util.cpp	/^fs::path GetDefaultDataDir()$/;"	f
GetDefaultPort	chainparams.h	/^    int GetDefaultPort() const { return nDefaultPort; }$/;"	f	class:CChainParams
GetDepthInMainChain	wallet/wallet.cpp	/^int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const$/;"	f	class:CMerkleTx
GetDepthInMainChain	wallet/wallet.h	/^    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }$/;"	f	class:CMerkleTx
GetDepthInMainChainINTERNAL	wallet/wallet.cpp	/^int CMerkleTx::GetDepthInMainChainINTERNAL(const CBlockIndex* &pindexRet) const$/;"	f	class:CMerkleTx
GetDestData	wallet/wallet.cpp	/^bool CWallet::GetDestData(const CTxDestination &dest, const string &key, string *value) const$/;"	f	class:CWallet
GetDestination	main.cpp	/^string GetDestination(const CScript& tx_scriptPubKey)$/;"	f
GetDifficulty	rpcblockchain.cpp	/^double GetDifficulty(const CBlockIndex* blockindex)$/;"	f
GetDustThreshold	primitives/transaction.h	/^    CAmount GetDustThreshold(const CFeeRate &minRelayTxFee) const$/;"	f	class:CTxOut
GetExtNetwork	netbase.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetFee	amount.cpp	/^CAmount CFeeRate::GetFee(size_t nSize) const$/;"	f	class:CFeeRate
GetFee	main.h	/^    int64_t GetFee() const { return value;}$/;"	f	class:Fee
GetFee	txmempool.h	/^    CAmount GetFee() const { return nFee; }$/;"	f	class:CTxMemPoolEntry
GetFeePerK	amount.h	/^    CAmount GetFeePerK() const { return GetFee(1000); } \/\/ satoshis-per-1000-bytes$/;"	f	class:CFeeRate
GetFileIterator	leveldb/db/version_set.cc	/^static Iterator* GetFileIterator(void* arg,$/;"	f	namespace:leveldb
GetFileSize	leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* file_size) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
GetFileSize	leveldb/include/leveldb/env.h	/^  Status GetFileSize(const std::string& f, uint64_t* s) {$/;"	f	class:leveldb::EnvWrapper
GetFileSize	leveldb/util/env_posix.cc	/^  virtual Status GetFileSize(const std::string& fname, uint64_t* size) {$/;"	f	class:leveldb::__anon42::PosixEnv
GetFileSize	leveldb/util/env_win.cc	/^Status Win32Env::GetFileSize( const std::string& fname, uint64_t* file_size )$/;"	f	class:leveldb::Win32::Win32Env
GetGenesisNonce	chainparams.cpp	/^uint32_t GetGenesisNonce(CBlockHeader *genesisH)$/;"	f
GetGroup	netbase.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHandler	main.cpp	/^HandlerInterface *GetHandler(const tx_type &type)$/;"	f	namespace:type_transaction_handler
GetHash	alert.cpp	/^uint256 CAlert::GetHash() const$/;"	f	class:CAlert
GetHash	hash.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHash	netbase.cpp	/^uint64_t CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHash	primitives/block.cpp	/^uint256 CBlockHeader::GetHash() const$/;"	f	class:CBlockHeader
GetHash	primitives/transaction.cpp	/^uint256 CMutableTransaction::GetHash() const$/;"	f	class:CMutableTransaction
GetHash	primitives/transaction.cpp	/^uint256 CTxOut::GetHash() const$/;"	f	class:CTxOut
GetHash	primitives/transaction.h	/^    const uint256& GetHash() const {$/;"	f	class:CTransaction
GetHash	pubkey.h	/^    uint256 GetHash() const$/;"	f	class:CPubKey
GetHash	uint256.cpp	/^uint64_t uint256::GetHash(const uint256& salt) const$/;"	f	class:uint256
GetHeapProfile	leveldb/port/port_posix.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeapProfile	leveldb/port/port_win.h	/^inline bool GetHeapProfile(void (*func)(void*, const char*, int), void* arg) {$/;"	f	namespace:leveldb::port
GetHeight	main.cpp	/^int GetHeight()$/;"	f	namespace:__anon47
GetHeight	net.h	/^    boost::signals2::signal<int ()> GetHeight;$/;"	m	struct:CNodeSignals
GetHeight	txmempool.h	/^    unsigned int GetHeight() const { return nHeight; }$/;"	f	class:CTxMemPoolEntry
GetHex	arith_uint256.cpp	/^std::string base_uint<BITS>::GetHex() const$/;"	f	class:base_uint
GetHex	uint256.cpp	/^std::string base_blob<BITS>::GetHex() const$/;"	f	class:base_blob
GetID	pubkey.h	/^    CKeyID GetID() const$/;"	f	class:CPubKey
GetId	net.h	/^    NodeId GetId() const$/;"	f	class:CNode
GetImmatureBalance	wallet/wallet.cpp	/^CAmount CWallet::GetImmatureBalance(const type_Color& color) const$/;"	f	class:CWallet
GetImmatureCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const$/;"	f	class:CWalletTx
GetImmatureWatchOnlyBalance	wallet/wallet.cpp	/^CAmount CWallet::GetImmatureWatchOnlyBalance(const type_Color& color) const$/;"	f	class:CWallet
GetImmatureWatchOnlyCredit	wallet/wallet.cpp	/^CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const$/;"	f	class:CWalletTx
GetIn6Addr	netbase.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	netbase.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetInternalKey	leveldb/db/version_edit.cc	/^static bool GetInternalKey(Slice* input, InternalKey* dst) {$/;"	f	namespace:leveldb
GetJSON	test/script_tests.cpp	/^    Array GetJSON()$/;"	f	class:__anon94::TestBuilder
GetKey	base58.cpp	/^CKey CBitcoinSecret::GetKey()$/;"	f	class:CBitcoinSecret
GetKey	base58.h	/^    K GetKey()$/;"	f	class:CBitcoinExtKeyBase
GetKey	keystore.h	/^    bool GetKey(const CKeyID &address, CKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetKey	netbase.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const$/;"	f	class:CCryptoKeyStore
GetKey	wallet/hdkeystore.cpp	/^bool CHDKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const$/;"	f	class:CHDKeyStore
GetKeyBirthTimes	wallet/wallet.cpp	/^void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {$/;"	f	class:CWallet
GetKeyFromPool	wallet/wallet.cpp	/^bool CWallet::GetKeyFromPool(CPubKey& result)$/;"	f	class:CWallet
GetKeyID	base58.cpp	/^bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const$/;"	f	class:CBitcoinAddress
GetKeyPoolSize	wallet/wallet.h	/^    unsigned int GetKeyPoolSize()$/;"	f	class:CWallet
GetKeys	keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CBasicKeyStore
GetKeys	wallet/crypter.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CCryptoKeyStore
GetLastCheckpoint	checkpoints.cpp	/^    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)$/;"	f	namespace:Checkpoints
GetLastErrSz	leveldb/util/env_win.cc	/^std::string GetLastErrSz()$/;"	f	namespace:leveldb::Win32
GetLastErrSzW	leveldb/util/env_win.cc	/^std::wstring GetLastErrSzW()$/;"	f	namespace:leveldb::Win32
GetLegacySigOpCount	main.cpp	/^unsigned int GetLegacySigOpCount(const CTransaction& tx)$/;"	f
GetLen	pubkey.h	/^    unsigned int static GetLen(unsigned char chHeader)$/;"	f	class:CPubKey
GetLengthPrefixedSlice	leveldb/db/memtable.cc	/^static Slice GetLengthPrefixedSlice(const char* data) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	leveldb/util/coding.cc	/^bool GetLengthPrefixedSlice(Slice* input, Slice* result) {$/;"	f	namespace:leveldb
GetLengthPrefixedSlice	leveldb/util/coding.cc	/^const char* GetLengthPrefixedSlice(const char* p, const char* limit,$/;"	f	namespace:leveldb
GetLevel	leveldb/db/version_edit.cc	/^static bool GetLevel(Slice* input, int* level) {$/;"	f	namespace:leveldb
GetLicenseInfo	cache.cpp	/^bool ColorLicense::GetLicenseInfo(const type_Color &color, CLicenseInfo &info) const$/;"	f	class:color_license::ColorLicense
GetLicensePubKey	wallet/wallet.cpp	/^bool CWallet::GetLicensePubKey(const type_Color& color, CScript& scriptPubKey) const$/;"	f	class:CWallet
GetList	cache.cpp	/^vector<string> OrderList::GetList() const$/;"	f	class:order_list::OrderList
GetListenPort	net.cpp	/^unsigned short GetListenPort()$/;"	f
GetLocal	net.cpp	/^bool GetLocal(CService& addr, const CNetAddr *paddrPeer)$/;"	f
GetLocalAddress	net.cpp	/^CAddress GetLocalAddress(const CNetAddr *paddrPeer)$/;"	f
GetLocator	chain.cpp	/^CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {$/;"	f	class:CChain
GetLockedPageCount	support/pagelocker.h	/^    int GetLockedPageCount()$/;"	f	class:LockedPageManagerBase
GetLow64	arith_uint256.h	/^    uint64_t GetLow64() const$/;"	f	class:base_uint
GetMainSignals	validationinterface.cpp	/^CMainSignals& GetMainSignals()$/;"	f
GetMasterSeed	wallet/hdkeystore.cpp	/^bool CHDKeyStore::GetMasterSeed(const HDChainID& hash, CKeyingMaterial& seedOut) const$/;"	f	class:CHDKeyStore
GetMaxConfirms	policy/fees.h	/^    unsigned int GetMaxConfirms() { return confAvg.size(); }$/;"	f	class:TxConfirmStats
GetMaxHeight	leveldb/db/skiplist.h	/^  inline int GetMaxHeight() const {$/;"	f	class:leveldb::SkipList
GetMedianTimePast	chain.h	/^    int64_t GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMerkleBranch	primitives/block.cpp	/^std::vector<uint256> CBlock::GetMerkleBranch(int nIndex) const$/;"	f	class:CBlock
GetMinRelayFee	main.cpp	/^CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)$/;"	f
GetMinimumFee	wallet/wallet.cpp	/^CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)$/;"	f	class:CWallet
GetNameProxy	netbase.cpp	/^bool GetNameProxy(proxyType &nameProxyOut) {$/;"	f
GetNetwork	netbase.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNetworkHashPS	rpcmining.cpp	/^Value GetNetworkHashPS(int lookup, int height) {$/;"	f
GetNetworkName	netbase.cpp	/^std::string GetNetworkName(enum Network net) {$/;"	f
GetNetworksInfo	rpcnet.cpp	/^static Array GetNetworksInfo()$/;"	f	file:
GetNewBucket	addrman.cpp	/^int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	addrman.h	/^    int GetNewBucket(const uint256 &nKey) const$/;"	f	class:CAddrInfo
GetNextChildIndex	wallet/hdkeystore.cpp	/^unsigned int CHDKeyStore::GetNextChildIndex(const HDChainID& chainId, bool internal)$/;"	f	class:CHDKeyStore
GetNextWorkRequired	pow.cpp	/^unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)$/;"	f
GetNodeSignals	net.cpp	/^CNodeSignals& GetNodeSignals() { return g_signals; }$/;"	f
GetNodeStateStats	main.cpp	/^bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats)$/;"	f
GetOldestKeyPoolTime	wallet/wallet.cpp	/^int64_t CWallet::GetOldestKeyPoolTime()$/;"	f	class:CWallet
GetOp	script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	script/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOp	script/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet)$/;"	f	class:CScript
GetOp	script/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)$/;"	f	class:CScript
GetOp2	script/script.h	/^    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const$/;"	f	class:CScript
GetOpName	script/script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOptions	leveldbwrapper.cpp	/^static leveldb::Options GetOptions(size_t nCacheSize)$/;"	f	file:
GetOrphanRoot	main.cpp	/^uint256 static GetOrphanRoot(const uint256& hash)$/;"	f	file:
GetOutputFor	coins.cpp	/^const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const$/;"	f	class:CCoinsViewCache
GetOverlappingInputs	leveldb/db/version_set.cc	/^void Version::GetOverlappingInputs($/;"	f	class:leveldb::Version
GetOwner	cache.cpp	/^string ColorLicense::GetOwner(const type_Color &color) const$/;"	f	class:color_license::ColorLicense
GetP2SHSigOpCount	main.cpp	/^unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)$/;"	f
GetPageSize	leveldb/util/env_win.cc	/^size_t GetPageSize()$/;"	f	namespace:leveldb::Win32
GetPerformanceCounter	random.cpp	/^static inline int64_t GetPerformanceCounter()$/;"	f	file:
GetPidFile	util.cpp	/^boost::filesystem::path GetPidFile()$/;"	f
GetPort	netbase.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetPos	streams.h	/^    uint64_t GetPos() {$/;"	f	class:CBufferedFile
GetPriority	coins.cpp	/^double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const$/;"	f	class:CCoinsViewCache
GetPriority	txmempool.cpp	/^CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const$/;"	f	class:CTxMemPoolEntry
GetPrivKey	key.cpp	/^CPrivKey CKey::GetPrivKey() const {$/;"	f	class:CKey
GetProperty	leveldb/db/db_impl.cc	/^bool DBImpl::GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::DBImpl
GetProperty	leveldb/db/db_test.cc	/^  virtual bool GetProperty(const Slice& property, std::string* value) {$/;"	f	class:leveldb::ModelDB
GetProxy	netbase.cpp	/^bool GetProxy(enum Network net, proxyType &proxyInfoOut) {$/;"	f
GetPubKey	ecwrapper.cpp	/^void CECKey::GetPubKey(std::vector<unsigned char> &pubkey, bool fCompressed) {$/;"	f	class:CECKey
GetPubKey	key.cpp	/^CPubKey CKey::GetPubKey() const {$/;"	f	class:CKey
GetPubKey	keystore.cpp	/^bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CKeyStore
GetPubKey	wallet/crypter.cpp	/^bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:CCryptoKeyStore
GetPubKey	wallet/hdkeystore.cpp	/^bool CHDKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:CHDKeyStore
GetRand	random.cpp	/^uint64_t GetRand(uint64_t nMax)$/;"	f
GetRandBytes	random.cpp	/^void GetRandBytes(unsigned char* buf, int num)$/;"	f
GetRandHash	random.cpp	/^uint256 GetRandHash()$/;"	f
GetRandInt	random.cpp	/^int GetRandInt(int nMax)$/;"	f
GetRange	leveldb/db/version_set.cc	/^void VersionSet::GetRange(const std::vector<FileMetaData*>& inputs,$/;"	f	class:leveldb::VersionSet
GetRange2	leveldb/db/version_set.cc	/^void VersionSet::GetRange2(const std::vector<FileMetaData*>& inputs1,$/;"	f	class:leveldb::VersionSet
GetReachabilityFrom	netbase.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetRefCount	net.h	/^    int GetRefCount()$/;"	f	class:CNode
GetRejectCode	consensus/validation.h	/^    unsigned char GetRejectCode() const { return chRejectCode; }$/;"	f	class:CValidationState
GetRejectReason	consensus/validation.h	/^    std::string GetRejectReason() const { return strRejectReason; }$/;"	f	class:CValidationState
GetRequestCount	wallet/wallet.cpp	/^int CWalletTx::GetRequestCount() const$/;"	f	class:CWalletTx
GetReservedKey	wallet/wallet.cpp	/^bool CReserveKey::GetReservedKey(CPubKey& pubkey)$/;"	f	class:CReserveKey
GetRestartPoint	leveldb/table/block.cc	/^  uint32_t GetRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
GetResults	test/accounting_tests.cpp	/^GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)$/;"	f	file:
GetScriptError	main.h	/^    ScriptError GetScriptError() const { return error; }$/;"	f	class:CScriptCheck
GetScriptForDestination	script/standard.cpp	/^CScript GetScriptForDestination(const CTxDestination& dest)$/;"	f
GetScriptForMultisig	script/standard.cpp	/^CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)$/;"	f
GetScriptPubKey	test/script_tests.cpp	/^    const CScript& GetScriptPubKey()$/;"	f	class:__anon94::TestBuilder
GetSendLicenseBalance	test/test_bitcoin.h	/^    int64_t GetSendLicenseBalance(const type_Color& color) const$/;"	f	class:CWallet_UnitTest
GetSendLicenseBalance	wallet/wallet.cpp	/^CAmount CWallet::GetSendLicenseBalance(const type_Color& color) const$/;"	f	class:CWallet
GetSerializeSize	addrman.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	class:CAddrMan
GetSerializeSize	coins.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	class:CCoins
GetSerializeSize	compressor.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const {$/;"	f	class:CScriptCompressor
GetSerializeSize	pubkey.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	class:CPubKey
GetSerializeSize	pubkey.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	struct:CExtPubKey
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(int, int) const$/;"	f	class:CVarInt
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(int, int=0) const$/;"	f	class:CFlatData
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(int, int=0) const$/;"	f	class:LimitedString
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(char a,      int, int=0) { return 1; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const std::list<T, A>& l, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(double a,    int, int=0) { return 8; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(float a,     int, int=0) { return 4; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(int16_t a,   int, int=0) { return 2; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(int32_t a,   int, int=0) { return 4; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(int64_t a,   int, int=0) { return 8; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(int8_t a,    int, int=0) { return 1; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(uint16_t a,  int, int=0) { return 2; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(uint32_t a,  int, int=0) { return 4; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(uint64_t a,  int, int=0) { return 8; }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(uint8_t a,   int, int=0) { return 1; }$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	streams.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CAutoFile
GetSerializeSize	streams.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CDataStream
GetSerializeSize	uint256.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	class:base_blob
GetSerializeSize	undo.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const {$/;"	f	class:CTxInUndo
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&)$/;"	f
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)$/;"	f
GetSigOpCount	script/script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	script/script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSizeOfCompactSize	serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64_t nSize)$/;"	f
GetSizeOfVarInt	serialize.h	/^inline unsigned int GetSizeOfVarInt(I n)$/;"	f
GetSkipHeight	chain.cpp	/^int static inline GetSkipHeight(int height) {$/;"	f	file:
GetSnapshot	leveldb/db/db_impl.cc	/^const Snapshot* DBImpl::GetSnapshot() {$/;"	f	class:leveldb::DBImpl
GetSnapshot	leveldb/db/db_test.cc	/^  virtual const Snapshot* GetSnapshot() {$/;"	f	class:leveldb::ModelDB
GetSockAddr	netbase.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetSpecialFolderPath	util.cpp	/^fs::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetSpecialSize	compressor.cpp	/^unsigned int CScriptCompressor::GetSpecialSize(unsigned int nSize) const$/;"	f	class:CScriptCompressor
GetStats	coins.cpp	/^bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }$/;"	f	class:CCoinsView
GetStats	coins.cpp	/^bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }$/;"	f	class:CCoinsViewBacked
GetStats	leveldb/db/version_set.h	/^  struct GetStats {$/;"	s	class:leveldb::Version
GetStats	test/coins_tests.cpp	/^    bool GetStats(CCoinsStats& stats) const { return false; }$/;"	f	class:__anon93::CCoinsViewTest
GetStats	txdb.cpp	/^bool CCoinsViewDB::GetStats(CCoinsStats &stats) const$/;"	f	class:CCoinsViewDB
GetSystemPageSize	support/pagelocker.cpp	/^static inline size_t GetSystemPageSize()$/;"	f	file:
GetTempDir	leveldb/db/c_test.c	/^static const char* GetTempDir(void) {$/;"	f	file:
GetTempPath	util.cpp	/^fs::path GetTempPath() {$/;"	f
GetTestDirectory	leveldb/helpers/memenv/memenv.cc	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
GetTestDirectory	leveldb/include/leveldb/env.h	/^  virtual Status GetTestDirectory(std::string* path) {$/;"	f	class:leveldb::EnvWrapper
GetTestDirectory	leveldb/util/env_posix.cc	/^  virtual Status GetTestDirectory(std::string* result) {$/;"	f	class:leveldb::__anon42::PosixEnv
GetTestDirectory	leveldb/util/env_win.cc	/^Status Win32Env::GetTestDirectory( std::string* path )$/;"	f	class:leveldb::Win32::Win32Env
GetTickCount64	leveldb/util/env_win.cc	904;"	d	file:
GetTime	txmempool.h	/^    int64_t GetTime() const { return nTime; }$/;"	f	class:CTxMemPoolEntry
GetTime	utiltime.cpp	/^int64_t GetTime()$/;"	f
GetTimeMicros	utiltime.cpp	/^int64_t GetTimeMicros()$/;"	f
GetTimeMillis	utiltime.cpp	/^int64_t GetTimeMillis()$/;"	f
GetTimeOffset	timedata.cpp	/^int64_t GetTimeOffset()$/;"	f
GetTotalBlocksEstimate	checkpoints.cpp	/^    int GetTotalBlocksEstimate(const CCheckpointData& data)$/;"	f	namespace:Checkpoints
GetTotalBytesRecv	net.cpp	/^uint64_t CNode::GetTotalBytesRecv()$/;"	f	class:CNode
GetTotalBytesSent	net.cpp	/^uint64_t CNode::GetTotalBytesSent()$/;"	f	class:CNode
GetTotalRecvSize	net.h	/^    unsigned int GetTotalRecvSize()$/;"	f	class:CNode
GetTotalTxSize	txmempool.h	/^    uint64_t GetTotalTxSize()$/;"	f	class:CTxMemPool
GetTransaction	main.cpp	/^bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, const CBlock *pblock, bool fAllowSlow)$/;"	f
GetTransaction_UnitTest	test/test_bitcoin.cpp	/^bool GetTransaction_UnitTest($/;"	f
GetTransactionsUpdated	txmempool.cpp	/^unsigned int CTxMemPool::GetTransactionsUpdated() const$/;"	f	class:CTxMemPool
GetTriedBucket	addrman.cpp	/^int CAddrInfo::GetTriedBucket(const uint256& nKey) const$/;"	f	class:CAddrInfo
GetTx	txmempool.h	/^    const CTransaction& GetTx() const { return this->tx; }$/;"	f	class:CTxMemPoolEntry
GetTxHash	main.cpp	/^uint256 TxInfo::GetTxHash() const {$/;"	f	class:TxInfo
GetTxInputAddr	main.cpp	/^string GetTxInputAddr(const CTransaction& tx, const CBlock *pblock, bool fUndo)$/;"	f
GetTxOutAddressOfIndex	main.cpp	/^string TxInfo::GetTxOutAddressOfIndex(unsigned int index) const {$/;"	f	class:TxInfo
GetTxOutColorOfIndex	main.cpp	/^type_Color TxInfo::GetTxOutColorOfIndex(unsigned int index) const {$/;"	f	class:TxInfo
GetTxOutSize	main.cpp	/^size_t TxInfo::GetTxOutSize() const {$/;"	f	class:TxInfo
GetTxOutValueOfIndex	main.cpp	/^int64_t TxInfo::GetTxOutValueOfIndex(unsigned int index) const {$/;"	f	class:TxInfo
GetTxOutputAddr	main.cpp	/^string GetTxOutputAddr(const CTransaction& tx, size_t index)$/;"	f
GetTxSize	txmempool.h	/^    size_t GetTxSize() const { return nTxSize; }$/;"	f	class:CTxMemPoolEntry
GetTxTime	wallet/wallet.cpp	/^int64_t CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxType	main.cpp	/^tx_type TxInfo::GetTxType() const {$/;"	f	class:TxInfo
GetTxnOutputType	script/standard.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	streams.h	/^    int GetType()                { return nType; }$/;"	f	class:CAutoFile
GetType	streams.h	/^    int GetType()                { return nType; }$/;"	f	class:CDataStream
GetUnconfirmedBalance	wallet/wallet.cpp	/^void CWallet::GetUnconfirmedBalance(map<type_Color, CAmount>& color_amount) const$/;"	f	class:CWallet
GetUnconfirmedColorBalance	wallet/wallet.cpp	/^CAmount CWallet::GetUnconfirmedColorBalance(const type_Color& color) const$/;"	f	class:CWallet
GetUnconfirmedWatchOnlyBalance	wallet/wallet.cpp	/^CAmount CWallet::GetUnconfirmedWatchOnlyBalance(const type_Color& color) const$/;"	f	class:CWallet
GetUndoPos	chain.h	/^    CDiskBlockPos GetUndoPos() const {$/;"	f	class:CBlockIndex
GetUpperLimit	cache.h	/^    inline int64_t GetUpperLimit(const type_Color &color) const$/;"	f	class:color_license::ColorLicense
GetValueIn	coins.cpp	/^CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
GetValueOut	primitives/transaction.cpp	/^CAmount CTransaction::GetValueOut() const$/;"	f	class:CTransaction
GetVarint32	leveldb/util/coding.cc	/^bool GetVarint32(Slice* input, uint32_t* value) {$/;"	f	namespace:leveldb
GetVarint32Ptr	leveldb/util/coding.h	/^inline const char* GetVarint32Ptr(const char* p,$/;"	f	namespace:leveldb
GetVarint32PtrFallback	leveldb/util/coding.cc	/^const char* GetVarint32PtrFallback(const char* p,$/;"	f	namespace:leveldb
GetVarint64	leveldb/util/coding.cc	/^bool GetVarint64(Slice* input, uint64_t* value) {$/;"	f	namespace:leveldb
GetVarint64Ptr	leveldb/util/coding.cc	/^const char* GetVarint64Ptr(const char* p, const char* limit, uint64_t* value) {$/;"	f	namespace:leveldb
GetVersion	streams.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	streams.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CDataStream
GetVersion	wallet/wallet.h	/^    int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }$/;"	f	class:CWallet
GetVersionFromHeight	policy/licenseinfo.cpp	/^int CLicenseInfo::GetVersionFromHeight(int height)$/;"	f	class:CLicenseInfo
GetVoteBalance	wallet/wallet.cpp	/^CAmount CWallet::GetVoteBalance() const$/;"	f	class:CWallet
GetWalletTx	wallet/wallet.cpp	/^const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const$/;"	f	class:CWallet
GetWarnings	main.cpp	/^string GetWarnings(string strFor)$/;"	f
GetWatchOnlyBalance	wallet/wallet.cpp	/^CAmount CWallet::GetWatchOnlyBalance(const type_Color& color) const$/;"	f	class:CWallet
GetnScore	net.cpp	/^int GetnScore(const CService& addr)$/;"	f
GlobalSetupFixture	test/test_bitcoin.h	/^    GlobalSetupFixture()$/;"	f	struct:GlobalSetupFixture
GlobalSetupFixture	test/test_bitcoin.h	/^struct GlobalSetupFixture$/;"	s
Good	addrman.h	/^    void Good(const CService &addr, int64_t nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Good_	addrman.cpp	/^void CAddrMan::Good_(const CService& addr, int64_t nTime)$/;"	f	class:CAddrMan
GuessType	leveldb/db/dumpfile.cc	/^bool GuessType(const std::string& fname, FileType* type) {$/;"	f	namespace:leveldb::__anon23
GuessVerificationProgress	checkpoints.cpp	/^    double GuessVerificationProgress(const CCheckpointData& data, CBlockIndex *pindex, bool fSigchecks) {$/;"	f	namespace:Checkpoints
HALFLIFE	policy/licenseinfo.h	/^    HALFLIFE$/;"	e	enum:MintSchedule
HASH	leveldb/util/hash_test.cc	/^class HASH { };$/;"	c	namespace:leveldb	file:
HAVE_BOOST	config/bitcoin-config.h	39;"	d
HAVE_BOOST_CHRONO	config/bitcoin-config.h	42;"	d
HAVE_BOOST_FILESYSTEM	config/bitcoin-config.h	45;"	d
HAVE_BOOST_PROGRAM_OPTIONS	config/bitcoin-config.h	48;"	d
HAVE_BOOST_SYSTEM	config/bitcoin-config.h	51;"	d
HAVE_BOOST_THREAD	config/bitcoin-config.h	54;"	d
HAVE_BOOST_UNIT_TEST_FRAMEWORK	config/bitcoin-config.h	57;"	d
HAVE_BUILTIN_EXPECT	secp256k1/src/libsecp256k1-config.h	15;"	d
HAVE_BYTESWAP_H	config/bitcoin-config.h	60;"	d
HAVE_CONSENSUS_LIB	config/bitcoin-config.h	63;"	d
HAVE_DECL_BE16TOH	config/bitcoin-config.h	67;"	d
HAVE_DECL_BE32TOH	config/bitcoin-config.h	71;"	d
HAVE_DECL_BE64TOH	config/bitcoin-config.h	75;"	d
HAVE_DECL_BSWAP_16	config/bitcoin-config.h	79;"	d
HAVE_DECL_BSWAP_32	config/bitcoin-config.h	83;"	d
HAVE_DECL_BSWAP_64	config/bitcoin-config.h	87;"	d
HAVE_DECL_HTOBE16	config/bitcoin-config.h	91;"	d
HAVE_DECL_HTOBE32	config/bitcoin-config.h	95;"	d
HAVE_DECL_HTOBE64	config/bitcoin-config.h	99;"	d
HAVE_DECL_HTOLE16	config/bitcoin-config.h	103;"	d
HAVE_DECL_HTOLE32	config/bitcoin-config.h	107;"	d
HAVE_DECL_HTOLE64	config/bitcoin-config.h	111;"	d
HAVE_DECL_LE16TOH	config/bitcoin-config.h	115;"	d
HAVE_DECL_LE32TOH	config/bitcoin-config.h	119;"	d
HAVE_DECL_LE64TOH	config/bitcoin-config.h	123;"	d
HAVE_DECL_STRERROR_R	config/bitcoin-config.h	127;"	d
HAVE_DECL_STRNLEN	config/bitcoin-config.h	131;"	d
HAVE_DLFCN_H	config/bitcoin-config.h	134;"	d
HAVE_DLFCN_H	secp256k1/src/libsecp256k1-config.h	18;"	d
HAVE_ENDIAN_H	config/bitcoin-config.h	137;"	d
HAVE_FUNC_ATTRIBUTE_VISIBILITY	config/bitcoin-config.h	146;"	d
HAVE_GETADDRINFO_A	config/bitcoin-config.h	149;"	d
HAVE_INET_PTON	config/bitcoin-config.h	152;"	d
HAVE_INTTYPES_H	config/bitcoin-config.h	155;"	d
HAVE_INTTYPES_H	secp256k1/src/libsecp256k1-config.h	21;"	d
HAVE_LIBCRYPTO	config/bitcoin-config.h	170;"	d
HAVE_LIBCRYPTO	secp256k1/src/libsecp256k1-config.h	24;"	d
HAVE_MEMORY_H	config/bitcoin-config.h	221;"	d
HAVE_MEMORY_H	secp256k1/src/libsecp256k1-config.h	30;"	d
HAVE_MSG_NOSIGNAL	config/bitcoin-config.h	236;"	d
HAVE_PTHREAD	config/bitcoin-config.h	239;"	d
HAVE_PTHREAD_PRIO_INHERIT	config/bitcoin-config.h	242;"	d
HAVE_STDINT_H	config/bitcoin-config.h	245;"	d
HAVE_STDINT_H	secp256k1/src/libsecp256k1-config.h	33;"	d
HAVE_STDIO_H	config/bitcoin-config.h	248;"	d
HAVE_STDLIB_H	config/bitcoin-config.h	251;"	d
HAVE_STDLIB_H	secp256k1/src/libsecp256k1-config.h	36;"	d
HAVE_STRERROR_R	config/bitcoin-config.h	254;"	d
HAVE_STRINGS_H	config/bitcoin-config.h	257;"	d
HAVE_STRINGS_H	secp256k1/src/libsecp256k1-config.h	39;"	d
HAVE_STRING_H	config/bitcoin-config.h	260;"	d
HAVE_STRING_H	secp256k1/src/libsecp256k1-config.h	42;"	d
HAVE_SYS_PRCTL_H	config/bitcoin-config.h	266;"	d
HAVE_SYS_SELECT_H	config/bitcoin-config.h	269;"	d
HAVE_SYS_STAT_H	config/bitcoin-config.h	272;"	d
HAVE_SYS_STAT_H	secp256k1/src/libsecp256k1-config.h	45;"	d
HAVE_SYS_TYPES_H	config/bitcoin-config.h	275;"	d
HAVE_SYS_TYPES_H	secp256k1/src/libsecp256k1-config.h	48;"	d
HAVE_UNISTD_H	config/bitcoin-config.h	278;"	d
HAVE_UNISTD_H	secp256k1/src/libsecp256k1-config.h	51;"	d
HAVE_VISIBILITY_ATTRIBUTE	config/bitcoin-config.h	281;"	d
HAVE_WORKING_BOOST_SLEEP_FOR	config/bitcoin-config.h	287;"	d
HAVE___INT128	secp256k1/src/libsecp256k1-config.h	54;"	d
HDAddHDChain	wallet/wallet.cpp	/^bool CWallet::HDAddHDChain(const std::string& chainPathIn, bool generateMaster, CKeyingMaterial& vSeed, HDChainID& chainId, std::string &strBase58ExtPrivKey, std::string &strBase58ExtPubKey, bool overwrite)$/;"	f	class:CWallet
HDChainID	wallet/hdkeystore.h	/^typedef uint256 HDChainID;$/;"	t
HDGetActiveChainID	wallet/wallet.cpp	/^bool CWallet::HDGetActiveChainID(HDChainID& chainID)$/;"	f	class:CWallet
HDGetChildPubKeyAtIndex	wallet/wallet.cpp	/^bool CWallet::HDGetChildPubKeyAtIndex(const HDChainID& chainID, CPubKey &pubKeyOut, unsigned int nIndex, bool internal)$/;"	f	class:CWallet
HDGetNextChildPubKey	wallet/wallet.cpp	/^bool CWallet::HDGetNextChildPubKey(const HDChainID& chainIDIn, CPubKey &pubKeyOut, std::string& newKeysChainpath, bool internal)$/;"	f	class:CWallet
HDSetActiveChainID	wallet/wallet.cpp	/^bool CWallet::HDSetActiveChainID(const HDChainID& chainID, bool check)$/;"	f	class:CWallet
HDTopUpKeyPool	wallet/wallet.cpp	/^bool CWallet::HDTopUpKeyPool(unsigned int kpSize)$/;"	f	class:CWallet
HD_MAX_DEPTH	wallet/wallet.cpp	/^const unsigned int HD_MAX_DEPTH = 20;$/;"	v
HEADERS	Makefile	/^HEADERS = $(include_HEADERS)$/;"	m
HEADERS	secp256k1/Makefile	/^HEADERS = $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HEADER_SIZE	protocol.h	/^        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE$/;"	e	enum:CMessageHeader::__anon1
HEXDUMP	Makefile	/^HEXDUMP = \/usr\/bin\/hexdump$/;"	m
HMM_BITCOIND	init.h	/^    HMM_BITCOIND,$/;"	e	enum:HelpMessageMode
HMM_BITCOIN_QT	init.h	/^    HMM_BITCOIN_QT$/;"	e	enum:HelpMessageMode
HTTPAuthorized	rpcserver.cpp	/^bool HTTPAuthorized(map<string, string>& mapHeaders)$/;"	f
HTTPError	rpcprotocol.cpp	/^std::string HTTPError(int nStatus, bool keepalive, bool headersOnly)$/;"	f
HTTPPost	rpcprotocol.cpp	/^std::string HTTPPost(const std::string& strMsg, const std::map<std::string, std::string>& mapRequestHeaders)$/;"	f
HTTPReply	rpcprotocol.cpp	/^std::string HTTPReply(int nStatus, const std::string& strMsg, bool keepalive,$/;"	f
HTTPReplyHeader	rpcprotocol.cpp	/^std::string HTTPReplyHeader(int nStatus, bool keepalive, size_t contentLength, const char *contentType)$/;"	f
HTTPReq_JSONRPC	rpcserver.cpp	/^static bool HTTPReq_JSONRPC(AcceptedConnection *conn,$/;"	f	file:
HTTPReq_REST	rest.cpp	/^bool HTTPReq_REST(AcceptedConnection* conn,$/;"	f
HTTPStatusCode	rpcprotocol.h	/^enum HTTPStatusCode$/;"	g
HTTP_BAD_REQUEST	rpcprotocol.h	/^    HTTP_BAD_REQUEST           = 400,$/;"	e	enum:HTTPStatusCode
HTTP_FORBIDDEN	rpcprotocol.h	/^    HTTP_FORBIDDEN             = 403,$/;"	e	enum:HTTPStatusCode
HTTP_INTERNAL_SERVER_ERROR	rpcprotocol.h	/^    HTTP_INTERNAL_SERVER_ERROR = 500,$/;"	e	enum:HTTPStatusCode
HTTP_NOT_FOUND	rpcprotocol.h	/^    HTTP_NOT_FOUND             = 404,$/;"	e	enum:HTTPStatusCode
HTTP_OK	rpcprotocol.h	/^    HTTP_OK                    = 200,$/;"	e	enum:HTTPStatusCode
HTTP_SERVICE_UNAVAILABLE	rpcprotocol.h	/^    HTTP_SERVICE_UNAVAILABLE   = 503,$/;"	e	enum:HTTPStatusCode
HTTP_UNAUTHORIZED	rpcprotocol.h	/^    HTTP_UNAUTHORIZED          = 401,$/;"	e	enum:HTTPStatusCode
HalfL	test/arith_uint256_tests.cpp	/^const arith_uint256 HalfL = (OneL << 255);$/;"	v
Handle	leveldb/include/leveldb/cache.h	/^  struct Handle { };$/;"	s	class:leveldb::Cache
HandleActivateTx_	main.cpp	/^    bool HandleActivateTx_(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Normal_	file:
HandleDeactivateTx_	main.cpp	/^    bool HandleDeactivateTx_(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Normal_	file:
HandleDumpCommand	leveldb/db/leveldb_main.cc	/^bool HandleDumpCommand(Env* env, char** files, int num) {$/;"	f	namespace:leveldb::__anon25
HandleError	leveldbwrapper.cpp	/^void HandleError(const leveldb::Status& status) throw(leveldb_error)$/;"	f
HandleSIGHUP	init.cpp	/^void HandleSIGHUP(int)$/;"	f
HandleSIGTERM	init.cpp	/^void HandleSIGTERM(int)$/;"	f
HandleTable	leveldb/util/cache.cc	/^  HandleTable() : length_(0), elems_(0), list_(NULL) { Resize(); }$/;"	f	class:leveldb::__anon39::HandleTable
HandleTable	leveldb/util/cache.cc	/^class HandleTable {$/;"	c	namespace:leveldb::__anon39	file:
Handler	leveldb/include/leveldb/write_batch.h	/^  class Handler {$/;"	c	class:leveldb::WriteBatch
HandlerInterface	main.h	/^class HandlerInterface$/;"	c	namespace:type_transaction_handler
HandlerUtility_	main.cpp	/^    HandlerUtility_(tx_type type) : type_(type) {}$/;"	f	class:type_transaction_handler::__anon48::HandlerUtility_
HandlerUtility_	main.cpp	/^class HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_BanVote_	main.cpp	/^    Handler_BanVote_() : HandlerUtility_(BANVOTE) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_
Handler_BanVote_	main.cpp	/^class Handler_BanVote_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_Cancel_	main.cpp	/^    Handler_Cancel_() : HandlerUtility_(CANCEL) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_Cancel_
Handler_Cancel_	main.cpp	/^class Handler_Cancel_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_InvalidType_	main.cpp	/^    Handler_InvalidType_() : HandlerUtility_(UNKNOWN) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_InvalidType_
Handler_InvalidType_	main.cpp	/^class Handler_InvalidType_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_License_	main.cpp	/^    Handler_License_() : HandlerUtility_(LICENSE)$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
Handler_License_	main.cpp	/^class Handler_License_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_Match_	main.cpp	/^    Handler_Match_() : HandlerUtility_(MATCH) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_Match_
Handler_Match_	main.cpp	/^class Handler_Match_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_Mint_	main.cpp	/^    Handler_Mint_() : HandlerUtility_(MINT) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_Mint_
Handler_Mint_	main.cpp	/^class Handler_Mint_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_Normal_	main.cpp	/^    Handler_Normal_() : HandlerUtility_(NORMAL) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_Normal_
Handler_Normal_	main.cpp	/^class Handler_Normal_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_Order_	main.cpp	/^    Handler_Order_() : HandlerUtility_(ORDER) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_Order_
Handler_Order_	main.cpp	/^class Handler_Order_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Handler_Vote_	main.cpp	/^    Handler_Vote_() : HandlerUtility_(VOTE) {}$/;"	f	class:type_transaction_handler::__anon48::Handler_Vote_
Handler_Vote_	main.cpp	/^class Handler_Vote_ : public HandlerInterface, public HandlerUtility_$/;"	c	namespace:type_transaction_handler::__anon48	file:
Harness	leveldb/table/table_test.cc	/^  Harness() : constructor_(NULL) { }$/;"	f	class:leveldb::Harness
Harness	leveldb/table/table_test.cc	/^class Harness {$/;"	c	namespace:leveldb	file:
HasColorOwner	cache.h	/^    inline bool HasColorOwner(const type_Color &color) const$/;"	f	class:color_license::ColorLicense
HasNoInputsOf	txmempool.cpp	/^bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const$/;"	f	class:CTxMemPool
HasSelected	coincontrol.h	/^    bool HasSelected() const$/;"	f	class:CCoinControl
Hash	bloom.cpp	/^inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const$/;"	f	class:CBloomFilter
Hash	hash.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	hash.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash	leveldb/util/hash.cc	/^uint32_t Hash(const char* data, size_t n, uint32_t seed) {$/;"	f	namespace:leveldb
Hash160	hash.h	/^inline uint160 Hash160(const T1 pbegin, const T1 pend)$/;"	f
Hash160	hash.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HashFinal	uint256.cpp	/^static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)$/;"	f	file:
HashMix	uint256.cpp	/^static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)$/;"	f	file:
HashNumbers	leveldb/db/skiplist_test.cc	/^  static uint64_t HashNumbers(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
HashSlice	leveldb/util/cache.cc	/^  static inline uint32_t HashSlice(const Slice& s) {$/;"	f	class:leveldb::__anon39::ShardedLRUCache	file:
HaveCScript	keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveCoins	coins.cpp	/^bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }$/;"	f	class:CCoinsView
HaveCoins	coins.cpp	/^bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }$/;"	f	class:CCoinsViewBacked
HaveCoins	coins.cpp	/^bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewCache
HaveCoins	test/coins_tests.cpp	/^    bool HaveCoins(const uint256& txid) const$/;"	f	class:__anon93::CCoinsViewTest
HaveCoins	txdb.cpp	/^bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {$/;"	f	class:CCoinsViewDB
HaveCoins	txmempool.cpp	/^bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const$/;"	f	class:CCoinsViewMemPool
HaveInputs	coins.cpp	/^bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const$/;"	f	class:CCoinsViewCache
HaveKey	keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveKey	wallet/crypter.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CCryptoKeyStore
HaveKey	wallet/hdkeystore.cpp	/^bool CHDKeyStore::HaveKey(const CKeyID &address) const$/;"	f	class:CHDKeyStore
HaveKeys	wallet/wallet_ismine.cpp	/^unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f
HaveNameProxy	netbase.cpp	/^bool HaveNameProxy() {$/;"	f
HaveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly() const$/;"	f	class:CBasicKeyStore
HaveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const$/;"	f	class:CBasicKeyStore
HeapProfile	leveldb/db/db_bench.cc	/^  void HeapProfile() {$/;"	f	class:leveldb::Benchmark	file:
Height	chain.h	/^    int Height() const {$/;"	f	class:CChain
HelpExampleCli	rpcserver.cpp	/^std::string HelpExampleCli(string methodname, string args){$/;"	f
HelpExampleRpc	rpcserver.cpp	/^std::string HelpExampleRpc(string methodname, string args){$/;"	f
HelpMessage	init.cpp	/^std::string HelpMessage(HelpMessageMode mode)$/;"	f
HelpMessageCli	bitcoin-cli.cpp	/^std::string HelpMessageCli()$/;"	f
HelpMessageGroup	util.cpp	/^std::string HelpMessageGroup(const std::string &message) {$/;"	f
HelpMessageMode	init.h	/^enum HelpMessageMode {$/;"	g
HelpMessageOpt	util.cpp	/^std::string HelpMessageOpt(const std::string &option, const std::string &message) {$/;"	f
HelpRequiringPassphrase	wallet/rpcwallet.cpp	/^string HelpRequiringPassphrase()$/;"	f
HexDigit	utilstrencodings.cpp	/^signed char HexDigit(char c)$/;"	f
HexStr	utilstrencodings.h	/^inline std::string HexStr(const T& vch, bool fSpaces=false)$/;"	f
HexStr	utilstrencodings.h	/^std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)$/;"	f
Histogram	leveldb/util/histogram.h	/^  Histogram() { }$/;"	f	class:leveldb::Histogram
Histogram	leveldb/util/histogram.h	/^class Histogram {$/;"	c	namespace:leveldb
Histogram	support/pagelocker.h	/^    typedef std::map<size_t, int> Histogram;$/;"	t	class:LockedPageManagerBase
I64FORMAT	secp256k1/src/util.h	88;"	d
I64FORMAT	secp256k1/src/util.h	91;"	d
I64uFORMAT	secp256k1/src/util.h	89;"	d
I64uFORMAT	secp256k1/src/util.h	92;"	d
ICON_ERROR	ui_interface.h	/^        ICON_ERROR          = (1U << 1),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_INFORMATION	ui_interface.h	/^        ICON_INFORMATION    = 0,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_MASK	ui_interface.h	/^        ICON_MASK = (ICON_INFORMATION | ICON_WARNING | ICON_ERROR),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_WARNING	ui_interface.h	/^        ICON_WARNING        = (1U << 0),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
IKey	leveldb/db/dbformat_test.cc	/^static std::string IKey(const std::string& user_key,$/;"	f	namespace:leveldb
INF_FEERATE	policy/fees.h	/^static const double INF_FEERATE = MAX_MONEY;$/;"	v
INF_PRIORITY	policy/fees.h	/^static const double INF_PRIORITY = 1e9 * MAX_MONEY;$/;"	v
INIT_PROTO_VERSION	version.h	/^static const int INIT_PROTO_VERSION = 209;$/;"	v
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	secp256k1/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALLNAMETOOL	Makefile	/^INSTALLNAMETOOL = $/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	secp256k1/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	secp256k1/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	secp256k1/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	secp256k1/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	secp256k1/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INVALID_SOCKET	compat.h	62;"	d
IOError	leveldb/include/leveldb/status.h	/^  static Status IOError(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
IOError	leveldb/util/env_posix.cc	/^static Status IOError(const std::string& context, int err_number) {$/;"	f	namespace:leveldb::__anon42
IOSARCH	leveldb/Makefile	/^IOSARCH=-arch armv6 -arch armv7 -arch armv7s -arch arm64$/;"	m
IOSVERSION	leveldb/Makefile	/^IOSVERSION=$(shell defaults read $(PLATFORMSROOT)\/iPhoneOS.platform\/version CFBundleShortVersionString)$/;"	m
IPV6_PROTECTION_LEVEL	net.cpp	46;"	d	file:
ISMINE_ALL	wallet/wallet_ismine.h	/^    ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE$/;"	e	enum:isminetype
ISMINE_NO	wallet/wallet_ismine.h	/^    ISMINE_NO = 0,$/;"	e	enum:isminetype
ISMINE_SPENDABLE	wallet/wallet_ismine.h	/^    ISMINE_SPENDABLE = 2,$/;"	e	enum:isminetype
ISMINE_WATCH_ONLY	wallet/wallet_ismine.h	/^    ISMINE_WATCH_ONLY = 1,$/;"	e	enum:isminetype
InMemoryEnv	leveldb/helpers/memenv/memenv.cc	/^  explicit InMemoryEnv(Env* base_env) : EnvWrapper(base_env) { }$/;"	f	class:leveldb::__anon26::InMemoryEnv
InMemoryEnv	leveldb/helpers/memenv/memenv.cc	/^class InMemoryEnv : public EnvWrapper {$/;"	c	namespace:leveldb::__anon26	file:
IncOrderPosNext	wallet/wallet.cpp	/^int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)$/;"	f	class:CWallet
Increment	leveldb/db/db_test.cc	/^  void Increment() {$/;"	f	class:leveldb::__anon18::AtomicCounter
Increment	leveldb/table/table_test.cc	/^static void Increment(const Comparator* cmp, std::string* key) {$/;"	f	namespace:leveldb
IncrementBy	leveldb/db/db_test.cc	/^  void IncrementBy(int count) {$/;"	f	class:leveldb::__anon18::AtomicCounter
IncrementByte	leveldb/db/log_test.cc	/^  void IncrementByte(int offset, int delta) {$/;"	f	class:leveldb::log::LogTest
IncrementExtraNonce	miner.cpp	/^void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)$/;"	f
InfoLogFileName	leveldb/db/filename.cc	/^std::string InfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
Init	addrman.h	/^    void Init()$/;"	f	class:CAddrInfo
Init	leveldb/table/table_test.cc	/^  void Init(const TestArgs& args) {$/;"	f	class:leveldb::Harness
Init	netbase.cpp	/^void CNetAddr::Init()$/;"	f	class:CNetAddr
Init	netbase.cpp	/^void CService::Init()$/;"	f	class:CService
Init	protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	streams.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
Init	wallet/wallet.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	wallet/wallet.h	/^    void Init(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
InitBlockIndex	main.cpp	/^bool InitBlockIndex() {$/;"	f
InitDataBlock	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::InitDataBlock() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
InitDefaultEnv	leveldb/util/env_posix.cc	/^static void InitDefaultEnv() { default_env = new PosixEnv; }$/;"	f	namespace:leveldb
InitDefaultEnv	leveldb/util/env_win.cc	/^static void InitDefaultEnv() { default_env = new Win32::Win32Env(); }$/;"	f	namespace:leveldb
InitError	init.cpp	/^bool static InitError(const std::string &str)$/;"	f	file:
InitMessage	ui_interface.h	/^    boost::signals2::signal<void (const std::string &message)> InitMessage;$/;"	m	class:CClientUIInterface
InitModule	leveldb/util/comparator.cc	/^static void InitModule() {$/;"	f	namespace:leveldb
InitOnce	leveldb/port/port_posix.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	leveldb/port/port_win.cc	/^void InitOnce(OnceType* once, void (*initializer)()) {$/;"	f	namespace:leveldb::port
InitOnce	leveldb/port/port_win.h	/^    void InitOnce(void (*initializer)()) {$/;"	f	class:leveldb::port::OnceType
InitSanityCheck	init.cpp	/^bool InitSanityCheck(void)$/;"	f
InitWarning	init.cpp	/^bool static InitWarning(const std::string &str)$/;"	f	file:
Init_	net.cpp	/^void CNetRecorder::Init_()$/;"	f	class:CNetRecorder
Initialize	crypto/ripemd160.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon5::ripemd160
Initialize	crypto/sha1.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon7::sha1
Initialize	crypto/sha256.cpp	/^void inline Initialize(uint32_t* s)$/;"	f	namespace:__anon6::sha256
Initialize	crypto/sha512.cpp	/^void inline Initialize(uint64_t* s)$/;"	f	namespace:__anon8::sha512
Initialize	policy/fees.cpp	/^void TxConfirmStats::Initialize(std::vector<double>& defaultBuckets,$/;"	f	class:TxConfirmStats
InitializeNode	main.cpp	/^void InitializeNode(NodeId nodeid, const CNode *pnode) {$/;"	f	namespace:__anon47
InitializeNode	net.h	/^    boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;$/;"	m	struct:CNodeSignals
Insert	leveldb/db/skiplist.h	/^void SkipList<Key,Comparator>::Insert(const Key& key) {$/;"	f	class:leveldb::SkipList
Insert	leveldb/util/cache.cc	/^  LRUHandle* Insert(LRUHandle* h) {$/;"	f	class:leveldb::__anon39::HandleTable
Insert	leveldb/util/cache.cc	/^  virtual Handle* Insert(const Slice& key, void* value, size_t charge,$/;"	f	class:leveldb::__anon39::ShardedLRUCache
Insert	leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Insert($/;"	f	class:leveldb::__anon39::LRUCache
Insert	leveldb/util/cache_test.cc	/^  void Insert(int key, int value, int charge = 1) {$/;"	f	class:leveldb::CacheTest
Insert	leveldb/util/env_posix.cc	/^  bool Insert(const std::string& fname) {$/;"	f	class:leveldb::__anon42::PosixLockTable
InsertBlockIndex	main.cpp	/^CBlockIndex * InsertBlockIndex(uint256 hash)$/;"	f
InsertInto	leveldb/db/write_batch.cc	/^Status WriteBatchInternal::InsertInto(const WriteBatch* b,$/;"	f	class:leveldb::WriteBatchInternal
InstallCompactionResults	leveldb/db/db_impl.cc	/^Status DBImpl::InstallCompactionResults(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
Instance	support/pagelocker.h	/^    static LockedPageManager& Instance()$/;"	f	class:LockedPageManager
InternalFilterPolicy	leveldb/db/dbformat.h	/^  explicit InternalFilterPolicy(const FilterPolicy* p) : user_policy_(p) { }$/;"	f	class:leveldb::InternalFilterPolicy
InternalFilterPolicy	leveldb/db/dbformat.h	/^class InternalFilterPolicy : public FilterPolicy {$/;"	c	namespace:leveldb
InternalGet	leveldb/table/table.cc	/^Status Table::InternalGet(const ReadOptions& options, const Slice& k,$/;"	f	class:leveldb::Table
InternalKey	leveldb/db/dbformat.h	/^  InternalKey() { }   \/\/ Leave rep_ as empty to indicate it is invalid$/;"	f	class:leveldb::InternalKey
InternalKey	leveldb/db/dbformat.h	/^  InternalKey(const Slice& user_key, SequenceNumber s, ValueType t) {$/;"	f	class:leveldb::InternalKey
InternalKey	leveldb/db/dbformat.h	/^class InternalKey {$/;"	c	namespace:leveldb
InternalKeyComparator	leveldb/db/dbformat.h	/^  explicit InternalKeyComparator(const Comparator* c) : user_comparator_(c) { }$/;"	f	class:leveldb::InternalKeyComparator
InternalKeyComparator	leveldb/db/dbformat.h	/^class InternalKeyComparator : public Comparator {$/;"	c	namespace:leveldb
InternalKeyEncodingLength	leveldb/db/dbformat.h	/^inline size_t InternalKeyEncodingLength(const ParsedInternalKey& key) {$/;"	f	namespace:leveldb
InterpretNegativeSetting	util.cpp	/^static void InterpretNegativeSetting(std::string name, std::map<std::string, std::string>& mapSettingsRet)$/;"	f	file:
InterruptibleRecv	netbase.cpp	/^bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)$/;"	f	file:
Invalid	consensus/validation.h	/^    bool Invalid(bool ret = false,$/;"	f	class:CValidationState
InvalidArgument	leveldb/include/leveldb/status.h	/^  static Status InvalidArgument(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
InvalidBlockFound	main.cpp	/^void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {$/;"	f	file:
InvalidChainFound	main.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew)$/;"	f	file:
Invalidate	pubkey.h	/^    void Invalidate()$/;"	f	class:CPubKey
InvalidateBlock	main.cpp	/^bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {$/;"	f
Inventory	validationinterface.h	/^    boost::signals2::signal<void (const uint256 &)> Inventory;$/;"	m	struct:CMainSignals
Inventory	validationinterface.h	/^    virtual void Inventory(const uint256 &hash) {}$/;"	f	class:CValidationInterface
Inventory	wallet/wallet.h	/^    void Inventory(const uint256 &hash)$/;"	f	class:CWallet
InvertLowestOne	chain.cpp	/^int static inline InvertLowestOne(int n) { return n & (n - 1); }$/;"	f	file:
Is	leveldb/util/testharness.h	/^  Tester& Is(bool b, const char* msg) {$/;"	f	class:leveldb::test::Tester
IsActivated	cache.h	/^    inline bool IsActivated(const type_Color &color, const std::string &addr) const$/;"	f	class:activate_addr::ActivateAddr
IsAvailable	coins.h	/^    bool IsAvailable(unsigned int nPos) const {$/;"	f	class:CCoins
IsBanned	net.cpp	/^bool CNode::IsBanned(CNetAddr ip)$/;"	f	class:CNode
IsBaseLevelForKey	leveldb/db/version_set.cc	/^bool Compaction::IsBaseLevelForKey(const Slice& user_key) {$/;"	f	class:leveldb::Compaction
IsChange	wallet/wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	coins.h	/^    bool IsCoinBase() const$/;"	f	class:CCoins
IsCoinBase	primitives/transaction.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsColorExist	cache.cpp	/^bool ColorLicense::IsColorExist(const type_Color &color) const$/;"	f	class:color_license::ColorLicense
IsColorExist	cache.h	/^    inline bool IsColorExist(const type_Color &color) const$/;"	f	class:activate_addr::ActivateAddr
IsColorOwner	cache.h	/^    inline bool IsColorOwner(const type_Color &color, std::string &addr) const$/;"	f	class:color_license::ColorLicense
IsCompressed	key.h	/^    bool IsCompressed() const { return fCompressed; }$/;"	f	class:CKey
IsCompressed	pubkey.h	/^    bool IsCompressed() const$/;"	f	class:CPubKey
IsCompressedOrUncompressedPubKey	script/interpreter.cpp	/^bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {$/;"	f	file:
IsCorruption	leveldb/include/leveldb/status.h	/^  bool IsCorruption() const { return code() == kCorruption; }$/;"	f	class:leveldb::Status
IsCrypted	wallet/crypter.h	/^    bool IsCrypted() const$/;"	f	class:CCryptoKeyStore
IsDefinedHashtypeSignature	script/interpreter.cpp	/^bool static IsDefinedHashtypeSignature(const valtype &vchSig) {$/;"	f	file:
IsDust	primitives/transaction.h	/^    bool IsDust(const CFeeRate &minRelayTxFee) const$/;"	f	class:CTxOut
IsError	consensus/validation.h	/^    bool IsError() const {$/;"	f	class:CValidationState
IsExist	cache.cpp	/^bool OrderList::IsExist(const TxInfo &txinfo) const$/;"	f	class:order_list::OrderList
IsFinal	primitives/transaction.h	/^    bool IsFinal() const$/;"	f	class:CTxIn
IsFinalTx	main.cpp	/^bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)$/;"	f
IsFromMe	wallet/wallet.cpp	/^bool CWallet::IsFromMe(const CTransaction& tx) const$/;"	f	class:CWallet
IsFromMe	wallet/wallet.h	/^    bool IsFromMe(const isminefilter& filter) const$/;"	f	class:CWalletTx
IsFullyValid	pubkey.cpp	/^bool CPubKey::IsFullyValid() const {$/;"	f	class:CPubKey
IsHex	utilstrencodings.cpp	/^bool IsHex(const string& str)$/;"	f
IsIOError	leveldb/include/leveldb/status.h	/^  bool IsIOError() const { return code() == kIOError; }$/;"	f	class:leveldb::Status
IsIPv4	netbase.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	netbase.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsIdle	checkqueue.h	/^    bool IsIdle()$/;"	f	class:CCheckQueue
IsInEffect	alert.cpp	/^bool CAlert::IsInEffect() const$/;"	f	class:CAlert
IsInMainChain	wallet/wallet.h	/^    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChainINTERNAL(pindexRet) > 0; }$/;"	f	class:CMerkleTx
IsInitialBlockDownload	main.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsInvalid	consensus/validation.h	/^    bool IsInvalid() const {$/;"	f	class:CValidationState
IsInvalid	consensus/validation.h	/^    bool IsInvalid(int &nDoSOut) const {$/;"	f	class:CValidationState
IsKeyType	wallet/walletdb.cpp	/^static bool IsKeyType(std::string strType)$/;"	f	file:
IsKnownType	protocol.cpp	/^bool CInv::IsKnownType() const$/;"	f	class:CInv
IsLimited	net.cpp	/^bool IsLimited(const CNetAddr &addr)$/;"	f
IsLimited	net.cpp	/^bool IsLimited(enum Network net)$/;"	f
IsLocal	net.cpp	/^bool IsLocal(const CService& addr)$/;"	f
IsLocal	netbase.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsLocked	wallet/crypter.h	/^    bool IsLocked() const$/;"	f	class:CCryptoKeyStore
IsLockedCoin	wallet/wallet.cpp	/^bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const$/;"	f	class:CWallet
IsLowDERSignature	script/interpreter.cpp	/^bool static IsLowDERSignature(const valtype &vchSig, ScriptError* serror) {$/;"	f	file:
IsMember	cache.h	/^    inline bool IsMember(const std::string &addr) const$/;"	f	class:alliance_member::AllianceMember
IsMemberOnly	cache.h	/^    inline bool IsMemberOnly(const type_Color &color) const$/;"	f	class:color_license::ColorLicense
IsMine	wallet/wallet.cpp	/^bool CWallet::IsMine(const CTransaction& tx) const$/;"	f	class:CWallet
IsMine	wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxIn &txin) const$/;"	f	class:CWallet
IsMine	wallet/wallet.cpp	/^isminetype CWallet::IsMine(const CTxOut& txout) const$/;"	f	class:CWallet
IsMine	wallet/wallet_ismine.cpp	/^isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)$/;"	f
IsMine	wallet/wallet_ismine.cpp	/^isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)$/;"	f
IsMock	wallet/db.h	/^    bool IsMock() { return fMockDb; }$/;"	f	class:CDBEnv
IsMulticast	netbase.cpp	/^bool CNetAddr::IsMulticast() const$/;"	f	class:CNetAddr
IsNotFound	leveldb/include/leveldb/status.h	/^  bool IsNotFound() const { return code() == kNotFound; }$/;"	f	class:leveldb::Status
IsNull	alert.cpp	/^bool CAlert::IsNull() const$/;"	f	class:CAlert
IsNull	chain.h	/^    bool IsNull() const { return (nFile == -1); }$/;"	f	struct:CDiskBlockPos
IsNull	primitives/block.h	/^    bool IsNull() const$/;"	f	class:CBlockHeader
IsNull	primitives/block.h	/^    bool IsNull() const$/;"	f	struct:CBlockLocator
IsNull	primitives/transaction.h	/^    bool IsNull() const { return (hash.IsNull() && n == (uint32_t) -1); }$/;"	f	class:COutPoint
IsNull	primitives/transaction.h	/^    bool IsNull() const {$/;"	f	class:CTransaction
IsNull	primitives/transaction.h	/^    bool IsNull() const$/;"	f	class:CTxOut
IsNull	streams.h	/^    bool IsNull() const         { return (file == NULL); }$/;"	f	class:CAutoFile
IsNull	txmempool.h	/^    bool IsNull() const { return (ptx == NULL && n == (uint32_t) -1); }$/;"	f	class:CInPoint
IsNull	uint256.h	/^    bool IsNull() const$/;"	f	class:base_blob
IsOk	leveldb/util/testharness.h	/^  Tester& IsOk(const Status& s) {$/;"	f	class:leveldb::test::Tester
IsPayToScriptHash	script/script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsPeerAddrLocalGood	net.cpp	/^bool IsPeerAddrLocalGood(CNode *pnode)$/;"	f
IsProxy	netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsPruned	coins.h	/^    bool IsPruned() const {$/;"	f	class:CCoins
IsPushOnly	script/script.cpp	/^bool CScript::IsPushOnly() const$/;"	f	class:CScript
IsRFC1918	netbase.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC2544	netbase.cpp	/^bool CNetAddr::IsRFC2544() const$/;"	f	class:CNetAddr
IsRFC3849	netbase.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	netbase.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	netbase.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	netbase.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	netbase.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	netbase.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	netbase.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC5737	netbase.cpp	/^bool CNetAddr::IsRFC5737() const$/;"	f	class:CNetAddr
IsRFC6052	netbase.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	netbase.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsRFC6598	netbase.cpp	/^bool CNetAddr::IsRFC6598() const$/;"	f	class:CNetAddr
IsRPCRunning	rpcserver.cpp	/^bool IsRPCRunning()$/;"	f
IsReachable	net.cpp	/^bool IsReachable(const CNetAddr& addr)$/;"	f
IsReachable	net.cpp	/^bool IsReachable(enum Network net)$/;"	f
IsRelevantAndUpdate	bloom.cpp	/^bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)$/;"	f	class:CBloomFilter
IsRoutable	netbase.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsScript	base58.cpp	/^bool CBitcoinAddress::IsScript() const$/;"	f	class:CBitcoinAddress
IsSelected	coincontrol.h	/^    bool IsSelected(const uint256& hash, unsigned int n) const$/;"	f	class:CCoinControl
IsSpent	wallet/wallet.cpp	/^bool CWallet::IsSpent(const uint256& hash, unsigned int n) const$/;"	f	class:CWallet
IsStandard	script/standard.cpp	/^bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)$/;"	f
IsStandardTx	main.cpp	/^bool IsStandardTx(const CTransaction& tx, string& reason)$/;"	f
IsSuperMajority	main.cpp	/^static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned nRequired, const Consensus::Params& consensusParams)$/;"	f	file:
IsSwitchChar	util.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	addrman.cpp	/^bool CAddrInfo::IsTerrible(int64_t nNow) const$/;"	f	class:CAddrInfo
IsToKeyID	compressor.cpp	/^bool CScriptCompressor::IsToKeyID(CKeyID &hash) const$/;"	f	class:CScriptCompressor
IsToPubKey	compressor.cpp	/^bool CScriptCompressor::IsToPubKey(CPubKey &pubkey) const$/;"	f	class:CScriptCompressor
IsToScriptID	compressor.cpp	/^bool CScriptCompressor::IsToScriptID(CScriptID &hash) const$/;"	f	class:CScriptCompressor
IsTor	netbase.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsTrivialMove	leveldb/db/version_set.cc	/^bool Compaction::IsTrivialMove() const {$/;"	f	class:leveldb::Compaction
IsTrusted	wallet/wallet.cpp	/^bool CWalletTx::IsTrusted() const$/;"	f	class:CWalletTx
IsUnspendable	script/script.h	/^    bool IsUnspendable() const$/;"	f	class:CScript
IsValid	base58.cpp	/^bool CBitcoinAddress::IsValid() const$/;"	f	class:CBitcoinAddress
IsValid	base58.cpp	/^bool CBitcoinAddress::IsValid(const CChainParams& params) const$/;"	f	class:CBitcoinAddress
IsValid	base58.cpp	/^bool CBitcoinSecret::IsValid() const$/;"	f	class:CBitcoinSecret
IsValid	chain.h	/^    bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const$/;"	f	class:CBlockIndex
IsValid	consensus/validation.h	/^    bool IsValid() const {$/;"	f	class:CValidationState
IsValid	key.h	/^    bool IsValid() const { return fValid; }$/;"	f	class:CKey
IsValid	netbase.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
IsValid	netbase.cpp	/^bool CSubNet::IsValid() const$/;"	f	class:CSubNet
IsValid	netbase.h	/^    bool IsValid() const { return proxy.IsValid(); }$/;"	f	class:proxyType
IsValid	policy/licenseinfo.cpp	/^bool CLicenseInfo::IsValid()$/;"	f	class:CLicenseInfo
IsValid	protocol.cpp	/^bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const$/;"	f	class:CMessageHeader
IsValid	pubkey.h	/^    bool IsValid() const$/;"	f	class:CPubKey
IsValid	wallet/hdkeystore.h	/^    bool IsValid()$/;"	f	class:CHDChain
IsValid	wallet/hdkeystore.h	/^    bool IsValid()$/;"	f	class:CHDPubKey
IsValidColor	main.cpp	/^bool IsValidColor(const type_Color &color) {$/;"	f
IsValidKey	leveldb/db/skiplist_test.cc	/^  static bool IsValidKey(Key k) {$/;"	f	class:leveldb::ConcurrentTest	file:
IsValidSignatureEncoding	script/interpreter.cpp	/^bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {$/;"	f	file:
IsWhitelistedRange	net.cpp	/^bool CNode::IsWhitelistedRange(const CNetAddr &addr) {$/;"	f	class:CNode
IsWithinSizeConstraints	bloom.cpp	/^bool CBloomFilter::IsWithinSizeConstraints() const$/;"	f	class:CBloomFilter
Issue178	leveldb/issues/issue178_test.cc	/^class Issue178 { };$/;"	c	namespace:__anon12	file:
Issue200	leveldb/issues/issue200_test.cc	/^class Issue200 { };$/;"	c	namespace:leveldb	file:
Iter	leveldb/table/block.cc	/^  Iter(const Comparator* comparator,$/;"	f	class:leveldb::Block::Iter
Iter	leveldb/table/block.cc	/^class Block::Iter : public Iterator {$/;"	c	class:leveldb::Block	file:
IterState	leveldb/db/db_impl.cc	/^struct IterState {$/;"	s	namespace:leveldb::__anon14	file:
IterStatus	leveldb/db/db_test.cc	/^  std::string IterStatus(Iterator* iter) {$/;"	f	class:leveldb::DBTest
Iterate	leveldb/db/write_batch.cc	/^Status WriteBatch::Iterate(Handler* handler) const {$/;"	f	class:leveldb::WriteBatch
Iterator	leveldb/db/skiplist.h	/^  class Iterator {$/;"	c	class:leveldb::SkipList
Iterator	leveldb/db/skiplist.h	/^inline SkipList<Key,Comparator>::Iterator::Iterator(const SkipList* list) {$/;"	f	class:leveldb::SkipList::Iterator
Iterator	leveldb/include/leveldb/iterator.h	/^class Iterator {$/;"	c	namespace:leveldb
Iterator	leveldb/table/iterator.cc	/^Iterator::Iterator() {$/;"	f	class:leveldb::Iterator
IteratorBegin	cache.h	/^    inline CIterator IteratorBegin()$/;"	f	class:CacheInterface
IteratorEnd	cache.h	/^    inline CIterator IteratorEnd()$/;"	f	class:CacheInterface
IteratorWrapper	leveldb/table/iterator_wrapper.h	/^  IteratorWrapper(): iter_(NULL), valid_(false) { }$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	leveldb/table/iterator_wrapper.h	/^  explicit IteratorWrapper(Iterator* iter): iter_(NULL) {$/;"	f	class:leveldb::IteratorWrapper
IteratorWrapper	leveldb/table/iterator_wrapper.h	/^class IteratorWrapper {$/;"	c	namespace:leveldb
JAVA	Makefile	/^JAVA = $/;"	m
JAVA_COMPARISON_TOOL	Makefile	/^JAVA_COMPARISON_TOOL = $/;"	m
JSONRPCError	rpcprotocol.cpp	/^Object JSONRPCError(int code, const std::string& message)$/;"	f
JSONRPCExecBatch	rpcserver.cpp	/^static string JSONRPCExecBatch(const Array& vReq)$/;"	f	file:
JSONRPCExecOne	rpcserver.cpp	/^static Object JSONRPCExecOne(const Value& req)$/;"	f	file:
JSONRPCReply	rpcprotocol.cpp	/^std::string JSONRPCReply(const Value& result, const Value& error, const Value& id)$/;"	f
JSONRPCReplyObj	rpcprotocol.cpp	/^Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)$/;"	f
JSONRPCRequest	rpcprotocol.cpp	/^std::string JSONRPCRequest(const std::string& strMethod, const Array& params, const Value& id)$/;"	f
JSONRequest	rpcserver.cpp	/^    JSONRequest() { id = Value::null; }$/;"	f	class:JSONRequest
JSONRequest	rpcserver.cpp	/^class JSONRequest$/;"	c	file:
JSON_H	Makefile	/^JSON_H = \\$/;"	m
JSON_SPIRIT	json/json_spirit.h	2;"	d
JSON_SPIRIT_ERROR_POSITION	json/json_spirit_error_position.h	2;"	d
JSON_SPIRIT_READER	json/json_spirit_reader.h	2;"	d
JSON_SPIRIT_READER_TEMPLATE	json/json_spirit_reader_template.h	2;"	d
JSON_SPIRIT_READ_STREAM	json/json_spirit_stream_reader.h	2;"	d
JSON_SPIRIT_UTILS	json/json_spirit_utils.h	2;"	d
JSON_SPIRIT_VALUE	json/json_spirit_value.h	2;"	d
JSON_SPIRIT_WRITER	json/json_spirit_writer.h	2;"	d
JSON_SPIRIT_WRITER_TEMPLATE	json/json_spirit_writer_template.h	2;"	d
JSON_TEST_FILES	Makefile	/^JSON_TEST_FILES = \\$/;"	m
JTOK_ARR_CLOSE	univalue/univalue.h	/^    JTOK_ARR_CLOSE,$/;"	e	enum:jtokentype
JTOK_ARR_OPEN	univalue/univalue.h	/^    JTOK_ARR_OPEN,$/;"	e	enum:jtokentype
JTOK_COLON	univalue/univalue.h	/^    JTOK_COLON,$/;"	e	enum:jtokentype
JTOK_COMMA	univalue/univalue.h	/^    JTOK_COMMA,$/;"	e	enum:jtokentype
JTOK_ERR	univalue/univalue.h	/^    JTOK_ERR        = -1,$/;"	e	enum:jtokentype
JTOK_KW_FALSE	univalue/univalue.h	/^    JTOK_KW_FALSE,$/;"	e	enum:jtokentype
JTOK_KW_NULL	univalue/univalue.h	/^    JTOK_KW_NULL,$/;"	e	enum:jtokentype
JTOK_KW_TRUE	univalue/univalue.h	/^    JTOK_KW_TRUE,$/;"	e	enum:jtokentype
JTOK_NONE	univalue/univalue.h	/^    JTOK_NONE       = 0,                           \/\/ eof$/;"	e	enum:jtokentype
JTOK_NUMBER	univalue/univalue.h	/^    JTOK_NUMBER,$/;"	e	enum:jtokentype
JTOK_OBJ_CLOSE	univalue/univalue.h	/^    JTOK_OBJ_CLOSE,$/;"	e	enum:jtokentype
JTOK_OBJ_OPEN	univalue/univalue.h	/^    JTOK_OBJ_OPEN,$/;"	e	enum:jtokentype
JTOK_STRING	univalue/univalue.h	/^    JTOK_STRING,$/;"	e	enum:jtokentype
Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1verify	secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^JNIEXPORT jint JNICALL Java_org_bitcoin_NativeSecp256k1_secp256k1_1ecdsa_1verify$/;"	f
Json_grammer	json/json_spirit_reader_template.h	/^        Json_grammer( Semantic_actions_t& semantic_actions )$/;"	f	class:json_spirit::Json_grammer
Json_grammer	json/json_spirit_reader_template.h	/^    class Json_grammer : public spirit_namespace::grammar< Json_grammer< Value_type, Iter_type > >$/;"	c	namespace:json_spirit
K	leveldb/db/skiplist_test.cc	/^  static const uint32_t K = 4;$/;"	m	class:leveldb::ConcurrentTest	file:
K	leveldb/db/skiplist_test.cc	/^const uint32_t ConcurrentTest::K;$/;"	m	class:leveldb::ConcurrentTest	file:
KVMap	leveldb/db/db_test.cc	/^typedef std::map<std::string, std::string> KVMap;$/;"	t	namespace:leveldb::__anon20	file:
KVMap	leveldb/table/table_test.cc	/^typedef std::map<std::string, std::string, STLLessThan> KVMap;$/;"	t	namespace:leveldb	file:
KeepKey	wallet/wallet.cpp	/^void CReserveKey::KeepKey()$/;"	f	class:CReserveKey
KeepKey	wallet/wallet.cpp	/^void CWallet::KeepKey(int64_t nIndex)$/;"	f	class:CWallet
Key	leveldb/db/autocompact_test.cc	/^  std::string Key(int i) {$/;"	f	class:leveldb::AutoCompactTest
Key	leveldb/db/corruption_test.cc	/^  Slice Key(int i, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Key	leveldb/db/db_test.cc	/^static std::string Key(int i) {$/;"	f	namespace:leveldb
Key	leveldb/db/skiplist_test.cc	/^typedef uint64_t Key;$/;"	t	namespace:leveldb	file:
Key	leveldb/util/bloom_test.cc	/^static Slice Key(int i, char* buffer) {$/;"	f	namespace:leveldb
Key1	leveldb/issues/issue178_test.cc	/^std::string Key1(int i) {$/;"	f	namespace:__anon12
Key2	leveldb/issues/issue178_test.cc	/^std::string Key2(int i) {$/;"	f	namespace:__anon12
KeyComparator	leveldb/db/memtable.h	/^    explicit KeyComparator(const InternalKeyComparator& c) : comparator(c) { }$/;"	f	struct:leveldb::MemTable::KeyComparator
KeyComparator	leveldb/db/memtable.h	/^  struct KeyComparator {$/;"	s	class:leveldb::MemTable
KeyConvertingIterator	leveldb/table/table_test.cc	/^  explicit KeyConvertingIterator(Iterator* iter) : iter_(iter) { }$/;"	f	class:leveldb::KeyConvertingIterator
KeyConvertingIterator	leveldb/table/table_test.cc	/^class KeyConvertingIterator: public Iterator {$/;"	c	namespace:leveldb	file:
KeyData	test/script_tests.cpp	/^    KeyData()$/;"	f	struct:__anon94::KeyData
KeyData	test/script_tests.cpp	/^struct KeyData$/;"	s	namespace:__anon94	file:
KeyIsAfterNode	leveldb/db/skiplist.h	/^bool SkipList<Key,Comparator>::KeyIsAfterNode(const Key& key, Node* n) const {$/;"	f	class:leveldb::SkipList
KeyMap	keystore.h	/^typedef std::map<CKeyID, CKey> KeyMap;$/;"	t
KeyMayMatch	leveldb/db/c.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	struct:leveldb_filterpolicy_t
KeyMayMatch	leveldb/db/dbformat.cc	/^bool InternalFilterPolicy::KeyMayMatch(const Slice& key, const Slice& f) const {$/;"	f	class:leveldb::InternalFilterPolicy
KeyMayMatch	leveldb/table/filter_block.cc	/^bool FilterBlockReader::KeyMayMatch(uint64_t block_offset, const Slice& key) {$/;"	f	class:leveldb::FilterBlockReader
KeyMayMatch	leveldb/table/filter_block_test.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const {$/;"	f	class:leveldb::TestHashFilter
KeyMayMatch	leveldb/util/bloom.cc	/^  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {$/;"	f	class:leveldb::__anon40::BloomFilterPolicy
KeyStore	script/sign.h	/^    const CKeyStore& KeyStore() const { return *keystore; };$/;"	f	class:BaseSignatureCreator
KeyValPair	wallet/db.h	/^    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;$/;"	t	class:CDBEnv
LCOV	Makefile	/^LCOV = $/;"	m
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LD	secp256k1/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -L\/usr\/local\/ssl\/lib  -Wl,-z,relro -Wl,-z,now -pie$/;"	m
LDFLAGS	secp256k1/Makefile	/^LDFLAGS = -L\/usr\/local\/ssl\/lib$/;"	m
LEAVE_CRITICAL_SECTION	sync.h	175;"	d
LEVELDB_ATOMIC_CPPFLAGS	Makefile	/^LEVELDB_ATOMIC_CPPFLAGS = -DLEVELDB_ATOMIC_PRESENT$/;"	m
LEVELDB_ATOMIC_CXXFLAGS	Makefile	/^LEVELDB_ATOMIC_CXXFLAGS = -std=c++0x$/;"	m
LEVELDB_CPPFLAGS	Makefile	/^LEVELDB_CPPFLAGS =  $(am__append_13)$/;"	m
LEVELDB_CPPFLAGS_INT	Makefile	/^LEVELDB_CPPFLAGS_INT = -I$(srcdir)\/leveldb \\$/;"	m
LEVELDB_CXXFLAGS_INT	Makefile	/^LEVELDB_CXXFLAGS_INT =  \\$/;"	m
LEVELDB_HAVE_MEMORY_BARRIER	leveldb/port/atomic_pointer.h	215;"	d
LEVELDB_HAVE_MEMORY_BARRIER	leveldb/port/atomic_pointer.h	50;"	d
LEVELDB_ONCE_INIT	leveldb/port/port_example.h	70;"	d
LEVELDB_ONCE_INIT	leveldb/port/port_posix.h	117;"	d
LEVELDB_ONCE_INIT	leveldb/port/port_win.h	117;"	d
LEVELDB_TARGET_FLAGS	Makefile	/^LEVELDB_TARGET_FLAGS = -DOS_LINUX$/;"	m
LE_LOAD32	leveldb/util/crc32c.cc	/^static inline uint32_t LE_LOAD32(const uint8_t *p) {$/;"	f	namespace:leveldb::crc32c
LIBBITCOINQT	Makefile	/^LIBBITCOINQT = qt\/libbitcoinqt.a$/;"	m
LIBBITCOIN_CLI	Makefile	/^LIBBITCOIN_CLI = libbitcoin_cli.a$/;"	m
LIBBITCOIN_COMMON	Makefile	/^LIBBITCOIN_COMMON = libbitcoin_common.a$/;"	m
LIBBITCOIN_CONSENSUS	Makefile	/^LIBBITCOIN_CONSENSUS = libbitcoinconsensus.la$/;"	m
LIBBITCOIN_CRYPTO	Makefile	/^LIBBITCOIN_CRYPTO = crypto\/libbitcoin_crypto.a$/;"	m
LIBBITCOIN_SERVER	Makefile	/^LIBBITCOIN_SERVER = libbitcoin_server.a$/;"	m
LIBBITCOIN_UNIVALUE	Makefile	/^LIBBITCOIN_UNIVALUE = univalue\/libbitcoin_univalue.a$/;"	m
LIBBITCOIN_UTIL	Makefile	/^LIBBITCOIN_UTIL = libbitcoin_util.a$/;"	m
LIBBITCOIN_WALLET	Makefile	/^LIBBITCOIN_WALLET = libbitcoin_wallet.a$/;"	m
LIBLEVELDB	Makefile	/^LIBLEVELDB =  $(am__append_11)$/;"	m
LIBLEVELDB_INT	Makefile	/^LIBLEVELDB_INT = leveldb\/libleveldb.a$/;"	m
LIBMEMENV	Makefile	/^LIBMEMENV =  $(am__append_12)$/;"	m
LIBMEMENV_INT	Makefile	/^LIBMEMENV_INT = leveldb\/libmemenv.a$/;"	m
LIBOBJECTS	leveldb/Makefile	/^LIBOBJECTS = $(SOURCES:.cc=.o)$/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	secp256k1/Makefile	/^LIBOBJS = $/;"	m
LIBRARY	leveldb/Makefile	/^LIBRARY = libleveldb.a$/;"	m
LIBS	Makefile	/^LIBS = -lcrypto -lanl $/;"	m
LIBS	secp256k1/Makefile	/^LIBS = $/;"	m
LIBSECP256K1	Makefile	/^LIBSECP256K1 = secp256k1\/libsecp256k1.la$/;"	m
LIBSECP256K1_CONFIG_H	secp256k1/src/libsecp256k1-config.h	6;"	d
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	secp256k1/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL_APP_LDFLAGS	Makefile	/^LIBTOOL_APP_LDFLAGS = $/;"	m
LICENSE	primitives/transaction.h	/^    LICENSE,$/;"	e	enum:TransactionType
LICENSE_MATURITY	consensus/consensus.h	/^static const int LICENSE_MATURITY = 10;$/;"	v
LIMITED_STRING	serialize.h	378;"	d
LINEAR	policy/licenseinfo.h	/^    LINEAR,$/;"	e	enum:MintSchedule
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINK	secp256k1/Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LIPO	secp256k1/Makefile	/^LIPO = $/;"	m
LN2	bloom.cpp	19;"	d	file:
LN2SQUARED	bloom.cpp	18;"	d	file:
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LN_S	secp256k1/Makefile	/^LN_S = ln -s$/;"	m
LOCAL_BIND	net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon10
LOCAL_IF	net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon10
LOCAL_MANUAL	net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon10
LOCAL_MAX	net.h	/^    LOCAL_MAX$/;"	e	enum:__anon10
LOCAL_NONE	net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon10
LOCAL_UPNP	net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon10
LOCK	sync.h	165;"	d
LOCK2	sync.h	166;"	d
LOCKABLE	leveldb/port/thread_annotations.h	29;"	d
LOCKABLE	threadsafety.h	16;"	d
LOCKABLE	threadsafety.h	35;"	d
LOCKS_EXCLUDED	leveldb/port/thread_annotations.h	21;"	d
LOCKS_EXCLUDED	threadsafety.h	30;"	d
LOCKS_EXCLUDED	threadsafety.h	49;"	d
LOCKTIME_THRESHOLD	consensus/consensus.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; \/\/ Tue Nov  5 00:53:20 1985 UTC$/;"	v
LOCK_RETURNED	leveldb/port/thread_annotations.h	25;"	d
LOCK_RETURNED	threadsafety.h	29;"	d
LOCK_RETURNED	threadsafety.h	48;"	d
LOG_COMPILE	Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_COMPILE	secp256k1/Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_DRIVER	Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LOG_DRIVER	secp256k1/Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LRUCache	leveldb/util/cache.cc	/^LRUCache::LRUCache()$/;"	f	class:leveldb::__anon39::LRUCache
LRUCache	leveldb/util/cache.cc	/^class LRUCache {$/;"	c	namespace:leveldb::__anon39	file:
LRUHandle	leveldb/util/cache.cc	/^struct LRUHandle {$/;"	s	namespace:leveldb::__anon39	file:
LRU_Append	leveldb/util/cache.cc	/^void LRUCache::LRU_Append(LRUHandle* e) {$/;"	f	class:leveldb::__anon39::LRUCache
LRU_Remove	leveldb/util/cache.cc	/^void LRUCache::LRU_Remove(LRUHandle* e) {$/;"	f	class:leveldb::__anon39::LRUCache
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	secp256k1/Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	secp256k1/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LTLIBRARIES	secp256k1/Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES)$/;"	m
LT_OBJDIR	config/bitcoin-config.h	291;"	d
LT_OBJDIR	secp256k1/src/libsecp256k1-config.h	58;"	d
LastCommonAncestor	main.cpp	/^CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) {$/;"	f	namespace:__anon47
LastRecordOffset	leveldb/db/log_reader.cc	/^uint64_t Reader::LastRecordOffset() {$/;"	f	class:leveldb::log::Reader
LastSequence	leveldb/db/version_set.h	/^  uint64_t LastSequence() const { return last_sequence_; }$/;"	f	class:leveldb::VersionSet
LeaveCritical	sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	sync.h	/^void static inline LeaveCritical() {}$/;"	f
LevelFileNumIterator	leveldb/db/version_set.cc	/^  LevelFileNumIterator(const InternalKeyComparator& icmp,$/;"	f	class:leveldb::Version::LevelFileNumIterator
LevelFileNumIterator	leveldb/db/version_set.cc	/^class Version::LevelFileNumIterator : public Iterator {$/;"	c	class:leveldb::Version	file:
LevelState	leveldb/db/version_set.cc	/^  struct LevelState {$/;"	s	class:leveldb::VersionSet::Builder	file:
LevelSummary	leveldb/db/version_set.cc	/^const char* VersionSet::LevelSummary(LevelSummaryStorage* scratch) const {$/;"	f	class:leveldb::VersionSet
LevelSummaryStorage	leveldb/db/version_set.h	/^  struct LevelSummaryStorage {$/;"	s	class:leveldb::VersionSet
LicenseHandlerFixture	test/handler_license.cpp	/^    LicenseHandlerFixture()$/;"	f	struct:LicenseHandlerFixture
LicenseHandlerFixture	test/handler_license.cpp	/^struct LicenseHandlerFixture : public TestingSetup$/;"	s	file:
LicenseInfo	init.cpp	/^std::string LicenseInfo()$/;"	f
LicenseInfoToJSON	wallet/rpcwallet.cpp	/^void LicenseInfoToJSON(const CLicenseInfo& info, Object& entry)$/;"	f
LimitOrphanTxSize	main.cpp	/^unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)$/;"	f
LimitedString	serialize.h	/^    LimitedString(std::string& string) : string(string) {}$/;"	f	class:LimitedString
LimitedString	serialize.h	/^class LimitedString$/;"	c
ListAccountCreditDebit	wallet/walletdb.cpp	/^void CWalletDB::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries)$/;"	f	class:CWalletDB
ListLicense	cache.cpp	/^map<type_Color, pair<string, int64_t> > ColorLicense::ListLicense() const$/;"	f	class:color_license::ColorLicense
ListLockedCoins	wallet/wallet.cpp	/^void CWallet::ListLockedCoins(vector<COutPoint>& vOutpts)$/;"	f	class:CWallet
ListReceived	wallet/rpcwallet.cpp	/^Value ListReceived(const Array& params, bool fByAccounts)$/;"	f
ListSelected	coincontrol.h	/^    void ListSelected(std::vector<COutPoint>& vOutpoints)$/;"	f	class:CCoinControl
ListTransactions	wallet/rpcwallet.cpp	/^void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter)$/;"	f
ListenSocket	net.cpp	/^    ListenSocket(SOCKET socket, bool whitelisted) : socket(socket), whitelisted(whitelisted) {}$/;"	f	struct:__anon9::ListenSocket
ListenSocket	net.cpp	/^struct ListenSocket {$/;"	s	namespace:__anon9	file:
Load	key.cpp	/^bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {$/;"	f	class:CKey
LoadBlockIndex	main.cpp	/^bool LoadBlockIndex()$/;"	f
LoadBlockIndexDB	main.cpp	/^bool static LoadBlockIndexDB()$/;"	f	file:
LoadBlockIndexGuts	txdb.cpp	/^bool CBlockTreeDB::LoadBlockIndexGuts()$/;"	f	class:CBlockTreeDB
LoadCScript	wallet/wallet.cpp	/^bool CWallet::LoadCScript(const CScript& redeemScript)$/;"	f	class:CWallet
LoadCryptedKey	wallet/wallet.cpp	/^bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CWallet
LoadDestData	wallet/wallet.cpp	/^bool CWallet::LoadDestData(const CTxDestination &dest, const string &key, const string &value)$/;"	f	class:CWallet
LoadExternalBlockFile	main.cpp	/^bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)$/;"	f
LoadHDPubKey	wallet/hdkeystore.cpp	/^bool CHDKeyStore::LoadHDPubKey(const CHDPubKey &pubkey)$/;"	f	class:CHDKeyStore
LoadKey	wallet/wallet.h	/^    bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }$/;"	f	class:CWallet
LoadKeyMetadata	wallet/wallet.cpp	/^bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)$/;"	f	class:CWallet
LoadMinVersion	wallet/wallet.h	/^    bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }$/;"	f	class:CWallet
LoadWallet	test/test_bitcoin.cpp	/^DBErrors CWallet_UnitTest::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet_UnitTest
LoadWallet	ui_interface.h	/^    boost::signals2::signal<void (CWallet* wallet)> LoadWallet;$/;"	m	class:CClientUIInterface
LoadWallet	wallet/wallet.cpp	/^DBErrors CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	wallet/walletdb.cpp	/^DBErrors CWalletDB::LoadWallet(CWallet* pwallet)$/;"	f	class:CWalletDB
LoadWatchOnly	wallet/wallet.cpp	/^bool CWallet::LoadWatchOnly(const CScript &dest)$/;"	f	class:CWallet
LocalServiceInfo	net.h	/^struct LocalServiceInfo {$/;"	s
Lock	leveldb/port/port_posix.cc	/^void Mutex::Lock() { PthreadCall("lock", pthread_mutex_lock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Lock	leveldb/port/port_win.cc	/^void Mutex::Lock() {$/;"	f	class:leveldb::port::Mutex
Lock	support/pagelocker.cpp	/^bool MemoryPageLocker::Lock(const void* addr, size_t len)$/;"	f	class:MemoryPageLocker
Lock	test/allocator_tests.cpp	/^    bool Lock(const void *addr, size_t len)$/;"	f	class:TestLocker
Lock	wallet/crypter.cpp	/^bool CCryptoKeyStore::Lock()$/;"	f	class:CCryptoKeyStore
LockCoin	wallet/wallet.cpp	/^void CWallet::LockCoin(COutPoint& output)$/;"	f	class:CWallet
LockFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
LockFile	leveldb/include/leveldb/env.h	/^  Status LockFile(const std::string& f, FileLock** l) {$/;"	f	class:leveldb::EnvWrapper
LockFile	leveldb/util/env_posix.cc	/^  virtual Status LockFile(const std::string& fname, FileLock** lock) {$/;"	f	class:leveldb::__anon42::PosixEnv
LockFile	leveldb/util/env_win.cc	/^Status Win32Env::LockFile( const std::string& fname, FileLock** lock )$/;"	f	class:leveldb::Win32::Win32Env
LockFileName	leveldb/db/filename.cc	/^std::string LockFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
LockObject	support/pagelocker.h	/^void LockObject(const T& t)$/;"	f
LockOrUnlock	leveldb/util/env_posix.cc	/^static int LockOrUnlock(int fd, bool lock) {$/;"	f	namespace:leveldb::__anon42
LockRange	support/pagelocker.h	/^    void LockRange(void* p, size_t size)$/;"	f	class:LockedPageManagerBase
LockStack	sync.cpp	/^typedef std::vector<std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
LockWallet	wallet/rpcwallet.cpp	/^static void LockWallet(CWallet* pWallet)$/;"	f	file:
LockedPageManager	support/pagelocker.cpp	/^LockedPageManager::LockedPageManager() : LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())$/;"	f	class:LockedPageManager
LockedPageManager	support/pagelocker.h	/^class LockedPageManager : public LockedPageManagerBase<MemoryPageLocker>$/;"	c
LockedPageManagerBase	support/pagelocker.h	/^    LockedPageManagerBase(size_t page_size) : page_size(page_size)$/;"	f	class:LockedPageManagerBase
LockedPageManagerBase	support/pagelocker.h	/^class LockedPageManagerBase$/;"	c
LocksHeld	sync.cpp	/^std::string LocksHeld()$/;"	f
Log	leveldb/util/env.cc	/^void Log(Logger* info_log, const char* format, ...) {$/;"	f	namespace:leveldb
LogAcceptCategory	util.cpp	/^bool LogAcceptCategory(const char* category)$/;"	f
LogAndApply	leveldb/db/version_set.cc	/^Status VersionSet::LogAndApply(VersionEdit* edit, port::Mutex* mu) {$/;"	f	class:leveldb::VersionSet
LogFileName	leveldb/db/filename.cc	/^std::string LogFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
LogNumber	leveldb/db/version_set.h	/^  uint64_t LogNumber() const { return log_number_; }$/;"	f	class:leveldb::VersionSet
LogPrint	util.h	77;"	d
LogPrintStr	util.cpp	/^int LogPrintStr(const std::string &str)$/;"	f
LogPrintWithLocation	util.h	/^static inline int LogPrintWithLocation(const char* file, const char* line,$/;"	f
LogPrintf	util.h	73;"	d
LogTest	leveldb/db/log_test.cc	/^  LogTest() : reading_(false),$/;"	f	class:leveldb::log::LogTest
LogTest	leveldb/db/log_test.cc	/^class LogTest {$/;"	c	namespace:leveldb::log	file:
Logger	leveldb/include/leveldb/env.h	/^  Logger() { }$/;"	f	class:leveldb::Logger
Logger	leveldb/include/leveldb/env.h	/^class Logger {$/;"	c	namespace:leveldb
Logv	leveldb/helpers/memenv/memenv.cc	/^  virtual void Logv(const char* format, va_list ap) { }$/;"	f	class:leveldb::__anon26::NoOpLogger
Logv	leveldb/util/env_win.cc	/^void Win32Logger::Logv( const char* format, va_list ap )$/;"	f	class:leveldb::Win32::Win32Logger
Logv	leveldb/util/posix_logger.h	/^  virtual void Logv(const char* format, va_list ap) {$/;"	f	class:leveldb::PosixLogger
LongTestString	test/crypto_tests.cpp	/^std::string LongTestString(void) {$/;"	f
Lookup	leveldb/util/cache.cc	/^  LRUHandle* Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon39::HandleTable
Lookup	leveldb/util/cache.cc	/^  virtual Handle* Lookup(const Slice& key) {$/;"	f	class:leveldb::__anon39::ShardedLRUCache
Lookup	leveldb/util/cache.cc	/^Cache::Handle* LRUCache::Lookup(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon39::LRUCache
Lookup	leveldb/util/cache_test.cc	/^  int Lookup(int key) {$/;"	f	class:leveldb::CacheTest
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupHost	netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupIntern	netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupKey	leveldb/db/dbformat.cc	/^LookupKey::LookupKey(const Slice& user_key, SequenceNumber s) {$/;"	f	class:leveldb::LookupKey
LookupKey	leveldb/db/dbformat.h	/^class LookupKey {$/;"	c	namespace:leveldb
LookupNumeric	netbase.cpp	/^bool LookupNumeric(const char *pszName, CService& addr, int portDefault)$/;"	f
Loop	checkqueue.h	/^    bool Loop(bool fMaster = false)$/;"	f	class:CCheckQueue
MAIN	chainparamsbase.h	/^        MAIN,$/;"	e	enum:CBaseChainParams::Network
MAINT	Makefile	/^MAINT = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/adrian\/gcoin-community-develop\/build-aux\/missing makeinfo$/;"	m
MAKEINFO	secp256k1/Makefile	/^MAKEINFO = ${SHELL} \/home\/adrian\/gcoin-community-develop\/src\/secp256k1\/build-aux\/missing makeinfo$/;"	m
MAKENSIS	Makefile	/^MAKENSIS = $/;"	m
MAKE_ERROR_AND_LOG_FUNC	util.h	142;"	d
MAKE_ERROR_AND_LOG_FUNC	util.h	89;"	d
MANDATORY_SCRIPT_VERIFY_FLAGS	script/standard.h	/^static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;$/;"	v
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MANIFEST_TOOL	secp256k1/Makefile	/^MANIFEST_TOOL = :$/;"	m
MAPASKFOR_MAX_SZ	net.h	/^static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;$/;"	v
MATCH	primitives/transaction.h	/^    MATCH,$/;"	e	enum:TransactionType
MAX_ADDR_TO_SEND	net.h	/^static const unsigned int MAX_ADDR_TO_SEND = 1000;$/;"	v
MAX_BASE58_TYPES	chainparams.h	/^        MAX_BASE58_TYPES$/;"	e	enum:CChainParams::Base58Type
MAX_BLOCKFILE_SIZE	main.h	/^static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; \/\/ 128 MiB$/;"	v
MAX_BLOCKS_IN_TRANSIT_PER_PEER	main.h	/^static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;$/;"	v
MAX_BLOCK_CONFIRMS	policy/fees.h	/^static const unsigned int MAX_BLOCK_CONFIRMS = 25;$/;"	v
MAX_BLOCK_SIGOPS	consensus/consensus.h	/^static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE\/50;$/;"	v
MAX_BLOCK_SIZE	consensus/consensus.h	/^static const unsigned int MAX_BLOCK_SIZE = 1000000;$/;"	v
MAX_BLOOM_FILTER_SIZE	bloom.h	/^static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; \/\/ bytes$/;"	v
MAX_FEERATE	policy/fees.h	/^static const double MAX_FEERATE = 1e7;$/;"	v
MAX_FREE_TRANSACTION_CREATE_SIZE	wallet/wallet.h	/^static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;$/;"	v
MAX_GETUTXOS_OUTPOINTS	rest.cpp	/^static const int MAX_GETUTXOS_OUTPOINTS = 15; \/\/allow a max of 15 outpoints to be queried at once$/;"	v	file:
MAX_HASH_FUNCS	bloom.h	/^static const unsigned int MAX_HASH_FUNCS = 50;$/;"	v
MAX_HEADERS_RESULTS	main.h	/^static const unsigned int MAX_HEADERS_RESULTS = 2000;$/;"	v
MAX_INV_SZ	net.h	/^static const unsigned int MAX_INV_SZ = 50000;$/;"	v
MAX_MONEY	amount.h	/^static const int64_t MAX_MONEY = 10000000000ll * COIN;$/;"	v
MAX_NETWORK_TYPES	chainparamsbase.h	/^        MAX_NETWORK_TYPES$/;"	e	enum:CBaseChainParams::Network
MAX_OP_RETURN_RELAY	script/standard.h	/^static const unsigned int MAX_OP_RETURN_RELAY = 550;      \/\/! bytes$/;"	v
MAX_OUTBOUND_CONNECTIONS	net.cpp	/^const int MAX_OUTBOUND_CONNECTIONS = 8;$/;"	m	namespace:__anon9	file:
MAX_P2SH_SIGOPS	main.h	/^static const unsigned int MAX_P2SH_SIGOPS = 15;$/;"	v
MAX_PATH	compat.h	72;"	d
MAX_PRIORITY	policy/fees.h	/^static const double MAX_PRIORITY = 1e16;$/;"	v
MAX_PROTOCOL_MESSAGE_LENGTH	net.h	/^static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;$/;"	v
MAX_REJECT_MESSAGE_LENGTH	main.h	/^static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;$/;"	v
MAX_SCRIPTCHECK_THREADS	main.h	/^static const int MAX_SCRIPTCHECK_THREADS = 16;$/;"	v
MAX_SCRIPT_ELEMENT_SIZE	script/script.h	/^static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; \/\/ bytes$/;"	v
MAX_SIZE	serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MAX_SIZE	test/mruset_tests.cpp	16;"	d	file:
MAX_STANDARD_TX_SIGOPS	main.h	/^static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS\/5;$/;"	v
MAX_STANDARD_TX_SIZE	main.h	/^static const unsigned int MAX_STANDARD_TX_SIZE = 100000;$/;"	v
MEMENVLIBRARY	leveldb/Makefile	/^MEMENVLIBRARY = libmemenv.a$/;"	m
MEMENVOBJECTS	leveldb/Makefile	/^MEMENVOBJECTS = $(MEMENV_SOURCES:.cc=.o)$/;"	m
MEMPOOL_GD_VERSION	version.h	/^static const int MEMPOOL_GD_VERSION = 60002;$/;"	v
MEMPOOL_HEIGHT	txmempool.h	/^static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;$/;"	v
MEMTABLE_TEST	leveldb/table/table_test.cc	/^  MEMTABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
MERGE	primitives/transaction.h	/^    MERGE,$/;"	e	enum:TransactionType
MESSAGE_SIZE_OFFSET	protocol.h	/^        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,$/;"	e	enum:CMessageHeader::__anon1
MESSAGE_SIZE_SIZE	protocol.h	/^        MESSAGE_SIZE_SIZE = sizeof(int),$/;"	e	enum:CMessageHeader::__anon1
MESSAGE_START_SIZE	protocol.h	21;"	d
MINIUPNPC_CPPFLAGS	Makefile	/^MINIUPNPC_CPPFLAGS = $/;"	m
MINIUPNPC_LIBS	Makefile	/^MINIUPNPC_LIBS = $/;"	m
MINT	primitives/transaction.h	/^    MINT,$/;"	e	enum:TransactionType
MIN_BLOCKS_TO_KEEP	main.h	/^static const signed int MIN_BLOCKS_TO_KEEP = 288;$/;"	v
MIN_CORE_FILEDESCRIPTORS	init.cpp	64;"	d	file:
MIN_CORE_FILEDESCRIPTORS	init.cpp	66;"	d	file:
MIN_DISK_SPACE_FOR_BLOCK_FILES	main.h	/^static const signed int MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;$/;"	v
MIN_FEERATE	policy/fees.h	/^static const double MIN_FEERATE = 10;$/;"	v
MIN_PEER_PROTO_VERSION	version.h	/^static const int MIN_PEER_PROTO_VERSION = GETHEADERS_VERSION;$/;"	v
MIN_PRIORITY	policy/fees.h	/^static const double MIN_PRIORITY = 10;$/;"	v
MIN_SUCCESS_PCT	policy/fees.h	/^static const double MIN_SUCCESS_PCT = .85;$/;"	v
MKDIR_P	Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MKDIR_P	secp256k1/Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MODAL	ui_interface.h	/^        MODAL               = 0x10000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MODE_ERROR	consensus/validation.h	/^        MODE_ERROR,   \/\/! run-time error$/;"	e	enum:CValidationState::mode_state
MODE_INVALID	consensus/validation.h	/^        MODE_INVALID, \/\/! network rule violation (DoS value may be set)$/;"	e	enum:CValidationState::mode_state
MODE_VALID	consensus/validation.h	/^        MODE_VALID,   \/\/! everything ok$/;"	e	enum:CValidationState::mode_state
MSG_BLOCK	protocol.h	/^    MSG_BLOCK,$/;"	e	enum:__anon3
MSG_DONTWAIT	compat.h	49;"	d
MSG_ERROR	ui_interface.h	/^        MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_FILTERED_BLOCK	protocol.h	/^    MSG_FILTERED_BLOCK,$/;"	e	enum:__anon3
MSG_INFORMATION	ui_interface.h	/^        MSG_INFORMATION = ICON_INFORMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_NOSIGNAL	compat.h	77;"	d
MSG_NOSIGNAL	net.cpp	36;"	d	file:
MSG_NOSIGNAL	netbase.cpp	37;"	d	file:
MSG_TX	protocol.h	/^    MSG_TX = 1,$/;"	e	enum:__anon3
MSG_WARNING	ui_interface.h	/^        MSG_WARNING = (ICON_WARNING | BTN_OK | MODAL),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MTState	leveldb/db/db_test.cc	/^struct MTState {$/;"	s	namespace:leveldb::__anon19	file:
MTThread	leveldb/db/db_test.cc	/^struct MTThread {$/;"	s	namespace:leveldb::__anon19	file:
MTThreadBody	leveldb/db/db_test.cc	/^static void MTThreadBody(void* arg) {$/;"	f	namespace:leveldb::__anon19
Maj	crypto/sha256.cpp	/^uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon6::sha256
Maj	crypto/sha512.cpp	/^uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }$/;"	f	namespace:__anon8::sha512
Maj	secp256k1/src/hash_impl.h	17;"	d
Maj	secp256k1/src/hash_impl.h	289;"	d
MakeFileName	leveldb/db/filename.cc	/^static std::string MakeFileName(const std::string& name, uint64_t number,$/;"	f	namespace:leveldb
MakeInputIterator	leveldb/db/version_set.cc	/^Iterator* VersionSet::MakeInputIterator(Compaction* c) {$/;"	f	class:leveldb::VersionSet
MakeKey	leveldb/db/db_test.cc	/^std::string MakeKey(unsigned int num) {$/;"	f	namespace:leveldb
MakeKey	leveldb/db/skiplist_test.cc	/^  static Key MakeKey(uint64_t k, uint64_t g) {$/;"	f	class:leveldb::ConcurrentTest	file:
MakeMock	wallet/db.cpp	/^void CDBEnv::MakeMock()$/;"	f	class:CDBEnv
MakeNewKey	key.cpp	/^void CKey::MakeNewKey(bool fCompressedIn) {$/;"	f	class:CKey
MakeRoomForWrite	leveldb/db/db_impl.cc	/^Status DBImpl::MakeRoomForWrite(bool force) {$/;"	f	class:leveldb::DBImpl
MakeTables	leveldb/db/db_test.cc	/^  void MakeTables(int n, const std::string& small, const std::string& large) {$/;"	f	class:leveldb::DBTest
MakeTried	addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId)$/;"	f	class:CAddrMan
MallocUsage	memusage.h	/^static inline size_t MallocUsage(size_t alloc)$/;"	f	namespace:memusage
ManifestFileNumber	leveldb/db/version_set.h	/^  uint64_t ManifestFileNumber() const { return manifest_file_number_; }$/;"	f	class:leveldb::VersionSet
ManualCompaction	leveldb/db/db_impl.h	/^  struct ManualCompaction {$/;"	s	class:leveldb::DBImpl
MapCheckpoints	checkpoints.h	/^typedef std::map<int, uint256> MapCheckpoints;$/;"	t	namespace:Checkpoints
MapPort	net.cpp	/^void MapPort(bool fUseUPnP)$/;"	f
MapPort	net.cpp	/^void MapPort(bool)$/;"	f
Mapped_obj	json/json_spirit_utils.h	/^    typedef std::map< std::string, Value > Mapped_obj;$/;"	t	namespace:json_spirit
MarkBlockAsInFlight	main.cpp	/^void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, CBlockIndex *pindex = NULL) {$/;"	f	namespace:__anon47
MarkBlockAsReceived	main.cpp	/^bool MarkBlockAsReceived(const uint256& hash) {$/;"	f	namespace:__anon47
MarkDirty	wallet/wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	wallet/wallet.h	/^    void MarkDirty()$/;"	f	class:CWalletTx
MarkFileNumberUsed	leveldb/db/version_set.cc	/^void VersionSet::MarkFileNumberUsed(uint64_t number) {$/;"	f	class:leveldb::VersionSet
Mask	leveldb/util/crc32c.h	/^inline uint32_t Mask(uint32_t crc) {$/;"	f	namespace:leveldb::crc32c
MasterKeyMap	wallet/wallet.h	/^    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;$/;"	t	class:CWallet
Match	netbase.cpp	/^bool CSubNet::Match(const CNetAddr &addr) const$/;"	f	class:CSubNet
MatchError	leveldb/db/log_test.cc	/^  std::string MatchError(const std::string& msg) const {$/;"	f	class:leveldb::log::LogTest
MatchOrder	wallet/wallet.cpp	/^string CWallet::MatchOrder(vector<pair<uint256, uint256> >& matchlist, vector<uint256>& txid)$/;"	f	class:CWallet
Matches	leveldb/util/bloom_test.cc	/^  bool Matches(const Slice& s) {$/;"	f	class:leveldb::BloomTest
MaxArray	test/arith_uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxArray	test/uint256_tests.cpp	/^const unsigned char MaxArray[] =$/;"	v
MaxBytesForLevel	leveldb/db/version_set.cc	/^static double MaxBytesForLevel(int level) {$/;"	f	namespace:leveldb
MaxFileSizeForLevel	leveldb/db/version_set.cc	/^static uint64_t MaxFileSizeForLevel(int level) {$/;"	f	namespace:leveldb
MaxL	test/arith_uint256_tests.cpp	/^const arith_uint256 MaxL = arith_uint256V(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxL	test/uint256_tests.cpp	/^const uint256 MaxL = uint256(std::vector<unsigned char>(MaxArray,MaxArray+32));$/;"	v
MaxNextLevelOverlappingBytes	leveldb/db/version_set.cc	/^int64_t VersionSet::MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::VersionSet
MaxOutputFileSize	leveldb/db/version_set.h	/^  uint64_t MaxOutputFileSize() const { return max_output_file_size_; }$/;"	f	class:leveldb::Compaction
MaxS	test/uint256_tests.cpp	/^const uint160 MaxS = uint160(std::vector<unsigned char>(MaxArray,MaxArray+20));$/;"	v
MaybeAddFile	leveldb/db/version_set.cc	/^  void MaybeAddFile(Version* v, int level, FileMetaData* f) {$/;"	f	class:leveldb::VersionSet::Builder
MaybeIgnoreError	leveldb/db/db_impl.cc	/^void DBImpl::MaybeIgnoreError(Status* s) const {$/;"	f	class:leveldb::DBImpl
MaybePushAddress	wallet/rpcwallet.cpp	/^static void MaybePushAddress(Object & entry, const CTxDestination &dest)$/;"	f	file:
MaybeScheduleCompaction	leveldb/db/db_impl.cc	/^void DBImpl::MaybeScheduleCompaction() {$/;"	f	class:leveldb::DBImpl
Median	leveldb/util/histogram.cc	/^double Histogram::Median() const {$/;"	f	class:leveldb::Histogram
MemEnvTest	leveldb/helpers/memenv/memenv_test.cc	/^  MemEnvTest()$/;"	f	class:leveldb::MemEnvTest
MemEnvTest	leveldb/helpers/memenv/memenv_test.cc	/^class MemEnvTest {$/;"	c	namespace:leveldb	file:
MemTable	leveldb/db/memtable.cc	/^MemTable::MemTable(const InternalKeyComparator& cmp)$/;"	f	class:leveldb::MemTable
MemTable	leveldb/db/memtable.h	/^class MemTable {$/;"	c	namespace:leveldb
MemTableConstructor	leveldb/table/table_test.cc	/^  explicit MemTableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::MemTableConstructor
MemTableConstructor	leveldb/table/table_test.cc	/^class MemTableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
MemTableInserter	leveldb/db/write_batch.cc	/^class MemTableInserter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon16	file:
MemTableIterator	leveldb/db/memtable.cc	/^  explicit MemTableIterator(MemTable::Table* table) : iter_(table) { }$/;"	f	class:leveldb::MemTableIterator
MemTableIterator	leveldb/db/memtable.cc	/^class MemTableIterator: public Iterator {$/;"	c	namespace:leveldb	file:
MemTableTest	leveldb/table/table_test.cc	/^class MemTableTest { };$/;"	c	namespace:leveldb	file:
MemoryPageLocker	support/pagelocker.h	/^class MemoryPageLocker$/;"	c
MemoryUsage	leveldb/util/arena.h	/^  size_t MemoryUsage() const {$/;"	f	class:leveldb::Arena
Merge	leveldb/db/db_bench.cc	/^  void Merge(const Stats& other) {$/;"	f	class:leveldb::__anon15::Stats
Merge	leveldb/util/histogram.cc	/^void Histogram::Merge(const Histogram& other) {$/;"	f	class:leveldb::Histogram
MergingIterator	leveldb/table/merger.cc	/^  MergingIterator(const Comparator* comparator, Iterator** children, int n)$/;"	f	class:leveldb::__anon28::MergingIterator
MergingIterator	leveldb/table/merger.cc	/^class MergingIterator : public Iterator {$/;"	c	namespace:leveldb::__anon28	file:
MessageBoxFlags	ui_interface.h	/^    enum MessageBoxFlags {$/;"	g	class:CClientUIInterface
MessageStart	chainparams.h	/^    const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }$/;"	f	class:CChainParams
MessageStartChars	protocol.h	/^    typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];$/;"	t	class:CMessageHeader
MicroSleep	test/scheduler_tests.cpp	/^static void MicroSleep(uint64_t n)$/;"	f	file:
MilliSleep	utiltime.cpp	/^void MilliSleep(int64_t n)$/;"	f
MillisToTimeval	netbase.cpp	/^struct timeval static MillisToTimeval(int64_t nTimeout)$/;"	f	file:
MineBlocksOnDemand	chainparams.h	/^    bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }$/;"	f	class:CChainParams
MiningRequiresPeers	chainparams.h	/^    bool MiningRequiresPeers() const { return fMiningRequiresPeers; }$/;"	f	class:CChainParams
MintMoney	wallet/wallet.cpp	/^string CWallet::MintMoney(const CAmount& nValue, const type_Color& color, CWalletTx& wtxNew)$/;"	f	class:CWallet
MintSchedule	policy/licenseinfo.h	/^enum MintSchedule {$/;"	g
Misbehaving	main.cpp	/^void Misbehaving(NodeId pnode, int howmuch)$/;"	f
MmapLimiter	leveldb/util/env_posix.cc	/^  MmapLimiter() {$/;"	f	class:leveldb::__anon42::MmapLimiter
MmapLimiter	leveldb/util/env_posix.cc	/^class MmapLimiter {$/;"	c	namespace:leveldb::__anon42	file:
ModelDB	leveldb/db/db_test.cc	/^  explicit ModelDB(const Options& options): options_(options) { }$/;"	f	class:leveldb::ModelDB
ModelDB	leveldb/db/db_test.cc	/^class ModelDB: public DB {$/;"	c	namespace:leveldb	file:
ModelIter	leveldb/db/db_test.cc	/^    ModelIter(const KVMap* map, bool owned)$/;"	f	class:leveldb::ModelDB::ModelIter
ModelIter	leveldb/db/db_test.cc	/^  class ModelIter: public Iterator {$/;"	c	class:leveldb::ModelDB	file:
ModelSnapshot	leveldb/db/db_test.cc	/^  class ModelSnapshot : public Snapshot {$/;"	c	class:leveldb::ModelDB	file:
ModifyCoins	coins.cpp	/^CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {$/;"	f	class:CCoinsViewCache
ModifyPath	leveldb/util/env_win.cc	/^std::string& ModifyPath(std::string& path)$/;"	f	namespace:leveldb::Win32
ModifyPath	leveldb/util/env_win.cc	/^std::wstring& ModifyPath(std::wstring& path)$/;"	f	namespace:leveldb::Win32
MoneyRange	amount.h	/^inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
MoveTo	sync.h	/^    void MoveTo(CSemaphoreGrant& grant)$/;"	f	class:CSemaphoreGrant
Mp_iter	json/json_spirit_reader_template.h	/^        typedef spirit_namespace::multi_pass< istream_iter > Mp_iter;$/;"	t	struct:json_spirit::Multi_pass_iters
Mp_iters	json/json_spirit_stream_reader.h	/^        typedef Multi_pass_iters< Istream_type > Mp_iters;$/;"	t	class:json_spirit::Stream_reader
Mp_iters	json/json_spirit_stream_reader.h	/^        typedef Multi_pass_iters< Istream_type > Mp_iters;$/;"	t	class:json_spirit::Stream_reader_thrower
Multi_pass_iters	json/json_spirit_reader_template.h	/^        Multi_pass_iters( Istream_type& is )$/;"	f	struct:json_spirit::Multi_pass_iters
Multi_pass_iters	json/json_spirit_reader_template.h	/^    struct Multi_pass_iters$/;"	s	namespace:json_spirit
MurmurHash3	hash.cpp	/^unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)$/;"	f
MutableBlockHeaderSignatureChecker	script/interpreter.h	/^    MutableBlockHeaderSignatureChecker(const CBlock* blockIn) : BlockHeaderSignatureChecker(&block), block(*blockIn) {}$/;"	f	class:MutableBlockHeaderSignatureChecker
MutableBlockHeaderSignatureChecker	script/interpreter.h	/^class MutableBlockHeaderSignatureChecker : public BlockHeaderSignatureChecker$/;"	c
MutableTransactionSignatureChecker	script/interpreter.h	/^    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}$/;"	f	class:MutableTransactionSignatureChecker
MutableTransactionSignatureChecker	script/interpreter.h	/^class MutableTransactionSignatureChecker : public TransactionSignatureChecker$/;"	c
Mutex	leveldb/port/port_example.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	leveldb/port/port_posix.cc	/^Mutex::Mutex() { PthreadCall("init mutex", pthread_mutex_init(&mu_, NULL)); }$/;"	f	class:leveldb::port::Mutex
Mutex	leveldb/port/port_posix.h	/^class Mutex {$/;"	c	namespace:leveldb::port
Mutex	leveldb/port/port_win.cc	/^Mutex::Mutex() :$/;"	f	class:leveldb::port::Mutex
Mutex	leveldb/port/port_win.h	/^class Mutex {$/;"	c	namespace:leveldb::port
MutexLock	leveldb/util/mutexlock.h	/^class SCOPED_LOCKABLE MutexLock {$/;"	c	namespace:leveldb
MutexName	sync.cpp	/^    std::string MutexName() const { return mutexName; }$/;"	f	struct:CLockLocation
NAME_LEN	policy/licenseinfo.h	/^const int NAME_LEN = 32;$/;"	v
NCONST_PTR	serialize.h	/^inline T* NCONST_PTR(const T* val)$/;"	f
NET_IPV4	netbase.h	/^    NET_IPV4,$/;"	e	enum:Network
NET_IPV6	netbase.h	/^    NET_IPV6,$/;"	e	enum:Network
NET_MAX	netbase.h	/^    NET_MAX,$/;"	e	enum:Network
NET_TEREDO	netbase.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_TOR	netbase.h	/^    NET_TOR,$/;"	e	enum:Network
NET_UNKNOWN	netbase.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	netbase.h	/^    NET_UNROUTABLE = 0,$/;"	e	enum:Network
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	secp256k1/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NMEDIT	secp256k1/Makefile	/^NMEDIT = $/;"	m
NOBLKS_VERSION_END	version.h	/^static const int NOBLKS_VERSION_END = 32400;$/;"	v
NOBLKS_VERSION_START	version.h	/^static const int NOBLKS_VERSION_START = 32000;$/;"	v
NODE_GETUTXO	protocol.h	/^    NODE_GETUTXO = (1 << 1),$/;"	e	enum:__anon2
NODE_NETWORK	protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:__anon2
NOMINMAX	compat.h	22;"	d
NOMINMAX	support/pagelocker.cpp	18;"	d	file:
NOMINMAX	util.cpp	65;"	d	file:
NORMAL	primitives/transaction.h	/^    NORMAL      =   0,$/;"	e	enum:TransactionType
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	secp256k1/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	secp256k1/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NO_THREAD_SAFETY_ANALYSIS	leveldb/port/thread_annotations.h	57;"	d
NO_THREAD_SAFETY_ANALYSIS	threadsafety.h	33;"	d
NO_THREAD_SAFETY_ANALYSIS	threadsafety.h	52;"	d
NUM_LIMBS	secp256k1/src/num_gmp.h	12;"	d
NUM_MULTIPLES_1BTC	test/compress_tests.cpp	20;"	d	file:
NUM_MULTIPLES_50BTC	test/compress_tests.cpp	23;"	d	file:
NUM_MULTIPLES_CENT	test/compress_tests.cpp	17;"	d	file:
NUM_MULTIPLES_UNIT	test/compress_tests.cpp	14;"	d	file:
NUM_SIMULATION_ITERATIONS	test/coins_tests.cpp	/^static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;$/;"	v	file:
NUM_TESTS	test/mruset_tests.cpp	15;"	d	file:
Name	leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_comparator_t
Name	leveldb/db/c.cc	/^  virtual const char* Name() const {$/;"	f	struct:leveldb_filterpolicy_t
Name	leveldb/db/dbformat.cc	/^const char* InternalFilterPolicy::Name() const {$/;"	f	class:leveldb::InternalFilterPolicy
Name	leveldb/db/dbformat.cc	/^const char* InternalKeyComparator::Name() const {$/;"	f	class:leveldb::InternalKeyComparator
Name	leveldb/table/filter_block_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::TestHashFilter
Name	leveldb/table/table_test.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon33::ReverseKeyComparator
Name	leveldb/util/bloom.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon40::BloomFilterPolicy
Name	leveldb/util/comparator.cc	/^  virtual const char* Name() const {$/;"	f	class:leveldb::__anon44::BytewiseComparatorImpl
NativeSecp256k1	secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^public class NativeSecp256k1 {$/;"	c
NeedsCompaction	leveldb/db/version_set.h	/^  bool NeedsCompaction() const {$/;"	f	class:leveldb::VersionSet
NegateSignatureS	test/script_tests.cpp	/^void static NegateSignatureS(std::vector<unsigned char>& vchSig) {$/;"	f	file:
Network	chainparamsbase.h	/^    enum Network {$/;"	g	class:CBaseChainParams
Network	netbase.h	/^enum Network$/;"	g
NetworkErrorString	netbase.cpp	/^std::string NetworkErrorString(int err)$/;"	f
NetworkIDString	chainparams.h	/^    std::string NetworkIDString() const { return strNetworkID; }$/;"	f	class:CChainParams
NetworkIdFromCommandLine	chainparamsbase.cpp	/^CBaseChainParams::Network NetworkIdFromCommandLine()$/;"	f
Neuter	key.cpp	/^CExtPubKey CExtKey::Neuter() const {$/;"	f	class:CExtKey
New	leveldb/db/snapshot.h	/^  const SnapshotImpl* New(SequenceNumber seq) {$/;"	f	class:leveldb::SnapshotList
NewBloomFilterPolicy	leveldb/util/bloom.cc	/^const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {$/;"	f	namespace:leveldb
NewConcatenatingIterator	leveldb/db/version_set.cc	/^Iterator* Version::NewConcatenatingIterator(const ReadOptions& options,$/;"	f	class:leveldb::Version
NewDB	leveldb/db/db_impl.cc	/^Status DBImpl::NewDB() {$/;"	f	class:leveldb::DBImpl
NewDB	leveldb/table/table_test.cc	/^  void NewDB() {$/;"	f	class:leveldb::DBConstructor	file:
NewDBIterator	leveldb/db/db_iter.cc	/^Iterator* NewDBIterator($/;"	f	namespace:leveldb
NewEmptyIterator	leveldb/table/iterator.cc	/^Iterator* NewEmptyIterator() {$/;"	f	namespace:leveldb
NewErrorIterator	leveldb/table/iterator.cc	/^Iterator* NewErrorIterator(const Status& status) {$/;"	f	namespace:leveldb
NewFileNumber	leveldb/db/version_set.h	/^  uint64_t NewFileNumber() { return next_file_number_++; }$/;"	f	class:leveldb::VersionSet
NewId	leveldb/util/cache.cc	/^  virtual uint64_t NewId() {$/;"	f	class:leveldb::__anon39::ShardedLRUCache
NewInternalIterator	leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewInternalIterator(const ReadOptions& options,$/;"	f	class:leveldb::DBImpl
NewIterator	leveldb/db/db_impl.cc	/^Iterator* DBImpl::NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::DBImpl
NewIterator	leveldb/db/db_test.cc	/^  virtual Iterator* NewIterator(const ReadOptions& options) {$/;"	f	class:leveldb::ModelDB
NewIterator	leveldb/db/memtable.cc	/^Iterator* MemTable::NewIterator() {$/;"	f	class:leveldb::MemTable
NewIterator	leveldb/db/table_cache.cc	/^Iterator* TableCache::NewIterator(const ReadOptions& options,$/;"	f	class:leveldb::TableCache
NewIterator	leveldb/table/block.cc	/^Iterator* Block::NewIterator(const Comparator* cmp) {$/;"	f	class:leveldb::Block
NewIterator	leveldb/table/table.cc	/^Iterator* Table::NewIterator(const ReadOptions& options) const {$/;"	f	class:leveldb::Table
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::BlockConstructor
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::DBConstructor
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::MemTableConstructor
NewIterator	leveldb/table/table_test.cc	/^  virtual Iterator* NewIterator() const {$/;"	f	class:leveldb::TableConstructor
NewIterator	leveldbwrapper.h	/^    leveldb::Iterator* NewIterator()$/;"	f	class:CLevelDBWrapper
NewKeyPool	wallet/wallet.cpp	/^bool CWallet::NewKeyPool()$/;"	f	class:CWallet
NewLRUCache	leveldb/util/cache.cc	/^Cache* NewLRUCache(size_t capacity) {$/;"	f	namespace:leveldb
NewLogger	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
NewLogger	leveldb/include/leveldb/env.h	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::EnvWrapper
NewLogger	leveldb/util/env_posix.cc	/^  virtual Status NewLogger(const std::string& fname, Logger** result) {$/;"	f	class:leveldb::__anon42::PosixEnv
NewLogger	leveldb/util/env_win.cc	/^Status Win32Env::NewLogger( const std::string& fname, Logger** result )$/;"	f	class:leveldb::Win32::Win32Env
NewMemEnv	leveldb/helpers/memenv/memenv.cc	/^Env* NewMemEnv(Env* base_env) {$/;"	f	namespace:leveldb
NewMergingIterator	leveldb/table/merger.cc	/^Iterator* NewMergingIterator(const Comparator* cmp, Iterator** list, int n) {$/;"	f	namespace:leveldb
NewNode	leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::NewNode(const Key& key, int height) {$/;"	f	class:leveldb::SkipList
NewRandomAccessFile	leveldb/db/db_test.cc	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewRandomAccessFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon26::InMemoryEnv
NewRandomAccessFile	leveldb/include/leveldb/env.h	/^  Status NewRandomAccessFile(const std::string& f, RandomAccessFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewRandomAccessFile	leveldb/util/env_posix.cc	/^  virtual Status NewRandomAccessFile(const std::string& fname,$/;"	f	class:leveldb::__anon42::PosixEnv
NewRandomAccessFile	leveldb/util/env_win.cc	/^Status Win32Env::NewRandomAccessFile( const std::string& fname, RandomAccessFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewSequentialFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon26::InMemoryEnv
NewSequentialFile	leveldb/include/leveldb/env.h	/^  Status NewSequentialFile(const std::string& f, SequentialFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewSequentialFile	leveldb/util/env_posix.cc	/^  virtual Status NewSequentialFile(const std::string& fname,$/;"	f	class:leveldb::__anon42::PosixEnv
NewSequentialFile	leveldb/util/env_win.cc	/^Status Win32Env::NewSequentialFile( const std::string& fname, SequentialFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewTableIterator	leveldb/db/repair.cc	/^  Iterator* NewTableIterator(const FileMetaData& meta) {$/;"	f	class:leveldb::__anon17::Repairer	file:
NewTwoLevelIterator	leveldb/table/two_level_iterator.cc	/^Iterator* NewTwoLevelIterator($/;"	f	namespace:leveldb
NewTx	policy/fees.cpp	/^unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)$/;"	f	class:TxConfirmStats
NewWritableFile	leveldb/db/db_test.cc	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::SpecialEnv
NewWritableFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon26::InMemoryEnv
NewWritableFile	leveldb/include/leveldb/env.h	/^  Status NewWritableFile(const std::string& f, WritableFile** r) {$/;"	f	class:leveldb::EnvWrapper
NewWritableFile	leveldb/util/env_posix.cc	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::__anon42::PosixEnv
NewWritableFile	leveldb/util/env_win.cc	/^Status Win32Env::NewWritableFile( const std::string& fname, WritableFile** result )$/;"	f	class:leveldb::Win32::Win32Env
NewWritableFile	leveldb/util/testutil.h	/^  virtual Status NewWritableFile(const std::string& fname,$/;"	f	class:leveldb::test::ErrorEnv
NewestFirst	leveldb/db/version_set.cc	/^static bool NewestFirst(FileMetaData* a, FileMetaData* b) {$/;"	f	namespace:leveldb
Next	chain.h	/^    CBlockIndex *Next(const CBlockIndex *pindex) const {$/;"	f	class:CChain
Next	leveldb/db/db_iter.cc	/^void DBIter::Next() {$/;"	f	class:leveldb::__anon22::DBIter
Next	leveldb/db/db_test.cc	/^    virtual void Next() { ++iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Next	leveldb/db/memtable.cc	/^  virtual void Next() { iter_.Next(); }$/;"	f	class:leveldb::MemTableIterator
Next	leveldb/db/skiplist.h	/^  Node* Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
Next	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Next() {$/;"	f	class:leveldb::SkipList::Iterator
Next	leveldb/db/version_set.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Next	leveldb/table/block.cc	/^  virtual void Next() {$/;"	f	class:leveldb::Block::Iter
Next	leveldb/table/iterator.cc	/^  virtual void Next() { assert(false); }$/;"	f	class:leveldb::__anon29::EmptyIterator
Next	leveldb/table/iterator_wrapper.h	/^  void Next()               { assert(iter_); iter_->Next();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Next	leveldb/table/merger.cc	/^  virtual void Next() {$/;"	f	class:leveldb::__anon28::MergingIterator
Next	leveldb/table/table_test.cc	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:leveldb::KeyConvertingIterator
Next	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Next() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
Next	leveldb/util/random.h	/^  uint32_t Next() {$/;"	f	class:leveldb::Random
NextEntryOffset	leveldb/table/block.cc	/^  inline uint32_t NextEntryOffset() const {$/;"	f	class:leveldb::Block::Iter	file:
NextLength	leveldb/util/bloom_test.cc	/^static int NextLength(int length) {$/;"	f	namespace:leveldb
NoBarrier_Load	leveldb/port/atomic_pointer.h	/^  inline void* NoBarrier_Load() const { return rep_; }$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Load	leveldb/port/port_win.cc	/^void* AtomicPointer::NoBarrier_Load() const {$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Next	leveldb/db/skiplist.h	/^  Node* NoBarrier_Next(int n) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_SetNext	leveldb/db/skiplist.h	/^  void NoBarrier_SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
NoBarrier_Store	leveldb/port/atomic_pointer.h	/^  inline void NoBarrier_Store(void* v) { rep_ = v; }$/;"	f	class:leveldb::port::AtomicPointer
NoBarrier_Store	leveldb/port/port_win.cc	/^void AtomicPointer::NoBarrier_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
NoOpLogger	leveldb/helpers/memenv/memenv.cc	/^class NoOpLogger : public Logger {$/;"	c	namespace:leveldb::__anon26	file:
Node	leveldb/db/skiplist.h	/^  explicit Node(const Key& k) : key(k) { }$/;"	f	struct:leveldb::SkipList::Node
Node	leveldb/db/skiplist.h	/^struct SkipList<Key,Comparator>::Node {$/;"	s	class:leveldb::SkipList
NodeId	net.h	/^typedef int NodeId;$/;"	t
NormalHandlerCheckValidFixture	test/handler_normal.cpp	/^    NormalHandlerCheckValidFixture()$/;"	f	struct:NormalHandlerCheckValidFixture
NormalHandlerCheckValidFixture	test/handler_normal.cpp	/^struct NormalHandlerCheckValidFixture : public NormalHandlerFixture$/;"	s	file:
NormalHandlerFixture	test/handler_normal.cpp	/^    NormalHandlerFixture()$/;"	f	struct:NormalHandlerFixture
NormalHandlerFixture	test/handler_normal.cpp	/^struct NormalHandlerFixture : public TestingSetup$/;"	s	file:
NotFound	leveldb/include/leveldb/status.h	/^  static Status NotFound(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
NotSupported	leveldb/include/leveldb/status.h	/^  static Status NotSupported(const Slice& msg, const Slice& msg2 = Slice()) {$/;"	f	class:leveldb::Status
Notify	alert.cpp	/^CAlert::Notify(const std::string& strMessage, bool fThread)$/;"	f	class:CAlert
NotifyAddressBookChanged	wallet/wallet.h	/^            ChangeType status)> NotifyAddressBookChanged;$/;"	m	class:CWallet
NotifyAlertChanged	ui_interface.h	/^    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;$/;"	m	class:CClientUIInterface
NotifyBlockTip	ui_interface.h	/^    boost::signals2::signal<void (const uint256& hash)> NotifyBlockTip;$/;"	m	class:CClientUIInterface
NotifyNumConnectionsChanged	ui_interface.h	/^    boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;$/;"	m	class:CClientUIInterface
NotifyStatusChanged	wallet/crypter.h	/^    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;$/;"	m	class:CCryptoKeyStore
NotifyTransactionChanged	wallet/wallet.h	/^            ChangeType status)> NotifyTransactionChanged;$/;"	m	class:CWallet
NotifyWatchonlyChanged	wallet/wallet.h	/^    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;$/;"	m	class:CWallet
NowMicros	leveldb/include/leveldb/env.h	/^  uint64_t NowMicros() {$/;"	f	class:leveldb::EnvWrapper
NowMicros	leveldb/util/env_posix.cc	/^  virtual uint64_t NowMicros() {$/;"	f	class:leveldb::__anon42::PosixEnv
NowMicros	leveldb/util/env_win.cc	/^uint64_t Win32Env::NowMicros()$/;"	f	class:leveldb::Win32::Win32Env
Num	test/script_tests.cpp	/^    TestBuilder& Num(int num)$/;"	f	class:__anon94::TestBuilder
NumEntries	leveldb/table/table_builder.cc	/^uint64_t TableBuilder::NumEntries() const {$/;"	f	class:leveldb::TableBuilder
NumFiles	leveldb/db/version_set.h	/^  int NumFiles(int level) const { return files_[level].size(); }$/;"	f	class:leveldb::Version
NumLevelBytes	leveldb/db/version_set.cc	/^int64_t VersionSet::NumLevelBytes(int level) const {$/;"	f	class:leveldb::VersionSet
NumLevelFiles	leveldb/db/version_set.cc	/^int VersionSet::NumLevelFiles(int level) const {$/;"	f	class:leveldb::VersionSet
NumOfCoins	cache.cpp	/^int64_t ColorLicense::NumOfCoins(const type_Color &color) const$/;"	f	class:color_license::ColorLicense
NumOfMembers	cache.h	/^    inline size_t NumOfMembers() const$/;"	f	class:alliance_member::AllianceMember
NumOfMined	cache.cpp	/^unsigned int BlockMiner::NumOfMined(string addr, unsigned int nAlliance) const$/;"	f	class:block_miner::BlockMiner
NumOfMined	main.cpp	/^unsigned int NumOfMined(const CBlock& block, unsigned int nAlliance)$/;"	f
NumRestarts	leveldb/table/block.cc	/^inline uint32_t Block::NumRestarts() const {$/;"	f	class:leveldb::Block
NumTableFilesAtLevel	leveldb/db/db_test.cc	/^  int NumTableFilesAtLevel(int level) {$/;"	f	class:leveldb::DBTest
NumberString	leveldb/db/log_test.cc	/^static std::string NumberString(int n) {$/;"	f	namespace:leveldb::log
NumberToString	leveldb/util/logging.cc	/^std::string NumberToString(uint64_t num) {$/;"	f	namespace:leveldb
OBJCXX	Makefile	/^OBJCXX = g++$/;"	m
OBJCXXDEPMODE	Makefile	/^OBJCXXDEPMODE = depmode=gcc3$/;"	m
OBJCXXFLAGS	Makefile	/^OBJCXXFLAGS = -g -O2 -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter  -Wstack-protector -fstack-protector-all -fPIE$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	secp256k1/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OBJEXT	secp256k1/Makefile	/^OBJEXT = o$/;"	m
OK	leveldb/include/leveldb/status.h	/^  static Status OK() { return Status(); }$/;"	f	class:leveldb::Status
ONCE	policy/licenseinfo.h	/^    ONCE,$/;"	e	enum:MintSchedule
OPT	leveldb/Makefile	/^OPT ?= -O2 -DNDEBUG$/;"	m
OP_0	script/script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	script/script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_1	script/script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_10	script/script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_11	script/script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_12	script/script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_13	script/script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_14	script/script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_15	script/script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_16	script/script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_1ADD	script/script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1NEGATE	script/script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1SUB	script/script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_2	script/script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2DIV	script/script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DROP	script/script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DUP	script/script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2MUL	script/script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2OVER	script/script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2ROT	script/script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2SWAP	script/script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_3	script/script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3DUP	script/script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_4	script/script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_5	script/script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_6	script/script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_7	script/script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_8	script/script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_9	script/script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_ABS	script/script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ADD	script/script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_AND	script/script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_BOOLAND	script/script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLOR	script/script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_CAT	script/script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	script/script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	script/script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKSIG	script/script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	script/script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	script/script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_DEPTH	script/script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DIV	script/script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DROP	script/script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DUP	script/script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_ELSE	script/script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ENDIF	script/script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_EQUAL	script/script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	script/script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_FALSE	script/script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	script/script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_GREATERTHAN	script/script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	script/script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_HASH160	script/script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH256	script/script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_IF	script/script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IFDUP	script/script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	script/script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	script/script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_LEFT	script/script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LESSTHAN	script/script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	script/script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LSHIFT	script/script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_MAX	script/script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MIN	script/script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MOD	script/script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MUL	script/script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_NEGATE	script/script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NIP	script/script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NOP	script/script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP1	script/script.h	/^    OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP10	script/script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP2	script/script.h	/^    OP_NOP2 = 0xb1,$/;"	e	enum:opcodetype
OP_NOP3	script/script.h	/^    OP_NOP3 = 0xb2,$/;"	e	enum:opcodetype
OP_NOP4	script/script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP5	script/script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP6	script/script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP7	script/script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP8	script/script.h	/^    OP_NOP8 = 0xb7,$/;"	e	enum:opcodetype
OP_NOP9	script/script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOT	script/script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOTIF	script/script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NUMEQUAL	script/script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	script/script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	script/script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_OR	script/script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OVER	script/script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_PICK	script/script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PUBKEY	script/script.h	/^    OP_PUBKEY = 0xfe,$/;"	e	enum:opcodetype
OP_PUBKEYHASH	script/script.h	/^    OP_PUBKEYHASH = 0xfd,$/;"	e	enum:opcodetype
OP_PUBKEYS	script/script.h	/^    OP_PUBKEYS = 0xfb,$/;"	e	enum:opcodetype
OP_PUSHDATA1	script/script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA2	script/script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA4	script/script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_RESERVED	script/script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED1	script/script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED2	script/script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RETURN	script/script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RIGHT	script/script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIPEMD160	script/script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_ROLL	script/script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROT	script/script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_RSHIFT	script/script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_SHA1	script/script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA256	script/script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SIZE	script/script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SMALLDATA	script/script.h	/^    OP_SMALLDATA = 0xf9,$/;"	e	enum:opcodetype
OP_SMALLINTEGER	script/script.h	/^    OP_SMALLINTEGER = 0xfa,$/;"	e	enum:opcodetype
OP_SUB	script/script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUBSTR	script/script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SWAP	script/script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_TOALTSTACK	script/script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TRUE	script/script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	script/script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_VER	script/script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VERIF	script/script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIFY	script/script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERNOTIF	script/script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_WITHIN	script/script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_XOR	script/script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
ORDER	primitives/transaction.h	/^    ORDER,$/;"	e	enum:TransactionType
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL	secp256k1/Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
OTOOL64	secp256k1/Makefile	/^OTOOL64 = $/;"	m
OUTPUT_SIZE	crypto/hmac_sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CHMAC_SHA256
OUTPUT_SIZE	crypto/hmac_sha512.h	/^    static const size_t OUTPUT_SIZE = 64;$/;"	m	class:CHMAC_SHA512
OUTPUT_SIZE	crypto/ripemd160.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CRIPEMD160
OUTPUT_SIZE	crypto/sha1.h	/^    static const size_t OUTPUT_SIZE = 20;$/;"	m	class:CSHA1
OUTPUT_SIZE	crypto/sha256.h	/^    static const size_t OUTPUT_SIZE = 32;$/;"	m	class:CSHA256
OUTPUT_SIZE	crypto/sha512.h	/^    static const size_t OUTPUT_SIZE = 64;$/;"	m	class:CSHA512
OUTPUT_SIZE	hash.h	/^    static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;$/;"	m	class:CHash160
OUTPUT_SIZE	hash.h	/^    static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;$/;"	m	class:CHash256
Obj_member_type	json/json_spirit_writer_template.h	/^        typedef typename Object_type::value_type Obj_member_type;$/;"	t	class:json_spirit::Generator
Object	json/json_spirit_value.h	/^        typedef typename Config::Object_type Object;$/;"	t	class:json_spirit::Value_impl
Object	json/json_spirit_value.h	/^    typedef Config::Object_type Object;$/;"	t	namespace:json_spirit
Object_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::Object_type Object_type;$/;"	t	class:json_spirit::Semantic_actions
Object_type	json/json_spirit_value.h	/^        typedef std::map< String_type, Value_type > Object_type;$/;"	t	struct:json_spirit::Config_map
Object_type	json/json_spirit_value.h	/^        typedef std::vector< Pair_type > Object_type;$/;"	t	struct:json_spirit::Config_vector
Object_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::Object_type Object_type;$/;"	t	class:json_spirit::Generator
OldInfoLogFileName	leveldb/db/filename.cc	/^std::string OldInfoLogFileName(const std::string& dbname) {$/;"	f	namespace:leveldb
OnPostCommand	rpcserver.cpp	/^void RPCServer::OnPostCommand(boost::function<void (const CRPCCommand&)> slot)$/;"	f	class:RPCServer
OnPreCommand	rpcserver.cpp	/^void RPCServer::OnPreCommand(boost::function<void (const CRPCCommand&)> slot)$/;"	f	class:RPCServer
OnRPCPreCommand	init.cpp	/^void OnRPCPreCommand(const CRPCCommand& cmd)$/;"	f
OnRPCStopped	init.cpp	/^void OnRPCStopped()$/;"	f
OnStarted	rpcserver.cpp	/^void RPCServer::OnStarted(boost::function<void ()> slot)$/;"	f	class:RPCServer
OnStopped	rpcserver.cpp	/^void RPCServer::OnStopped(boost::function<void ()> slot)$/;"	f	class:RPCServer
OnceType	leveldb/port/port_example.h	/^typedef intptr_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	leveldb/port/port_posix.h	/^typedef pthread_once_t OnceType;$/;"	t	namespace:leveldb::port
OnceType	leveldb/port/port_win.h	/^    OnceType(bool f) : init_(f) {}$/;"	f	class:leveldb::port::OnceType
OnceType	leveldb/port/port_win.h	/^    OnceType(const OnceType &once) : init_(once.init_) {}$/;"	f	class:leveldb::port::OnceType
OnceType	leveldb/port/port_win.h	/^class OnceType {$/;"	c	namespace:leveldb::port
OneArray	test/arith_uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneArray	test/uint256_tests.cpp	/^const unsigned char OneArray[] =$/;"	v
OneIn	leveldb/util/random.h	/^  bool OneIn(int n) { return (Next() % n) == 0; }$/;"	f	class:leveldb::Random
OneL	test/arith_uint256_tests.cpp	/^const arith_uint256 OneL = arith_uint256V(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneL	test/uint256_tests.cpp	/^const uint256 OneL = uint256(std::vector<unsigned char>(OneArray,OneArray+32));$/;"	v
OneS	test/uint256_tests.cpp	/^const uint160 OneS = uint160(std::vector<unsigned char>(OneArray,OneArray+20));$/;"	v
Open	leveldb/db/db_bench.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark	file:
Open	leveldb/db/db_impl.cc	/^Status DB::Open(const Options& options, const std::string& dbname,$/;"	f	class:leveldb::DB
Open	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Open() {$/;"	f	class:leveldb::Benchmark
Open	leveldb/doc/bench/db_bench_tree_db.cc	/^    void Open(bool sync) {$/;"	f	class:leveldb::Benchmark	file:
Open	leveldb/table/table.cc	/^Status Table::Open(const Options& options,$/;"	f	class:leveldb::Table
Open	net.cpp	/^void CNetRecorder::CFileWriter::Open(boost::filesystem::path path)$/;"	f	class:CNetRecorder::CFileWriter
Open	wallet/db.cpp	/^bool CDBEnv::Open(const boost::filesystem::path& pathIn)$/;"	f	class:CDBEnv
OpenBlockFile	main.cpp	/^FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly)$/;"	f
OpenCompactionOutputFile	leveldb/db/db_impl.cc	/^Status DBImpl::OpenCompactionOutputFile(CompactionState* compact) {$/;"	f	class:leveldb::DBImpl
OpenDiskFile	main.cpp	/^FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)$/;"	f
OpenNetworkConnection	net.cpp	/^bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot)$/;"	f
OpenUndoFile	main.cpp	/^FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly)$/;"	f
OptionConfig	leveldb/db/db_test.cc	/^  enum OptionConfig {$/;"	g	class:leveldb::DBTest	file:
Options	leveldb/include/leveldb/options.h	/^struct Options {$/;"	s	namespace:leveldb
Options	leveldb/util/options.cc	/^Options::Options()$/;"	f	class:leveldb::Options
Order	leveldb/doc/bench/db_bench_sqlite3.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
Order	leveldb/doc/bench/db_bench_tree_db.cc	/^  enum Order {$/;"	g	class:leveldb::Benchmark	file:
OrderList	cache.h	/^    OrderList()$/;"	f	class:order_list::OrderList
OrderList	cache.h	/^class OrderList : public CacheInterface<Tc_t, Te_t>$/;"	c	namespace:order_list
OrderedTxItems	wallet/wallet.cpp	/^CWallet::TxItems CWallet::OrderedTxItems(list<CAccountingEntry>& acentries, string strAccount)$/;"	f	class:CWallet
Output	leveldb/db/db_impl.cc	/^  struct Output {$/;"	s	struct:leveldb::DBImpl::CompactionState	file:
OverlapInLevel	leveldb/db/version_set.cc	/^bool Version::OverlapInLevel(int level,$/;"	f	class:leveldb::Version
Overlaps	leveldb/db/version_set_test.cc	/^  bool Overlaps(const char* smallest, const char* largest) {$/;"	f	class:leveldb::FindFileTest
Owner_	cache.h	/^    Owner_() : address_(""), num_of_coins_(0) {}$/;"	f	struct:color_license::Owner_
Owner_	cache.h	/^struct Owner_$/;"	s	namespace:color_license
PACKAGE	Makefile	/^PACKAGE = gcoin$/;"	m
PACKAGE	secp256k1/Makefile	/^PACKAGE = libsecp256k1$/;"	m
PACKAGE	secp256k1/src/libsecp256k1-config.h	61;"	d
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = https:\/\/github.com\/OpenNetworking\/gcoin-community\/issues$/;"	m
PACKAGE_BUGREPORT	config/bitcoin-config.h	294;"	d
PACKAGE_BUGREPORT	secp256k1/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	secp256k1/src/libsecp256k1-config.h	64;"	d
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = Gcoin Core$/;"	m
PACKAGE_NAME	config/bitcoin-config.h	297;"	d
PACKAGE_NAME	secp256k1/Makefile	/^PACKAGE_NAME = libsecp256k1$/;"	m
PACKAGE_NAME	secp256k1/src/libsecp256k1-config.h	67;"	d
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = Gcoin Core 1.1.2$/;"	m
PACKAGE_STRING	config/bitcoin-config.h	300;"	d
PACKAGE_STRING	secp256k1/Makefile	/^PACKAGE_STRING = libsecp256k1 0.1$/;"	m
PACKAGE_STRING	secp256k1/src/libsecp256k1-config.h	70;"	d
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = gcoin$/;"	m
PACKAGE_TARNAME	config/bitcoin-config.h	303;"	d
PACKAGE_TARNAME	secp256k1/Makefile	/^PACKAGE_TARNAME = libsecp256k1$/;"	m
PACKAGE_TARNAME	secp256k1/src/libsecp256k1-config.h	73;"	d
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config/bitcoin-config.h	306;"	d
PACKAGE_URL	secp256k1/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	secp256k1/src/libsecp256k1-config.h	76;"	d
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.1.2$/;"	m
PACKAGE_VERSION	config/bitcoin-config.h	309;"	d
PACKAGE_VERSION	secp256k1/Makefile	/^PACKAGE_VERSION = 0.1$/;"	m
PACKAGE_VERSION	secp256k1/src/libsecp256k1-config.h	79;"	d
PAIRTYPE	utilstrencodings.h	23;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	secp256k1/Makefile	/^PATH_SEPARATOR = :$/;"	m
PING_INTERVAL	net.h	/^static const int PING_INTERVAL = 2 * 60;$/;"	v
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	secp256k1/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_LIBDIR	secp256k1/Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = $/;"	m
PKG_CONFIG_PATH	secp256k1/Makefile	/^PKG_CONFIG_PATH = $/;"	m
PLATFORMSROOT	leveldb/Makefile	/^PLATFORMSROOT=\/Applications\/Xcode.app\/Contents\/Developer\/Platforms$/;"	m
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	10;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	14;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	20;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	22;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	28;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	30;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	36;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	50;"	d
PLATFORM_IS_LITTLE_ENDIAN	leveldb/port/port_posix.h	82;"	d
PORT	Makefile	/^PORT = $/;"	m
PORT	secp256k1/Makefile	/^PORT = $/;"	m
PORT_ATOMIC_POINTER_H_	leveldb/port/atomic_pointer.h	19;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	secp256k1/Makefile	/^POST_INSTALL = :$/;"	m
POST_READ_SIZE	rpcprotocol.cpp	/^const size_t POST_READ_SIZE = 256 * 1024;$/;"	v
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	secp256k1/Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	secp256k1/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	secp256k1/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIO_MAX	compat.h	83;"	d
PRI_SPACING	policy/fees.h	/^static const double PRI_SPACING = 2;$/;"	v
PROCESS_DEP_ENABLE	init.cpp	643;"	d	file:
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROGRAMS	leveldb/Makefile	/^PROGRAMS = db_bench leveldbutil $(TESTS)$/;"	m
PROGRAMS	secp256k1/Makefile	/^PROGRAMS = $(noinst_PROGRAMS)$/;"	m
PROTECTION_LEVEL_UNRESTRICTED	net.cpp	43;"	d	file:
PROTOCOL_VERSION	version.h	/^static const int PROTOCOL_VERSION = 70002;$/;"	v
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS = $/;"	m
PT_GUARDED_BY	threadsafety.h	20;"	d
PT_GUARDED_BY	threadsafety.h	39;"	d
PT_GUARDED_VAR	threadsafety.h	21;"	d
PT_GUARDED_VAR	threadsafety.h	40;"	d
PUBKEY_ADDRESS	chainparams.h	/^        PUBKEY_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
PackSequenceAndType	leveldb/db/dbformat.cc	/^static uint64_t PackSequenceAndType(uint64_t seq, ValueType t) {$/;"	f	namespace:leveldb
Pair	json/json_spirit_value.h	/^    typedef Config::Pair_type   Pair;$/;"	t	namespace:json_spirit
Pair_impl	json/json_spirit_value.h	/^    Pair_impl< Config >::Pair_impl( const String_type& name, const Value_type& value )$/;"	f	class:json_spirit::Pair_impl
Pair_impl	json/json_spirit_value.h	/^    struct Pair_impl$/;"	s	namespace:json_spirit
Pair_type	json/json_spirit_value.h	/^        typedef Pair_impl < Config_vector > Pair_type;$/;"	t	struct:json_spirit::Config_vector
Pair_type	json/json_spirit_value.h	/^        typedef typename Object_type::value_type Pair_type;$/;"	t	struct:json_spirit::Config_map
Params	chainparams.cpp	/^CChainParams &Params(CBaseChainParams::Network network) {$/;"	f
Params	chainparams.cpp	/^const CChainParams &Params()$/;"	f
Params	consensus/params.h	/^struct Params {$/;"	s	namespace:Consensus
ParseDataFormat	rest.cpp	/^static enum RetFormat ParseDataFormat(vector<string>& params, const string strReq)$/;"	f	file:
ParseEndpoint	rpcserver.cpp	/^static ip::tcp::endpoint ParseEndpoint(const std::string &strEndpoint, int defaultPort)$/;"	f	file:
ParseFileName	leveldb/db/filename.cc	/^bool ParseFileName(const std::string& fname,$/;"	f	namespace:leveldb
ParseHashO	rpcserver.cpp	/^uint256 ParseHashO(const Object& o, string strKey)$/;"	f
ParseHashStr	core_read.cpp	/^uint256 ParseHashStr(const std::string& strHex, const std::string& strName)$/;"	f
ParseHashStr	rest.cpp	/^static bool ParseHashStr(const string& strReq, uint256& v)$/;"	f	file:
ParseHashUV	core_read.cpp	/^uint256 ParseHashUV(const UniValue& v, const std::string& strName)$/;"	f
ParseHashV	rpcserver.cpp	/^uint256 ParseHashV(const Value& v, string strName)$/;"	f
ParseHex	utilstrencodings.cpp	/^vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	utilstrencodings.cpp	/^vector<unsigned char> ParseHex(const string& str)$/;"	f
ParseHexO	rpcserver.cpp	/^vector<unsigned char> ParseHexO(const Object& o, string strKey)$/;"	f
ParseHexUV	core_read.cpp	/^std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)$/;"	f
ParseHexV	rpcserver.cpp	/^vector<unsigned char> ParseHexV(const Value& v, string strName)$/;"	f
ParseHex_expected	test/util_tests.cpp	/^static const unsigned char ParseHex_expected[65] = {$/;"	v	file:
ParseInt32	utilstrencodings.cpp	/^bool ParseInt32(const std::string& str, int32_t *out)$/;"	f
ParseInternalKey	leveldb/db/dbformat.h	/^inline bool ParseInternalKey(const Slice& internal_key,$/;"	f	namespace:leveldb
ParseKey	leveldb/db/db_iter.cc	/^inline bool DBIter::ParseKey(ParsedInternalKey* ikey) {$/;"	f	class:leveldb::__anon22::DBIter
ParseMoney	utilmoneystr.cpp	/^bool ParseMoney(const char* pszIn, CAmount& nRet)$/;"	f
ParseMoney	utilmoneystr.cpp	/^bool ParseMoney(const string& str, CAmount& nRet)$/;"	f
ParseNetwork	netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
ParseNextKey	leveldb/table/block.cc	/^  bool ParseNextKey() {$/;"	f	class:leveldb::Block::Iter	file:
ParseParameters	util.cpp	/^void ParseParameters(int argc, const char* const argv[])$/;"	f
ParseScript	core_read.cpp	/^CScript ParseScript(std::string s)$/;"	f
ParseScriptFlags	test/transaction_tests.cpp	/^unsigned int ParseScriptFlags(string strFlags)$/;"	f
ParsedInternalKey	leveldb/db/dbformat.h	/^  ParsedInternalKey() { }  \/\/ Intentionally left uninitialized (for speed)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	leveldb/db/dbformat.h	/^  ParsedInternalKey(const Slice& u, const SequenceNumber& seq, ValueType t)$/;"	f	struct:leveldb::ParsedInternalKey
ParsedInternalKey	leveldb/db/dbformat.h	/^struct ParsedInternalKey {$/;"	s	namespace:leveldb
PartitionCheck	main.cpp	/^void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader,$/;"	f
Percentile	leveldb/util/histogram.cc	/^double Histogram::Percentile(double p) const {$/;"	f	class:leveldb::Histogram
PickCompaction	leveldb/db/version_set.cc	/^Compaction* VersionSet::PickCompaction() {$/;"	f	class:leveldb::VersionSet
PickLevelForMemTableOutput	leveldb/db/version_set.cc	/^int Version::PickLevelForMemTableOutput($/;"	f	class:leveldb::Version
PickRandomKey	leveldb/table/table_test.cc	/^  std::string PickRandomKey(Random* rnd, const std::vector<std::string>& keys) {$/;"	f	class:leveldb::Harness
PosixEnv	leveldb/util/env_posix.cc	/^PosixEnv::PosixEnv() : started_bgthread_(false) {$/;"	f	class:leveldb::__anon42::PosixEnv
PosixEnv	leveldb/util/env_posix.cc	/^class PosixEnv : public Env {$/;"	c	namespace:leveldb::__anon42	file:
PosixFileLock	leveldb/util/env_posix.cc	/^class PosixFileLock : public FileLock {$/;"	c	namespace:leveldb::__anon42	file:
PosixLockTable	leveldb/util/env_posix.cc	/^class PosixLockTable {$/;"	c	namespace:leveldb::__anon42	file:
PosixLogger	leveldb/util/posix_logger.h	/^  PosixLogger(FILE* f, uint64_t (*gettid)()) : file_(f), gettid_(gettid) { }$/;"	f	class:leveldb::PosixLogger
PosixLogger	leveldb/util/posix_logger.h	/^class PosixLogger : public Logger {$/;"	c	namespace:leveldb
PosixMmapReadableFile	leveldb/util/env_posix.cc	/^  PosixMmapReadableFile(const std::string& fname, void* base, size_t length,$/;"	f	class:leveldb::__anon42::PosixMmapReadableFile
PosixMmapReadableFile	leveldb/util/env_posix.cc	/^class PosixMmapReadableFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon42	file:
PosixRandomAccessFile	leveldb/util/env_posix.cc	/^  PosixRandomAccessFile(const std::string& fname, int fd)$/;"	f	class:leveldb::__anon42::PosixRandomAccessFile
PosixRandomAccessFile	leveldb/util/env_posix.cc	/^class PosixRandomAccessFile: public RandomAccessFile {$/;"	c	namespace:leveldb::__anon42	file:
PosixSequentialFile	leveldb/util/env_posix.cc	/^  PosixSequentialFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon42::PosixSequentialFile
PosixSequentialFile	leveldb/util/env_posix.cc	/^class PosixSequentialFile: public SequentialFile {$/;"	c	namespace:leveldb::__anon42	file:
PosixWritableFile	leveldb/util/env_posix.cc	/^  PosixWritableFile(const std::string& fname, FILE* f)$/;"	f	class:leveldb::__anon42::PosixWritableFile
PosixWritableFile	leveldb/util/env_posix.cc	/^class PosixWritableFile : public WritableFile {$/;"	c	namespace:leveldb::__anon42	file:
Posn_iter_t	json/json_spirit_stream_reader.h	/^        typedef spirit_namespace::position_iterator< typename Mp_iters::Mp_iter > Posn_iter_t;$/;"	t	class:json_spirit::Stream_reader_thrower
PostCommand	rpcserver.cpp	/^    boost::signals2::signal<void (const CRPCCommand&)> PostCommand;$/;"	m	struct:CRPCSignals	file:
PreCommand	rpcserver.cpp	/^    boost::signals2::signal<void (const CRPCCommand&)> PreCommand;$/;"	m	struct:CRPCSignals	file:
Prev	leveldb/db/db_iter.cc	/^void DBIter::Prev() {$/;"	f	class:leveldb::__anon22::DBIter
Prev	leveldb/db/db_test.cc	/^    virtual void Prev() { --iter_; }$/;"	f	class:leveldb::ModelDB::ModelIter
Prev	leveldb/db/memtable.cc	/^  virtual void Prev() { iter_.Prev(); }$/;"	f	class:leveldb::MemTableIterator
Prev	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Prev() {$/;"	f	class:leveldb::SkipList::Iterator
Prev	leveldb/db/version_set.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Prev	leveldb/table/block.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::Block::Iter
Prev	leveldb/table/iterator.cc	/^  virtual void Prev() { assert(false); }$/;"	f	class:leveldb::__anon29::EmptyIterator
Prev	leveldb/table/iterator_wrapper.h	/^  void Prev()               { assert(iter_); iter_->Prev();        Update(); }$/;"	f	class:leveldb::IteratorWrapper
Prev	leveldb/table/merger.cc	/^  virtual void Prev() {$/;"	f	class:leveldb::__anon28::MergingIterator
Prev	leveldb/table/table_test.cc	/^  virtual void Prev() { iter_->Prev(); }$/;"	f	class:leveldb::KeyConvertingIterator
Prev	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Prev() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
PrevLogNumber	leveldb/db/version_set.h	/^  uint64_t PrevLogNumber() const { return prev_log_number_; }$/;"	f	class:leveldb::VersionSet
PrintContents	leveldb/db/write_batch_test.cc	/^static std::string PrintContents(WriteBatch* b) {$/;"	f	namespace:leveldb
PrintEnvironment	leveldb/db/db_bench.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintEnvironment	leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintEnvironment() {$/;"	f	class:leveldb::Benchmark	file:
PrintExceptionContinue	util.cpp	/^void PrintExceptionContinue(const std::exception* pex, const char* pszThread)$/;"	f
PrintHeader	leveldb/db/db_bench.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintHeader	leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintHeader() {$/;"	f	class:leveldb::Benchmark	file:
PrintLockContention	sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
PrintLogContents	leveldb/db/dumpfile.cc	/^Status PrintLogContents(Env* env, const std::string& fname,$/;"	f	namespace:leveldb::__anon23
PrintStats	leveldb/db/db_bench.cc	/^  void PrintStats(const char* key) {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	leveldb/db/db_bench.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrintWarnings	leveldb/doc/bench/db_bench_tree_db.cc	/^  void PrintWarnings() {$/;"	f	class:leveldb::Benchmark	file:
PrioritiseTransaction	txmempool.cpp	/^void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)$/;"	f	class:CTxMemPool
Process	wallet/wallet.cpp	/^    void Process(const CScript &script) {$/;"	f	class:CAffectedKeysVisitor
ProcessAlert	alert.cpp	/^bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread)$/;"	f	class:CAlert
ProcessBlockAvailability	main.cpp	/^void ProcessBlockAvailability(NodeId nodeid)$/;"	f	namespace:__anon47
ProcessBlockFound	miner.cpp	/^static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet)$/;"	f	file:
ProcessGetData	main.cpp	/^void static ProcessGetData(CNode* pfrom)$/;"	f	file:
ProcessMessage	main.cpp	/^bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)$/;"	f	file:
ProcessMessages	main.cpp	/^bool ProcessMessages(CNode* pfrom)$/;"	f
ProcessMessages	net.h	/^    boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;$/;"	m	struct:CNodeSignals
ProcessNewBlock	main.cpp	/^bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)$/;"	f
ProcessOneShot	net.cpp	/^void static ProcessOneShot()$/;"	f	file:
ProduceSignature	script/sign.cpp	/^bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)$/;"	f
Property	leveldb/db/corruption_test.cc	/^  int Property(const std::string& name) {$/;"	f	class:leveldb::CorruptionTest
ProxyCredentials	netbase.cpp	/^struct ProxyCredentials$/;"	s	file:
PruneAfterHeight	chainparams.h	/^    int64_t PruneAfterHeight() const { return nPruneAfterHeight; }$/;"	f	class:CChainParams
PruneAndFlush	main.cpp	/^void PruneAndFlush() {$/;"	f
PruneBlockIndexCandidates	main.cpp	/^static void PruneBlockIndexCandidates() {$/;"	f	file:
PruneOneBlockFile	main.cpp	/^void PruneOneBlockFile(const int fileNumber)$/;"	f
PruneOrphanBlocks	main.cpp	/^void static PruneOrphanBlocks()$/;"	f	file:
PthreadCall	leveldb/port/port_posix.cc	/^static void PthreadCall(const char* label, int result) {$/;"	f	namespace:leveldb::port
PthreadCall	leveldb/util/env_posix.cc	/^  void PthreadCall(const char* label, int result) {$/;"	f	class:leveldb::__anon42::PosixEnv	file:
Push	test/script_tests.cpp	/^    TestBuilder& Push(const CPubKey& pubkey)$/;"	f	class:__anon94::TestBuilder
Push	test/script_tests.cpp	/^    TestBuilder& Push(const std::string& hex)$/;"	f	class:__anon94::TestBuilder
PushAddress	net.h	/^    void PushAddress(const CAddress& addr)$/;"	f	class:CNode
PushAll	script/sign.cpp	/^static CScript PushAll(const vector<valtype>& values)$/;"	f	file:
PushGetBlocks	main.cpp	/^void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd)$/;"	f
PushInventory	net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8, const T9& a9)$/;"	f	class:CNode
PushRedeem	test/script_tests.cpp	/^    TestBuilder& PushRedeem()$/;"	f	class:__anon94::TestBuilder
PushSig	test/script_tests.cpp	/^    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)$/;"	f	class:__anon94::TestBuilder
PushVersion	net.cpp	/^void CNode::PushVersion()$/;"	f	class:CNode
Put	leveldb/db/db_impl.cc	/^Status DB::Put(const WriteOptions& opt, const Slice& key, const Slice& value) {$/;"	f	class:leveldb::DB
Put	leveldb/db/db_impl.cc	/^Status DBImpl::Put(const WriteOptions& o, const Slice& key, const Slice& val) {$/;"	f	class:leveldb::DBImpl
Put	leveldb/db/db_test.cc	/^  Status Put(const std::string& k, const std::string& v) {$/;"	f	class:leveldb::DBTest
Put	leveldb/db/db_test.cc	/^  virtual Status Put(const WriteOptions& o, const Slice& k, const Slice& v) {$/;"	f	class:leveldb::ModelDB
Put	leveldb/db/dumpfile.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon23::WriteBatchItemPrinter
Put	leveldb/db/write_batch.cc	/^  virtual void Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::__anon16::MemTableInserter
Put	leveldb/db/write_batch.cc	/^void WriteBatch::Put(const Slice& key, const Slice& value) {$/;"	f	class:leveldb::WriteBatch
PutFixed32	leveldb/util/coding.cc	/^void PutFixed32(std::string* dst, uint32_t value) {$/;"	f	namespace:leveldb
PutFixed64	leveldb/util/coding.cc	/^void PutFixed64(std::string* dst, uint64_t value) {$/;"	f	namespace:leveldb
PutLengthPrefixedSlice	leveldb/util/coding.cc	/^void PutLengthPrefixedSlice(std::string* dst, const Slice& value) {$/;"	f	namespace:leveldb
PutVarint32	leveldb/util/coding.cc	/^void PutVarint32(std::string* dst, uint32_t v) {$/;"	f	namespace:leveldb
PutVarint64	leveldb/util/coding.cc	/^void PutVarint64(std::string* dst, uint64_t v) {$/;"	f	namespace:leveldb
QueryBandwidth	net.cpp	/^json_spirit::Object CNetRecorder::QueryBandwidth($/;"	f	class:CNetRecorder
QueryRTT	net.cpp	/^json_spirit::Object CNetRecorder::QueryRTT($/;"	f	class:CNetRecorder
QueuedBlock	main.cpp	/^    struct QueuedBlock {$/;"	s	namespace:__anon46	file:
R11	crypto/ripemd160.cpp	/^void inline R11(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon5::ripemd160
R12	crypto/ripemd160.cpp	/^void inline R12(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }$/;"	f	namespace:__anon5::ripemd160
R1Array	test/arith_uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1Array	test/uint256_tests.cpp	/^const unsigned char R1Array[] =$/;"	v
R1ArrayHex	test/arith_uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1ArrayHex	test/uint256_tests.cpp	/^const char R1ArrayHex[] = "7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c";$/;"	v
R1L	test/arith_uint256_tests.cpp	/^const arith_uint256 R1L = arith_uint256V(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1L	test/uint256_tests.cpp	/^const uint256 R1L = uint256(std::vector<unsigned char>(R1Array,R1Array+32));$/;"	v
R1LLow64	test/arith_uint256_tests.cpp	/^const uint64_t R1LLow64 = 0x121156cfdb4a529cULL;$/;"	v
R1Ldouble	test/arith_uint256_tests.cpp	/^const double R1Ldouble = 0.4887374590559308955; \/\/ R1L equals roughly R1Ldouble * 2^256$/;"	v
R1LplusR2L	test/arith_uint256_tests.cpp	/^const char R1LplusR2L[] = "549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C";$/;"	v
R1S	test/uint256_tests.cpp	/^const uint160 R1S = uint160(std::vector<unsigned char>(R1Array,R1Array+20));$/;"	v
R21	crypto/ripemd160.cpp	/^void inline R21(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }$/;"	f	namespace:__anon5::ripemd160
R22	crypto/ripemd160.cpp	/^void inline R22(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }$/;"	f	namespace:__anon5::ripemd160
R2Array	test/arith_uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2Array	test/uint256_tests.cpp	/^const unsigned char R2Array[] =$/;"	v
R2L	test/arith_uint256_tests.cpp	/^const arith_uint256 R2L = arith_uint256V(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2L	test/uint256_tests.cpp	/^const uint256 R2L = uint256(std::vector<unsigned char>(R2Array,R2Array+32));$/;"	v
R2S	test/uint256_tests.cpp	/^const uint160 R2S = uint160(std::vector<unsigned char>(R2Array,R2Array+20));$/;"	v
R31	crypto/ripemd160.cpp	/^void inline R31(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }$/;"	f	namespace:__anon5::ripemd160
R32	crypto/ripemd160.cpp	/^void inline R32(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }$/;"	f	namespace:__anon5::ripemd160
R41	crypto/ripemd160.cpp	/^void inline R41(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }$/;"	f	namespace:__anon5::ripemd160
R42	crypto/ripemd160.cpp	/^void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }$/;"	f	namespace:__anon5::ripemd160
R51	crypto/ripemd160.cpp	/^void inline R51(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }$/;"	f	namespace:__anon5::ripemd160
R52	crypto/ripemd160.cpp	/^void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }$/;"	f	namespace:__anon5::ripemd160
RANDOM	leveldb/doc/bench/db_bench_sqlite3.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM	leveldb/doc/bench/db_bench_tree_db.cc	/^    RANDOM$/;"	e	enum:leveldb::Benchmark::Order	file:
RANDOM_REPEATS	wallet/test/wallet_tests.cpp	22;"	d	file:
RANLIB	Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RANLIB	secp256k1/Makefile	/^RANLIB = \/usr\/bin\/ranlib$/;"	m
RAW_TEST_FILES	Makefile	/^RAW_TEST_FILES = test\/data\/alertTests.raw$/;"	m
READWRITE	serialize.h	165;"	d
RECHECK_LOGS	Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECHECK_LOGS	secp256k1/Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECOVER_FAIL	wallet/db.h	/^                        RECOVER_FAIL };$/;"	e	enum:CDBEnv::VerifyResult
RECOVER_OK	wallet/db.h	/^                        RECOVER_OK,$/;"	e	enum:CDBEnv::VerifyResult
RECURSIVE_CLEAN_TARGETS	Makefile	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	Makefile	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
REF	serialize.h	/^inline T& REF(const T& val)$/;"	f
REGTEST	chainparamsbase.h	/^        REGTEST,$/;"	e	enum:CBaseChainParams::Network
REJECT_CHECKPOINT	consensus/validation.h	/^static const unsigned char REJECT_CHECKPOINT = 0x43;$/;"	v
REJECT_DUPLICATE	consensus/validation.h	/^static const unsigned char REJECT_DUPLICATE = 0x12;$/;"	v
REJECT_DUST	consensus/validation.h	/^static const unsigned char REJECT_DUST = 0x41;$/;"	v
REJECT_INSUFFICIENTFEE	consensus/validation.h	/^static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;$/;"	v
REJECT_INVALID	consensus/validation.h	/^static const unsigned char REJECT_INVALID = 0x10;$/;"	v
REJECT_MALFORMED	consensus/validation.h	/^static const unsigned char REJECT_MALFORMED = 0x01;$/;"	v
REJECT_NONSTANDARD	consensus/validation.h	/^static const unsigned char REJECT_NONSTANDARD = 0x40;$/;"	v
REJECT_OBSOLETE	consensus/validation.h	/^static const unsigned char REJECT_OBSOLETE = 0x11;$/;"	v
RELDFLAGS	Makefile	/^RELDFLAGS = $/;"	m
RESTERR	rest.cpp	/^static RestErr RESTERR(enum HTTPStatusCode status, string message)$/;"	f	file:
RF_BINARY	rest.cpp	/^    RF_BINARY,$/;"	e	enum:RetFormat	file:
RF_HEX	rest.cpp	/^    RF_HEX,$/;"	e	enum:RetFormat	file:
RF_JSON	rest.cpp	/^    RF_JSON,$/;"	e	enum:RetFormat	file:
RF_UNDEF	rest.cpp	/^    RF_UNDEF,$/;"	e	enum:RetFormat	file:
ROTL32	hash.cpp	/^inline uint32_t ROTL32(uint32_t x, int8_t r)$/;"	f
RPCAcceptHandler	rpcserver.cpp	/^static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,$/;"	f	file:
RPCConvertValues	rpcclient.cpp	/^Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCErrorCode	rpcprotocol.h	/^enum RPCErrorCode$/;"	g
RPCIsInWarmup	rpcserver.cpp	/^bool RPCIsInWarmup(std::string *outStatus)$/;"	f
RPCListen	rpcserver.cpp	/^static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,$/;"	f	file:
RPCPort	chainparamsbase.h	/^    int RPCPort() const { return nRPCPort; }$/;"	f	class:CBaseChainParams
RPCRunHandler	rpcserver.cpp	/^void RPCRunHandler(const boost::system::error_code& err, boost::function<void(void)> func)$/;"	f
RPCRunLater	rpcserver.cpp	/^void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds)$/;"	f
RPCServer	rpcserver.h	/^namespace RPCServer$/;"	n
RPCTestFixture	test/rpc_command.cpp	/^    RPCTestFixture()$/;"	f	struct:RPCTestFixture
RPCTestFixture	test/rpc_command.cpp	/^struct RPCTestFixture : public TestingSetup$/;"	s	file:
RPCTestWalletFixture	test/rpc_command.cpp	/^    RPCTestWalletFixture()$/;"	f	struct:RPCTestWalletFixture
RPCTestWalletFixture	test/rpc_command.cpp	/^struct RPCTestWalletFixture : public WalletSetupFixture, public TestingSetup$/;"	s	file:
RPCTypeCheck	rpcserver.cpp	/^void RPCTypeCheck(const Array& params,$/;"	f
RPCTypeCheck	rpcserver.cpp	/^void RPCTypeCheck(const Object& o,$/;"	f
RPC_CLIENT_IN_INITIAL_DOWNLOAD	rpcprotocol.h	/^    RPC_CLIENT_IN_INITIAL_DOWNLOAD  = -10, \/\/! Still downloading initial blocks$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_ALREADY_ADDED	rpcprotocol.h	/^    RPC_CLIENT_NODE_ALREADY_ADDED   = -23, \/\/! Node is already added$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_ADDED	rpcprotocol.h	/^    RPC_CLIENT_NODE_NOT_ADDED       = -24, \/\/! Node has not been added before$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_BANNED	rpcprotocol.h	/^    RPC_CLIENT_NODE_NOT_BANNED      = -25, \/\/! Node not exist in banlist$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NODE_NOT_CONNECTED	rpcprotocol.h	/^    RPC_CLIENT_NODE_NOT_CONNECTED   = -29, \/\/! Node to disconnect not found in connected nodes$/;"	e	enum:RPCErrorCode
RPC_CLIENT_NOT_CONNECTED	rpcprotocol.h	/^    RPC_CLIENT_NOT_CONNECTED        = -9,  \/\/! Gcoin is not connected$/;"	e	enum:RPCErrorCode
RPC_DATABASE_ERROR	rpcprotocol.h	/^    RPC_DATABASE_ERROR              = -20, \/\/! Database error$/;"	e	enum:RPCErrorCode
RPC_DESERIALIZATION_ERROR	rpcprotocol.h	/^    RPC_DESERIALIZATION_ERROR       = -22, \/\/! Error parsing or validating structure in raw format$/;"	e	enum:RPCErrorCode
RPC_FORBIDDEN_BY_SAFE_MODE	rpcprotocol.h	/^    RPC_FORBIDDEN_BY_SAFE_MODE      = -2,  \/\/! Server is in safe mode, and command is not allowed in safe mode$/;"	e	enum:RPCErrorCode
RPC_INTERNAL_ERROR	rpcprotocol.h	/^    RPC_INTERNAL_ERROR   = -32603,$/;"	e	enum:RPCErrorCode
RPC_INVALID_ADDRESS_OR_KEY	rpcprotocol.h	/^    RPC_INVALID_ADDRESS_OR_KEY      = -5,  \/\/! Invalid address or key$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMETER	rpcprotocol.h	/^    RPC_INVALID_PARAMETER           = -8,  \/\/! Invalid, missing or duplicate parameter$/;"	e	enum:RPCErrorCode
RPC_INVALID_PARAMS	rpcprotocol.h	/^    RPC_INVALID_PARAMS   = -32602,$/;"	e	enum:RPCErrorCode
RPC_INVALID_REQUEST	rpcprotocol.h	/^    RPC_INVALID_REQUEST  = -32600,$/;"	e	enum:RPCErrorCode
RPC_IN_WARMUP	rpcprotocol.h	/^    RPC_IN_WARMUP                   = -28, \/\/! Client still warming up$/;"	e	enum:RPCErrorCode
RPC_MATCH_FAIL	rpcprotocol.h	/^    RPC_MATCH_FAIL                  = -40, \/\/ match order fail$/;"	e	enum:RPCErrorCode
RPC_METHOD_NOT_FOUND	rpcprotocol.h	/^    RPC_METHOD_NOT_FOUND = -32601,$/;"	e	enum:RPCErrorCode
RPC_MISC_ERROR	rpcprotocol.h	/^    RPC_MISC_ERROR                  = -1,  \/\/! std::exception thrown in command handling$/;"	e	enum:RPCErrorCode
RPC_OUT_OF_MEMORY	rpcprotocol.h	/^    RPC_OUT_OF_MEMORY               = -7,  \/\/! Ran out of memory during operation$/;"	e	enum:RPCErrorCode
RPC_PARSE_ERROR	rpcprotocol.h	/^    RPC_PARSE_ERROR      = -32700,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ALREADY_IN_CHAIN	rpcprotocol.h	/^    RPC_TRANSACTION_ALREADY_IN_CHAIN= RPC_VERIFY_ALREADY_IN_CHAIN,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_ERROR	rpcprotocol.h	/^    RPC_TRANSACTION_ERROR           = RPC_VERIFY_ERROR,$/;"	e	enum:RPCErrorCode
RPC_TRANSACTION_REJECTED	rpcprotocol.h	/^    RPC_TRANSACTION_REJECTED        = RPC_VERIFY_REJECTED,$/;"	e	enum:RPCErrorCode
RPC_TYPE_ERROR	rpcprotocol.h	/^    RPC_TYPE_ERROR                  = -3,  \/\/! Unexpected type was passed as parameter$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ALREADY_IN_CHAIN	rpcprotocol.h	/^    RPC_VERIFY_ALREADY_IN_CHAIN     = -27, \/\/! Transaction already in chain$/;"	e	enum:RPCErrorCode
RPC_VERIFY_ERROR	rpcprotocol.h	/^    RPC_VERIFY_ERROR                = -25, \/\/! General error during transaction or block submission$/;"	e	enum:RPCErrorCode
RPC_VERIFY_REJECTED	rpcprotocol.h	/^    RPC_VERIFY_REJECTED             = -26, \/\/! Transaction or block was rejected by network rules$/;"	e	enum:RPCErrorCode
RPC_WALLET_ALREADY_UNLOCKED	rpcprotocol.h	/^    RPC_WALLET_ALREADY_UNLOCKED     = -17, \/\/! Wallet is already unlocked$/;"	e	enum:RPCErrorCode
RPC_WALLET_ENCRYPTION_FAILED	rpcprotocol.h	/^    RPC_WALLET_ENCRYPTION_FAILED    = -16, \/\/! Failed to encrypt the wallet$/;"	e	enum:RPCErrorCode
RPC_WALLET_ERROR	rpcprotocol.h	/^    RPC_WALLET_ERROR                = -4,  \/\/! Unspecified problem with wallet (key not found etc.)$/;"	e	enum:RPCErrorCode
RPC_WALLET_INSUFFICIENT_FUNDS	rpcprotocol.h	/^    RPC_WALLET_INSUFFICIENT_FUNDS   = -6,  \/\/! Not enough funds in wallet or account$/;"	e	enum:RPCErrorCode
RPC_WALLET_INVALID_ACCOUNT_NAME	rpcprotocol.h	/^    RPC_WALLET_INVALID_ACCOUNT_NAME = -11, \/\/! Invalid account name$/;"	e	enum:RPCErrorCode
RPC_WALLET_KEYPOOL_RAN_OUT	rpcprotocol.h	/^    RPC_WALLET_KEYPOOL_RAN_OUT      = -12, \/\/! Keypool ran out, call keypoolrefill first$/;"	e	enum:RPCErrorCode
RPC_WALLET_PASSPHRASE_INCORRECT	rpcprotocol.h	/^    RPC_WALLET_PASSPHRASE_INCORRECT = -14, \/\/! The wallet passphrase entered was incorrect$/;"	e	enum:RPCErrorCode
RPC_WALLET_UNLOCK_NEEDED	rpcprotocol.h	/^    RPC_WALLET_UNLOCK_NEEDED        = -13, \/\/! Enter the wallet passphrase with walletpassphrase first$/;"	e	enum:RPCErrorCode
RPC_WALLET_WRONG_ENC_STATE	rpcprotocol.h	/^    RPC_WALLET_WRONG_ENC_STATE      = -15, \/\/! Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.)$/;"	e	enum:RPCErrorCode
RTT	net.h	/^        RTT,$/;"	e	enum:CNetRecorder::ERecordType
RUNNING	leveldb/db/skiplist_test.cc	/^    RUNNING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
RUN_TESTS	wallet/test/wallet_tests.cpp	18;"	d	file:
RaiseFileDescriptorLimit	util.cpp	/^int RaiseFileDescriptorLimit(int nMinFD) {$/;"	f
RaiseValidity	chain.h	/^    bool RaiseValidity(enum BlockStatus nUpTo)$/;"	f	class:CBlockIndex
RandAddSeed	random.cpp	/^void RandAddSeed()$/;"	f
RandAddSeedPerfmon	random.cpp	/^void RandAddSeedPerfmon()$/;"	f
Random	leveldb/util/random.h	/^  explicit Random(uint32_t s) : seed_(s & 0x7fffffffu) {$/;"	f	class:leveldb::Random
Random	leveldb/util/random.h	/^class Random {$/;"	c	namespace:leveldb
RandomAccessFile	leveldb/include/leveldb/env.h	/^  RandomAccessFile() { }$/;"	f	class:leveldb::RandomAccessFile
RandomAccessFile	leveldb/include/leveldb/env.h	/^class RandomAccessFile {$/;"	c	namespace:leveldb
RandomAccessFileImpl	leveldb/helpers/memenv/memenv.cc	/^  explicit RandomAccessFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon26::RandomAccessFileImpl
RandomAccessFileImpl	leveldb/helpers/memenv/memenv.cc	/^class RandomAccessFileImpl : public RandomAccessFile {$/;"	c	namespace:leveldb::__anon26	file:
RandomData	test/bloom_tests.cpp	/^static std::vector<unsigned char> RandomData()$/;"	f	file:
RandomGenerator	leveldb/db/db_bench.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon15::RandomGenerator
RandomGenerator	leveldb/db/db_bench.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon15	file:
RandomGenerator	leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon35::RandomGenerator
RandomGenerator	leveldb/doc/bench/db_bench_sqlite3.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon35	file:
RandomGenerator	leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator() {$/;"	f	class:leveldb::__anon36::RandomGenerator
RandomGenerator	leveldb/doc/bench/db_bench_tree_db.cc	/^class RandomGenerator {$/;"	c	namespace:leveldb::__anon36	file:
RandomHeight	leveldb/db/skiplist.h	/^int SkipList<Key,Comparator>::RandomHeight() {$/;"	f	class:leveldb::SkipList
RandomKey	leveldb/db/db_test.cc	/^static std::string RandomKey(Random* rnd) {$/;"	f	namespace:leveldb
RandomKey	leveldb/util/testutil.cc	/^std::string RandomKey(Random* rnd, int len) {$/;"	f	namespace:leveldb::test
RandomOrphan	test/DoS_tests.cpp	/^CTransaction RandomOrphan()$/;"	f
RandomPeriod	leveldb/db/db_iter.cc	/^  ssize_t RandomPeriod() {$/;"	f	class:leveldb::__anon22::DBIter	file:
RandomScript	test/sighash_tests.cpp	/^void static RandomScript(CScript &script) {$/;"	f	file:
RandomSeed	leveldb/util/testharness.cc	/^int RandomSeed() {$/;"	f	namespace:leveldb::test
RandomSkewedString	leveldb/db/log_test.cc	/^static std::string RandomSkewedString(int i, Random* rnd) {$/;"	f	namespace:leveldb::log
RandomString	leveldb/db/db_test.cc	/^static std::string RandomString(Random* rnd, int len) {$/;"	f	namespace:leveldb
RandomString	leveldb/util/testutil.cc	/^Slice RandomString(Random* rnd, int len, std::string* dst) {$/;"	f	namespace:leveldb::test
RandomTarget	leveldb/db/skiplist_test.cc	/^  static Key RandomTarget(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest	file:
RandomTransaction	test/sighash_tests.cpp	/^void static RandomTransaction(CMutableTransaction &tx, bool fSingle) {$/;"	f	file:
Range	leveldb/include/leveldb/db.h	/^  Range() { }$/;"	f	struct:leveldb::Range
Range	leveldb/include/leveldb/db.h	/^  Range(const Slice& s, const Slice& l) : start(s), limit(l) { }$/;"	f	struct:leveldb::Range
Range	leveldb/include/leveldb/db.h	/^struct Range {$/;"	s	namespace:leveldb
ReacceptWalletTransactions	wallet/wallet.cpp	/^void CWallet::ReacceptWalletTransactions()$/;"	f	class:CWallet
Read	leveldb/db/db_test.cc	/^  int Read() {$/;"	f	class:leveldb::__anon18::AtomicCounter
Read	leveldb/db/log_test.cc	/^    virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::log::LogTest::StringSource
Read	leveldb/db/log_test.cc	/^  std::string Read() {$/;"	f	class:leveldb::log::LogTest
Read	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Read(Order order, int entries_per_batch) {$/;"	f	class:leveldb::Benchmark
Read	leveldb/helpers/memenv/memenv.cc	/^  Status Read(uint64_t offset, size_t n, Slice* result, char* scratch) const {$/;"	f	class:leveldb::__anon26::FileState
Read	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon26::SequentialFileImpl
Read	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon26::RandomAccessFileImpl
Read	leveldb/table/table_test.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::StringSource
Read	leveldb/util/env_posix.cc	/^  virtual Status Read(size_t n, Slice* result, char* scratch) {$/;"	f	class:leveldb::__anon42::PosixSequentialFile
Read	leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon42::PosixMmapReadableFile
Read	leveldb/util/env_posix.cc	/^  virtual Status Read(uint64_t offset, size_t n, Slice* result,$/;"	f	class:leveldb::__anon42::PosixRandomAccessFile
Read	leveldb/util/env_win.cc	/^Status Win32RandomAccessFile::Read(uint64_t offset,size_t n,Slice* result,char* scratch) const$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Read	leveldb/util/env_win.cc	/^Status Win32SequentialFile::Read( size_t n, Slice* result, char* scratch )$/;"	f	class:leveldb::Win32::Win32SequentialFile
Read	leveldbwrapper.h	/^    bool Read(const K& key, V& value) const throw(leveldb_error)$/;"	f	class:CLevelDBWrapper
Read	net.cpp	/^bool CAddrDB::Read(CAddrMan& addr)$/;"	f	class:CAddrDB
Read	policy/fees.cpp	/^void CBlockPolicyEstimator::Read(CAutoFile& filein)$/;"	f	class:CBlockPolicyEstimator
Read	policy/fees.cpp	/^void TxConfirmStats::Read(CAutoFile& filein)$/;"	f	class:TxConfirmStats
Read	wallet/db.h	/^    bool Read(const K& key, T& value)$/;"	f	class:CDB
ReadAccount	wallet/walletdb.cpp	/^bool CWalletDB::ReadAccount(const std::string& strAccount, CAccount& account)$/;"	f	class:CWalletDB
ReadAlerts	test/alert_tests.cpp	/^    ReadAlerts()$/;"	f	struct:ReadAlerts
ReadAlerts	test/alert_tests.cpp	/^struct ReadAlerts : public TestingSetup$/;"	s	file:
ReadAtCursor	wallet/db.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags = DB_NEXT)$/;"	f	class:CDB
ReadBE32	crypto/common.h	/^uint32_t static inline ReadBE32(const unsigned char* ptr)$/;"	f
ReadBE32	secp256k1/src/hash_impl.h	290;"	d
ReadBE64	crypto/common.h	/^uint64_t static inline ReadBE64(const unsigned char* ptr)$/;"	f
ReadBestBlock	wallet/walletdb.cpp	/^bool CWalletDB::ReadBestBlock(CBlockLocator& locator)$/;"	f	class:CWalletDB
ReadBlock	leveldb/table/format.cc	/^Status ReadBlock(RandomAccessFile* file,$/;"	f	namespace:leveldb
ReadBlockFileInfo	txdb.cpp	/^bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {$/;"	f	class:CBlockTreeDB
ReadBlockFromDisk	main.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)$/;"	f
ReadBlockFromDisk	main.cpp	/^bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)$/;"	f
ReadCompactSize	serialize.h	/^uint64_t ReadCompactSize(Stream& is)$/;"	f
ReadConfigFile	util.cpp	/^void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet,$/;"	f
ReadDisk	cache.h	/^    bool ReadDisk()$/;"	f	class:CacheInterface
ReadFeeEstimates	txmempool.cpp	/^CTxMemPool::ReadFeeEstimates(CAutoFile& filein)$/;"	f	class:CTxMemPool
ReadFileToString	leveldb/util/env.cc	/^Status ReadFileToString(Env* env, const std::string& fname, std::string* data) {$/;"	f	namespace:leveldb
ReadFilter	leveldb/table/table.cc	/^void Table::ReadFilter(const Slice& filter_handle_value) {$/;"	f	class:leveldb::Table
ReadFlag	txdb.cpp	/^bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue)$/;"	f	class:CBlockTreeDB
ReadFromBuffer	net.cpp	/^void CNetRecorder::CBandwidthRecord::ReadFromBuffer(char const* buffer)$/;"	f	class:CNetRecorder::CBandwidthRecord
ReadFromBuffer	net.cpp	/^void CNetRecorder::CRTTRecord::ReadFromBuffer(char const* buffer)$/;"	f	class:CNetRecorder::CRTTRecord
ReadHTTPHeaders	rpcprotocol.cpp	/^int ReadHTTPHeaders(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet)$/;"	f
ReadHTTPMessage	rpcprotocol.cpp	/^int ReadHTTPMessage(std::basic_istream<char>& stream, std::map<std::string,$/;"	f
ReadHTTPRequestLine	rpcprotocol.cpp	/^bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,$/;"	f
ReadHTTPStatus	rpcprotocol.cpp	/^int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)$/;"	f
ReadHot	leveldb/db/db_bench.cc	/^  void ReadHot(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadKeyValue	wallet/walletdb.cpp	/^ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,$/;"	f
ReadLE16	crypto/common.h	/^uint16_t static inline ReadLE16(const unsigned char* ptr)$/;"	f
ReadLE32	crypto/common.h	/^uint32_t static inline ReadLE32(const unsigned char* ptr)$/;"	f
ReadLE64	crypto/common.h	/^uint64_t static inline ReadLE64(const unsigned char* ptr)$/;"	f
ReadLastBlockFile	txdb.cpp	/^bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {$/;"	f	class:CBlockTreeDB
ReadMeta	leveldb/table/table.cc	/^void Table::ReadMeta(const Footer& footer) {$/;"	f	class:leveldb::Table
ReadMissing	leveldb/db/db_bench.cc	/^  void ReadMissing(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadOptions	leveldb/include/leveldb/options.h	/^  ReadOptions()$/;"	f	struct:leveldb::ReadOptions
ReadOptions	leveldb/include/leveldb/options.h	/^struct ReadOptions {$/;"	s	namespace:leveldb
ReadOrderPos	wallet/wallet.h	/^static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
ReadPhysicalRecord	leveldb/db/log_reader.cc	/^unsigned int Reader::ReadPhysicalRecord(Slice* result) {$/;"	f	class:leveldb::log::Reader
ReadPool	wallet/walletdb.cpp	/^bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)$/;"	f	class:CWalletDB
ReadRandom	leveldb/db/db_bench.cc	/^  void ReadRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadRandom	leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadRandom() {$/;"	f	class:leveldb::Benchmark	file:
ReadRecord	leveldb/db/log_reader.cc	/^bool Reader::ReadRecord(Slice* record, std::string* scratch) {$/;"	f	class:leveldb::log::Reader
ReadReindexing	txdb.cpp	/^bool CBlockTreeDB::ReadReindexing(bool &fReindexing) {$/;"	f	class:CBlockTreeDB
ReadReverse	leveldb/db/db_bench.cc	/^  void ReadReverse(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	leveldb/db/db_bench.cc	/^  void ReadSequential(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
ReadSequential	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark
ReadSequential	leveldb/doc/bench/db_bench_tree_db.cc	/^  void ReadSequential() {$/;"	f	class:leveldb::Benchmark	file:
ReadStep	leveldb/db/skiplist_test.cc	/^  void ReadStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
ReadTxIndex	txdb.cpp	/^bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {$/;"	f	class:CBlockTreeDB
ReadVarInt	serialize.h	/^I ReadVarInt(Stream& is)$/;"	f
ReadVersion	streams.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CAutoFile
ReadVersion	streams.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CDataStream
ReadVersion	wallet/db.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:CDB
ReadWhileWriting	leveldb/db/db_bench.cc	/^  void ReadWhileWriting(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Reader	leveldb/db/log_reader.cc	/^Reader::Reader(SequentialFile* file, Reporter* reporter, bool checksum,$/;"	f	class:leveldb::log::Reader
Reader	leveldb/db/log_reader.h	/^class Reader {$/;"	c	namespace:leveldb::log
ReaderState	leveldb/db/skiplist_test.cc	/^  enum ReaderState {$/;"	g	class:leveldb::TestState	file:
ReceiveFloodSize	net.cpp	/^unsigned int ReceiveFloodSize() { return 1000*GetArg("-maxreceivebuffer", 5*1000); }$/;"	f
ReceiveMsgBytes	net.cpp	/^bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)$/;"	f	class:CNode
ReceivedBlockTransactions	main.cpp	/^bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos)$/;"	f
ReconsiderBlock	main.cpp	/^bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex) {$/;"	f
Record	policy/fees.cpp	/^void TxConfirmStats::Record(int blocksToConfirm, double val)$/;"	f	class:TxConfirmStats
RecordBackgroundError	leveldb/db/db_impl.cc	/^void DBImpl::RecordBackgroundError(const Status& s) {$/;"	f	class:leveldb::DBImpl
RecordBytesRecv	net.cpp	/^void CNode::RecordBytesRecv(uint64_t bytes)$/;"	f	class:CNode
RecordBytesSent	net.cpp	/^void CNode::RecordBytesSent(uint64_t bytes)$/;"	f	class:CNode
RecordReadSample	leveldb/db/db_impl.cc	/^void DBImpl::RecordReadSample(Slice key) {$/;"	f	class:leveldb::DBImpl
RecordReadSample	leveldb/db/version_set.cc	/^bool Version::RecordReadSample(Slice internal_key) {$/;"	f	class:leveldb::Version
RecordType	leveldb/db/log_format.h	/^enum RecordType {$/;"	g	namespace:leveldb::log
Recover	ecwrapper.cpp	/^bool CECKey::Recover(const uint256 &hash, const unsigned char *p64, int rec)$/;"	f	class:CECKey
Recover	leveldb/db/db_impl.cc	/^Status DBImpl::Recover(VersionEdit* edit) {$/;"	f	class:leveldb::DBImpl
Recover	leveldb/db/version_set.cc	/^Status VersionSet::Recover() {$/;"	f	class:leveldb::VersionSet
Recover	wallet/walletdb.cpp	/^bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)$/;"	f	class:CWalletDB
Recover	wallet/walletdb.cpp	/^bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)$/;"	f	class:CWalletDB
RecoverCompact	pubkey.cpp	/^bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {$/;"	f	class:CPubKey
RecoverLogFile	leveldb/db/db_impl.cc	/^Status DBImpl::RecoverLogFile(uint64_t log_number,$/;"	f	class:leveldb::DBImpl
Ref	leveldb/db/memtable.h	/^  void Ref() { ++refs_; }$/;"	f	class:leveldb::MemTable
Ref	leveldb/db/version_set.cc	/^void Version::Ref() {$/;"	f	class:leveldb::Version
Ref	leveldb/helpers/memenv/memenv.cc	/^  void Ref() {$/;"	f	class:leveldb::__anon26::FileState
RegisterCleanup	leveldb/table/iterator.cc	/^void Iterator::RegisterCleanup(CleanupFunction func, void* arg1, void* arg2) {$/;"	f	class:leveldb::Iterator
RegisterNodeSignals	main.cpp	/^void RegisterNodeSignals(CNodeSignals& nodeSignals)$/;"	f
RegisterTest	leveldb/util/testharness.cc	/^bool RegisterTest(const char* base, const char* name, void (*func)()) {$/;"	f	namespace:leveldb::test
RegisterValidationInterface	validationinterface.cpp	/^void RegisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
RejectInvalidTypeTx	main.cpp	/^    bool RejectInvalidTypeTx($/;"	f	class:type_transaction_handler::__anon48::HandlerUtility_
RejectInvalidTypeTx_	main.cpp	/^bool RejectInvalidTypeTx_(const tx_type &type,$/;"	f	namespace:type_transaction_handler::__anon48
RelayTo	alert.cpp	/^bool CAlert::RelayTo(CNode* pnode) const$/;"	f	class:CAlert
RelayTransaction	net.cpp	/^void RelayTransaction(const CTransaction& tx)$/;"	f
RelayTransaction	net.cpp	/^void RelayTransaction(const CTransaction& tx, const CDataStream& ss)$/;"	f
RelayWalletTransaction	wallet/wallet.cpp	/^bool CWalletTx::RelayWalletTransaction()$/;"	f	class:CWalletTx
Release	leveldb/util/cache.cc	/^  virtual void Release(Handle* handle) {$/;"	f	class:leveldb::__anon39::ShardedLRUCache
Release	leveldb/util/cache.cc	/^void LRUCache::Release(Cache::Handle* handle) {$/;"	f	class:leveldb::__anon39::LRUCache
Release	leveldb/util/env_posix.cc	/^  void Release() {$/;"	f	class:leveldb::__anon42::MmapLimiter
Release	net.h	/^    void Release()$/;"	f	class:CNode
Release	sync.h	/^    void Release()$/;"	f	class:CSemaphoreGrant
ReleaseBlock	leveldb/table/table.cc	/^static void ReleaseBlock(void* arg, void* h) {$/;"	f	namespace:leveldb
ReleaseInputs	leveldb/db/version_set.cc	/^void Compaction::ReleaseInputs() {$/;"	f	class:leveldb::Compaction
ReleaseSnapshot	leveldb/db/db_impl.cc	/^void DBImpl::ReleaseSnapshot(const Snapshot* s) {$/;"	f	class:leveldb::DBImpl
ReleaseSnapshot	leveldb/db/db_test.cc	/^  virtual void ReleaseSnapshot(const Snapshot* snapshot) {$/;"	f	class:leveldb::ModelDB
Release_Store	leveldb/port/atomic_pointer.h	/^  inline void Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Release_Store	leveldb/port/port_win.cc	/^void AtomicPointer::Release_Store(void* v) {$/;"	f	class:leveldb::port::AtomicPointer
Remove	cache.cpp	/^bool OrderList::Remove(const Te_t &txinfo)$/;"	f	class:order_list::OrderList
Remove	cache.h	/^    inline bool Remove()$/;"	f	class:block_miner::BlockMiner
Remove	cache.h	/^    inline bool Remove(const Te_t &addr)$/;"	f	class:alliance_member::AllianceMember
Remove	cache.h	/^    inline bool Remove(const std::pair<type_Color, std::string> &e)$/;"	f	class:activate_addr::ActivateAddr
Remove	cache.h	/^    virtual bool Remove(const Te &e)$/;"	f	class:CacheInterface
Remove	leveldb/util/cache.cc	/^  LRUHandle* Remove(const Slice& key, uint32_t hash) {$/;"	f	class:leveldb::__anon39::HandleTable
Remove	leveldb/util/env_posix.cc	/^  void Remove(const std::string& fname) {$/;"	f	class:leveldb::__anon42::PosixLockTable
RemoveAll	cache.h	/^    inline bool RemoveAll()$/;"	f	class:activate_addr::ActivateAddr
RemoveAll	cache.h	/^    inline bool RemoveAll()$/;"	f	class:alliance_member::AllianceMember
RemoveAll	cache.h	/^    inline bool RemoveAll()$/;"	f	class:block_miner::BlockMiner
RemoveAll	cache.h	/^    inline bool RemoveAll()$/;"	f	class:color_license::ColorLicense
RemoveAll	cache.h	/^    inline bool RemoveAll()$/;"	f	class:order_list::OrderList
RemoveAll	cache.h	/^    virtual bool RemoveAll()$/;"	f	class:CacheInterface
RemoveColor	cache.h	/^    inline bool RemoveColor(const type_Color &color)$/;"	f	class:activate_addr::ActivateAddr
RemoveColor	cache.h	/^    inline bool RemoveColor(const type_Color &color)$/;"	f	class:color_license::ColorLicense
RemoveDb	wallet/db.cpp	/^bool CDBEnv::RemoveDb(const std::string& strFile)$/;"	f	class:CDBEnv
RemoveFromBannedList	net.cpp	/^bool CNode::RemoveFromBannedList(const CNetAddr &addr) {$/;"	f	class:CNode
RemoveOwner	cache.h	/^    inline bool RemoveOwner(const type_Color &color)$/;"	f	class:color_license::ColorLicense
RemoveVoter_	main.cpp	/^    void RemoveVoter_(string &candidate)$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_	file:
RemoveWatchOnly	keystore.cpp	/^bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CBasicKeyStore
RemoveWatchOnly	wallet/wallet.cpp	/^bool CWallet::RemoveWatchOnly(const CScript &dest)$/;"	f	class:CWallet
RenameFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status RenameFile(const std::string& src,$/;"	f	class:leveldb::__anon26::InMemoryEnv
RenameFile	leveldb/include/leveldb/env.h	/^  Status RenameFile(const std::string& s, const std::string& t) {$/;"	f	class:leveldb::EnvWrapper
RenameFile	leveldb/util/env_posix.cc	/^  virtual Status RenameFile(const std::string& src, const std::string& target) {$/;"	f	class:leveldb::__anon42::PosixEnv
RenameFile	leveldb/util/env_win.cc	/^Status Win32Env::RenameFile( const std::string& src, const std::string& target )$/;"	f	class:leveldb::Win32::Win32Env
RenameLDBToSST	leveldb/db/db_test.cc	/^  int RenameLDBToSST() {$/;"	f	class:leveldb::DBTest
RenameOver	util.cpp	/^bool RenameOver(fs::path src, fs::path dest)$/;"	f
RenameThread	util.cpp	/^void RenameThread(const char* name)$/;"	f
Reopen	leveldb/db/corruption_test.cc	/^  void Reopen() {$/;"	f	class:leveldb::CorruptionTest
Reopen	leveldb/db/db_test.cc	/^  void Reopen(Options* options = NULL) {$/;"	f	class:leveldb::DBTest
ReopenLogFile	util.cpp	/^static void ReopenLogFile()$/;"	f	file:
ReorderTransactions	wallet/walletdb.cpp	/^DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)$/;"	f	class:CWalletDB
Rep	leveldb/table/table.cc	/^struct Table::Rep {$/;"	s	class:leveldb::Table	file:
Rep	leveldb/table/table_builder.cc	/^  Rep(const Options& opt, WritableFile* f)$/;"	f	struct:leveldb::TableBuilder::Rep
Rep	leveldb/table/table_builder.cc	/^struct TableBuilder::Rep {$/;"	s	class:leveldb::TableBuilder	file:
RepairDB	leveldb/db/corruption_test.cc	/^  void RepairDB() {$/;"	f	class:leveldb::CorruptionTest
RepairDB	leveldb/db/repair.cc	/^Status RepairDB(const std::string& dbname, const Options& options) {$/;"	f	namespace:leveldb
RepairTable	leveldb/db/repair.cc	/^  void RepairTable(const std::string& src, TableInfo t) {$/;"	f	class:leveldb::__anon17::Repairer	file:
Repairer	leveldb/db/repair.cc	/^  Repairer(const std::string& dbname, const Options& options)$/;"	f	class:leveldb::__anon17::Repairer
Repairer	leveldb/db/repair.cc	/^class Repairer {$/;"	c	namespace:leveldb::__anon17	file:
Repeat	scheduler.cpp	/^static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaSeconds)$/;"	f	file:
Report	leveldb/db/db_bench.cc	/^  void Report(const Slice& name) {$/;"	f	class:leveldb::__anon15::Stats
ReportCollector	leveldb/db/log_test.cc	/^    ReportCollector() : dropped_bytes_(0) { }$/;"	f	class:leveldb::log::LogTest::ReportCollector
ReportCollector	leveldb/db/log_test.cc	/^  class ReportCollector : public Reader::Reporter {$/;"	c	class:leveldb::log::LogTest	file:
ReportCorruption	leveldb/db/log_reader.cc	/^void Reader::ReportCorruption(uint64_t bytes, const char* reason) {$/;"	f	class:leveldb::log::Reader
ReportDrop	leveldb/db/log_reader.cc	/^void Reader::ReportDrop(uint64_t bytes, const Status& reason) {$/;"	f	class:leveldb::log::Reader
ReportMessage	leveldb/db/log_test.cc	/^  std::string ReportMessage() const {$/;"	f	class:leveldb::log::LogTest
Reporter	leveldb/db/log_reader.h	/^  class Reporter {$/;"	c	class:leveldb::log::Reader
RequireRPCPassword	chainparams.h	/^    bool RequireRPCPassword() const { return fRequireRPCPassword; }$/;"	f	class:CChainParams
RequireStandard	chainparams.h	/^    bool RequireStandard() const { return fRequireStandard; }$/;"	f	class:CChainParams
ResendWalletTransactions	validationinterface.h	/^    virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}$/;"	f	class:CValidationInterface
ResendWalletTransactions	wallet/wallet.cpp	/^void CWallet::ResendWalletTransactions(int64_t nBestBlockTime)$/;"	f	class:CWallet
ResendWalletTransactionsBefore	wallet/wallet.cpp	/^std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)$/;"	f	class:CWallet
ReserveKeyFromKeyPool	wallet/wallet.cpp	/^void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)$/;"	f	class:CWallet
Reset	crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Reset()$/;"	f	class:CRIPEMD160
Reset	crypto/sha1.cpp	/^CSHA1& CSHA1::Reset()$/;"	f	class:CSHA1
Reset	crypto/sha256.cpp	/^CSHA256& CSHA256::Reset()$/;"	f	class:CSHA256
Reset	crypto/sha512.cpp	/^CSHA512& CSHA512::Reset()$/;"	f	class:CSHA512
Reset	hash.h	/^    CHash160& Reset() {$/;"	f	class:CHash160
Reset	hash.h	/^    CHash256& Reset() {$/;"	f	class:CHash256
Reset	leveldb/db/db_test.cc	/^  void Reset() {$/;"	f	class:leveldb::__anon18::AtomicCounter
Reset	leveldb/table/block_builder.cc	/^void BlockBuilder::Reset() {$/;"	f	class:leveldb::BlockBuilder
Reset	leveldb/table/table_test.cc	/^  void Reset() {$/;"	f	class:leveldb::TableConstructor	file:
Reset	leveldb/util/bloom_test.cc	/^  void Reset() {$/;"	f	class:leveldb::BloomTest
Reset	wallet/db.cpp	/^void CDBEnv::Reset()$/;"	f	class:CDBEnv
ResetArgs	test/getarg_tests.cpp	/^static void ResetArgs(const std::string& strArg)$/;"	f	file:
Resize	leveldb/util/cache.cc	/^  void Resize() {$/;"	f	class:leveldb::__anon39::HandleTable	file:
RestErr	rest.cpp	/^class RestErr$/;"	c	file:
RetFormat	rest.cpp	/^enum RetFormat {$/;"	g	file:
ReturnFalse	test/main_tests.cpp	/^bool ReturnFalse() { return false; }$/;"	f
ReturnKey	wallet/wallet.cpp	/^void CReserveKey::ReturnKey()$/;"	f	class:CReserveKey
ReturnKey	wallet/wallet.cpp	/^void CWallet::ReturnKey(int64_t nIndex)$/;"	f	class:CWallet
ReturnTrue	test/main_tests.cpp	/^bool ReturnTrue() { return true; }$/;"	f
ReuseFileNumber	leveldb/db/version_set.h	/^  void ReuseFileNumber(uint64_t file_number) {$/;"	f	class:leveldb::VersionSet
Reverse	leveldb/table/table_test.cc	/^static std::string Reverse(const Slice& key) {$/;"	f	namespace:leveldb
ReverseKeyComparator	leveldb/table/table_test.cc	/^class ReverseKeyComparator : public Comparator {$/;"	c	namespace:leveldb::__anon33	file:
Rewind	streams.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
Rewrite	wallet/db.cpp	/^bool CDB::Rewrite(const std::string& strFile, const char* pszSkip)$/;"	f	class:CDB
Round	crypto/ripemd160.cpp	/^void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)$/;"	f	namespace:__anon5::ripemd160
Round	crypto/sha1.cpp	/^void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)$/;"	f	namespace:__anon7::sha1
Round	crypto/sha256.cpp	/^void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)$/;"	f	namespace:__anon6::sha256
Round	crypto/sha512.cpp	/^void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)$/;"	f	namespace:__anon8::sha512
Round	secp256k1/src/hash_impl.h	23;"	d
Round	secp256k1/src/hash_impl.h	283;"	d
Run	leveldb/db/db_bench.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	leveldb/db/repair.cc	/^  Status Run() {$/;"	f	class:leveldb::__anon17::Repairer
Run	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
Run	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Run() {$/;"	f	class:leveldb::Benchmark
RunAllTests	leveldb/util/testharness.cc	/^int RunAllTests() {$/;"	f	namespace:leveldb::test
RunBenchmark	leveldb/db/db_bench.cc	/^  void RunBenchmark(int n, Slice name,$/;"	f	class:leveldb::Benchmark	file:
RunConcurrent	leveldb/db/skiplist_test.cc	/^static void RunConcurrent(int run) {$/;"	f	namespace:leveldb
RunCreate	test/scriptnum_tests.cpp	/^static void RunCreate(const int64_t& num)$/;"	f	file:
RunOperators	test/scriptnum_tests.cpp	/^static void RunOperators(const int64_t& num1, const int64_t& num2)$/;"	f	file:
RunTest	test/bip32_tests.cpp	/^void RunTest(const TestVector &test) {$/;"	f
SC	secp256k1/src/ecmult_static_context.h	1159;"	d
SC	secp256k1/src/ecmult_static_context.h	4;"	d
SCOPED_LOCKABLE	leveldb/port/thread_annotations.h	33;"	d
SCOPED_LOCKABLE	threadsafety.h	17;"	d
SCOPED_LOCKABLE	threadsafety.h	36;"	d
SCRIPT_ADDRESS	chainparams.h	/^        SCRIPT_ADDRESS,$/;"	e	enum:CChainParams::Base58Type
SCRIPT_ERR_BAD_OPCODE	script/script_error.h	/^    SCRIPT_ERR_BAD_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKMULTISIGVERIFY	script/script_error.h	/^    SCRIPT_ERR_CHECKMULTISIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CHECKSIGVERIFY	script/script_error.h	/^    SCRIPT_ERR_CHECKSIGVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_CLEANSTACK	script/script_error.h	/^    SCRIPT_ERR_CLEANSTACK,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISABLED_OPCODE	script/script_error.h	/^    SCRIPT_ERR_DISABLED_OPCODE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS	script/script_error.h	/^    SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EQUALVERIFY	script/script_error.h	/^    SCRIPT_ERR_EQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_ERROR_COUNT	script/script_error.h	/^    SCRIPT_ERR_ERROR_COUNT$/;"	e	enum:ScriptError_t
SCRIPT_ERR_EVAL_FALSE	script/script_error.h	/^    SCRIPT_ERR_EVAL_FALSE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_ALTSTACK_OPERATION	script/script_error.h	/^    SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_INVALID_STACK_OPERATION	script/script_error.h	/^    SCRIPT_ERR_INVALID_STACK_OPERATION,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_LAST	script/script_error.h	54;"	d
SCRIPT_ERR_MINIMALDATA	script/script_error.h	/^    SCRIPT_ERR_MINIMALDATA,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_NUMEQUALVERIFY	script/script_error.h	/^    SCRIPT_ERR_NUMEQUALVERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OK	script/script_error.h	/^    SCRIPT_ERR_OK = 0,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_COUNT	script/script_error.h	/^    SCRIPT_ERR_OP_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_OP_RETURN	script/script_error.h	/^    SCRIPT_ERR_OP_RETURN,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEYTYPE	script/script_error.h	/^    SCRIPT_ERR_PUBKEYTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUBKEY_COUNT	script/script_error.h	/^    SCRIPT_ERR_PUBKEY_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_PUSH_SIZE	script/script_error.h	/^    SCRIPT_ERR_PUSH_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SCRIPT_SIZE	script/script_error.h	/^    SCRIPT_ERR_SCRIPT_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_COUNT	script/script_error.h	/^    SCRIPT_ERR_SIG_COUNT,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_DER	script/script_error.h	/^    SCRIPT_ERR_SIG_DER,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HASHTYPE	script/script_error.h	/^    SCRIPT_ERR_SIG_HASHTYPE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_HIGH_S	script/script_error.h	/^    SCRIPT_ERR_SIG_HIGH_S,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_NULLDUMMY	script/script_error.h	/^    SCRIPT_ERR_SIG_NULLDUMMY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_SIG_PUSHONLY	script/script_error.h	/^    SCRIPT_ERR_SIG_PUSHONLY,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_STACK_SIZE	script/script_error.h	/^    SCRIPT_ERR_STACK_SIZE,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNBALANCED_CONDITIONAL	script/script_error.h	/^    SCRIPT_ERR_UNBALANCED_CONDITIONAL,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_UNKNOWN_ERROR	script/script_error.h	/^    SCRIPT_ERR_UNKNOWN_ERROR,$/;"	e	enum:ScriptError_t
SCRIPT_ERR_VERIFY	script/script_error.h	/^    SCRIPT_ERR_VERIFY,$/;"	e	enum:ScriptError_t
SCRIPT_VERIFY_CLEANSTACK	script/interpreter.h	/^    SCRIPT_VERIFY_CLEANSTACK = (1U << 8),$/;"	e	enum:__anon92
SCRIPT_VERIFY_DERSIG	script/interpreter.h	/^    SCRIPT_VERIFY_DERSIG    = (1U << 2),$/;"	e	enum:__anon92
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS	script/interpreter.h	/^    SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),$/;"	e	enum:__anon92
SCRIPT_VERIFY_LOW_S	script/interpreter.h	/^    SCRIPT_VERIFY_LOW_S     = (1U << 3),$/;"	e	enum:__anon92
SCRIPT_VERIFY_MINIMALDATA	script/interpreter.h	/^    SCRIPT_VERIFY_MINIMALDATA = (1U << 6),$/;"	e	enum:__anon92
SCRIPT_VERIFY_NONE	script/interpreter.h	/^    SCRIPT_VERIFY_NONE      = 0,$/;"	e	enum:__anon92
SCRIPT_VERIFY_NULLDUMMY	script/interpreter.h	/^    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),$/;"	e	enum:__anon92
SCRIPT_VERIFY_P2SH	script/interpreter.h	/^    SCRIPT_VERIFY_P2SH      = (1U << 0),$/;"	e	enum:__anon92
SCRIPT_VERIFY_SIGPUSHONLY	script/interpreter.h	/^    SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),$/;"	e	enum:__anon92
SCRIPT_VERIFY_STRICTENC	script/interpreter.h	/^    SCRIPT_VERIFY_STRICTENC = (1U << 1),$/;"	e	enum:__anon92
SD_JOURNAL_SUPPRESS_LOCATION	util.h	39;"	d
SECP256K1_ARG_NONNULL	secp256k1/include/secp256k1.h	38;"	d
SECP256K1_ARG_NONNULL	secp256k1/include/secp256k1.h	40;"	d
SECP256K1_BUILD	secp256k1/src/secp256k1.c	7;"	d	file:
SECP256K1_CONTEXT_SIGN	secp256k1/include/secp256k1.h	52;"	d
SECP256K1_CONTEXT_VERIFY	secp256k1/include/secp256k1.h	51;"	d
SECP256K1_FE_CONST	secp256k1/src/field_10x26.h	36;"	d
SECP256K1_FE_CONST	secp256k1/src/field_10x26.h	38;"	d
SECP256K1_FE_CONST	secp256k1/src/field_5x52.h	31;"	d
SECP256K1_FE_CONST	secp256k1/src/field_5x52.h	33;"	d
SECP256K1_FE_CONST_INNER	secp256k1/src/field_10x26.h	22;"	d
SECP256K1_FE_CONST_INNER	secp256k1/src/field_5x52.h	22;"	d
SECP256K1_FE_STORAGE_CONST	secp256k1/src/field_10x26.h	45;"	d
SECP256K1_FE_STORAGE_CONST	secp256k1/src/field_5x52.h	40;"	d
SECP256K1_GEJ_CONST	secp256k1/src/group.h	31;"	d
SECP256K1_GEJ_CONST_INFINITY	secp256k1/src/group.h	32;"	d
SECP256K1_GE_CONST	secp256k1/src/group.h	20;"	d
SECP256K1_GE_CONST_INFINITY	secp256k1/src/group.h	21;"	d
SECP256K1_GE_STORAGE_CONST	secp256k1/src/group.h	39;"	d
SECP256K1_GNUC_EXT	secp256k1/src/util.h	97;"	d
SECP256K1_GNUC_EXT	secp256k1/src/util.h	99;"	d
SECP256K1_GNUC_PREREQ	secp256k1/include/secp256k1.h	10;"	d
SECP256K1_GNUC_PREREQ	secp256k1/include/secp256k1.h	13;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	19;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	21;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	23;"	d
SECP256K1_INLINE	secp256k1/include/secp256k1.h	26;"	d
SECP256K1_N_0	secp256k1/src/scalar_4x64_impl.h	11;"	d
SECP256K1_N_0	secp256k1/src/scalar_8x32_impl.h	11;"	d
SECP256K1_N_1	secp256k1/src/scalar_4x64_impl.h	12;"	d
SECP256K1_N_1	secp256k1/src/scalar_8x32_impl.h	12;"	d
SECP256K1_N_2	secp256k1/src/scalar_4x64_impl.h	13;"	d
SECP256K1_N_2	secp256k1/src/scalar_8x32_impl.h	13;"	d
SECP256K1_N_3	secp256k1/src/scalar_4x64_impl.h	14;"	d
SECP256K1_N_3	secp256k1/src/scalar_8x32_impl.h	14;"	d
SECP256K1_N_4	secp256k1/src/scalar_8x32_impl.h	15;"	d
SECP256K1_N_5	secp256k1/src/scalar_8x32_impl.h	16;"	d
SECP256K1_N_6	secp256k1/src/scalar_8x32_impl.h	17;"	d
SECP256K1_N_7	secp256k1/src/scalar_8x32_impl.h	18;"	d
SECP256K1_N_C_0	secp256k1/src/scalar_4x64_impl.h	17;"	d
SECP256K1_N_C_0	secp256k1/src/scalar_8x32_impl.h	21;"	d
SECP256K1_N_C_1	secp256k1/src/scalar_4x64_impl.h	18;"	d
SECP256K1_N_C_1	secp256k1/src/scalar_8x32_impl.h	22;"	d
SECP256K1_N_C_2	secp256k1/src/scalar_4x64_impl.h	19;"	d
SECP256K1_N_C_2	secp256k1/src/scalar_8x32_impl.h	23;"	d
SECP256K1_N_C_3	secp256k1/src/scalar_8x32_impl.h	24;"	d
SECP256K1_N_C_4	secp256k1/src/scalar_8x32_impl.h	25;"	d
SECP256K1_N_H_0	secp256k1/src/scalar_4x64_impl.h	22;"	d
SECP256K1_N_H_0	secp256k1/src/scalar_8x32_impl.h	28;"	d
SECP256K1_N_H_1	secp256k1/src/scalar_4x64_impl.h	23;"	d
SECP256K1_N_H_1	secp256k1/src/scalar_8x32_impl.h	29;"	d
SECP256K1_N_H_2	secp256k1/src/scalar_4x64_impl.h	24;"	d
SECP256K1_N_H_2	secp256k1/src/scalar_8x32_impl.h	30;"	d
SECP256K1_N_H_3	secp256k1/src/scalar_4x64_impl.h	25;"	d
SECP256K1_N_H_3	secp256k1/src/scalar_8x32_impl.h	31;"	d
SECP256K1_N_H_4	secp256k1/src/scalar_8x32_impl.h	32;"	d
SECP256K1_N_H_5	secp256k1/src/scalar_8x32_impl.h	33;"	d
SECP256K1_N_H_6	secp256k1/src/scalar_8x32_impl.h	34;"	d
SECP256K1_N_H_7	secp256k1/src/scalar_8x32_impl.h	35;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	72;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	76;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	78;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	80;"	d
SECP256K1_RESTRICT	secp256k1/src/util.h	83;"	d
SECP256K1_SCALAR_CONST	secp256k1/src/scalar_4x64.h	17;"	d
SECP256K1_SCALAR_CONST	secp256k1/src/scalar_8x32.h	17;"	d
SECP256K1_WARN_UNUSED_RESULT	secp256k1/include/secp256k1.h	33;"	d
SECP256K1_WARN_UNUSED_RESULT	secp256k1/include/secp256k1.h	35;"	d
SECP_INCLUDES	secp256k1/Makefile	/^SECP_INCLUDES = $/;"	m
SECP_LIBS	secp256k1/Makefile	/^SECP_LIBS = $/;"	m
SECP_TEST_INCLUDES	secp256k1/Makefile	/^SECP_TEST_INCLUDES =   $/;"	m
SECP_TEST_LIBS	secp256k1/Makefile	/^SECP_TEST_LIBS = -lcrypto  $/;"	m
SECRET_KEY	chainparams.h	/^        SECRET_KEY,$/;"	e	enum:CChainParams::Base58Type
SECURE	ui_interface.h	/^        SECURE              = 0x40000000U,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
SED	Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SED	secp256k1/Makefile	/^SED = \/usr\/bin\/sed$/;"	m
SEND_TYPE_AMOUNT	wallet/wallet.cpp	/^const CAmount SEND_TYPE_AMOUNT = COIN;$/;"	v
SEQUENTIAL	leveldb/doc/bench/db_bench_sqlite3.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SEQUENTIAL	leveldb/doc/bench/db_bench_tree_db.cc	/^    SEQUENTIAL,$/;"	e	enum:leveldb::Benchmark::Order	file:
SER_DISK	serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon11
SER_GETHASH	serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon11
SER_NETWORK	serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon11
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	secp256k1/Makefile	/^SET_MAKE = $/;"	m
SFileRecordHeader	net.h	/^    struct SFileRecordHeader {$/;"	s	class:CNetRecorder
SHARED	leveldb/Makefile	/^SHARED = $(SHARED1) $(SHARED2) $(SHARED3)$/;"	m
SHARED	leveldb/Makefile	/^SHARED = $(SHARED1)$/;"	m
SHARED1	leveldb/Makefile	/^SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)$/;"	m
SHARED2	leveldb/Makefile	/^SHARED2 = $(SHARED1)$/;"	m
SHARED2	leveldb/Makefile	/^SHARED2 = $(SHARED1).$(SHARED_MAJOR)$/;"	m
SHARED3	leveldb/Makefile	/^SHARED3 = $(SHARED1)$/;"	m
SHARED3	leveldb/Makefile	/^SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)$/;"	m
SHARED_LOCKS_REQUIRED	leveldb/port/thread_annotations.h	17;"	d
SHARED_LOCKS_REQUIRED	threadsafety.h	32;"	d
SHARED_LOCKS_REQUIRED	threadsafety.h	51;"	d
SHARED_LOCK_FUNCTION	leveldb/port/thread_annotations.h	41;"	d
SHARED_LOCK_FUNCTION	threadsafety.h	25;"	d
SHARED_LOCK_FUNCTION	threadsafety.h	44;"	d
SHARED_MAJOR	leveldb/Makefile	/^SHARED_MAJOR = 1$/;"	m
SHARED_MINOR	leveldb/Makefile	/^SHARED_MINOR = 18$/;"	m
SHARED_TRYLOCK_FUNCTION	leveldb/port/thread_annotations.h	49;"	d
SHARED_TRYLOCK_FUNCTION	threadsafety.h	27;"	d
SHARED_TRYLOCK_FUNCTION	threadsafety.h	46;"	d
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	secp256k1/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIGCHECK_VERIFICATION_FACTOR	checkpoints.cpp	/^    static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;$/;"	m	namespace:Checkpoints	file:
SIGHASH_ALL	script/interpreter.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon91
SIGHASH_ANYONECANPAY	script/interpreter.h	/^    SIGHASH_ANYONECANPAY = 0x80,$/;"	e	enum:__anon91
SIGHASH_NONE	script/interpreter.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon91
SIGHASH_SINGLE	script/interpreter.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon91
SIMULATORROOT	leveldb/Makefile	/^SIMULATORROOT=$(PLATFORMSROOT)\/iPhoneSimulator.platform\/Developer$/;"	m
SKIPLIST_LENGTH	test/skiplist_tests.cpp	14;"	d	file:
SOCKET	compat.h	/^typedef u_int SOCKET;$/;"	t
SOCKET_ERROR	compat.h	63;"	d
SOCKS5_RECV_TIMEOUT	netbase.cpp	/^static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;$/;"	v	file:
SOURCES	Makefile	/^SOURCES = $(crypto_libbitcoin_crypto_a_SOURCES) \\$/;"	m
SOURCES	secp256k1/Makefile	/^SOURCES = $(libsecp256k1_la_SOURCES) $(bench_internal_SOURCES) \\$/;"	m
SSLIOStreamDevice	rpcprotocol.h	/^    SSLIOStreamDevice(boost::asio::ssl::stream<typename Protocol::socket> &streamIn, bool fUseSSLIn) : stream(streamIn)$/;"	f	class:SSLIOStreamDevice
SSLIOStreamDevice	rpcprotocol.h	/^class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidirectional>$/;"	c
SSL_CFLAGS	Makefile	/^SSL_CFLAGS =  $/;"	m
SSL_LIBS	Makefile	/^SSL_LIBS = -lssl -lcrypto  $/;"	m
SSTTableFileName	leveldb/db/filename.cc	/^std::string SSTTableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
STANDARD_NOT_MANDATORY_VERIFY_FLAGS	script/standard.h	/^static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;$/;"	v
STANDARD_SCRIPT_VERIFY_FLAGS	script/standard.h	/^static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |$/;"	v
STARTING	leveldb/db/skiplist_test.cc	/^    STARTING,$/;"	e	enum:leveldb::TestState::ReaderState	file:
STDC_HEADERS	config/bitcoin-config.h	316;"	d
STDC_HEADERS	secp256k1/src/libsecp256k1-config.h	82;"	d
STEP1	leveldb/util/crc32c.cc	291;"	d	file:
STEP1	leveldb/util/crc32c.cc	327;"	d	file:
STEP4	leveldb/util/crc32c.cc	295;"	d	file:
STEP4	leveldb/util/crc32c.cc	326;"	d	file:
STLLessThan	leveldb/table/table_test.cc	/^  STLLessThan() : cmp(BytewiseComparator()) { }$/;"	f	struct:leveldb::__anon34::STLLessThan
STLLessThan	leveldb/table/table_test.cc	/^  STLLessThan(const Comparator* c) : cmp(c) { }$/;"	f	struct:leveldb::__anon34::STLLessThan
STLLessThan	leveldb/table/table_test.cc	/^struct STLLessThan {$/;"	s	namespace:leveldb::__anon34	file:
STORAGE_LEVELDB_DB_BUILDER_H_	leveldb/db/builder.h	6;"	d
STORAGE_LEVELDB_DB_DBFORMAT_H_	leveldb/db/dbformat.h	6;"	d
STORAGE_LEVELDB_DB_DB_IMPL_H_	leveldb/db/db_impl.h	6;"	d
STORAGE_LEVELDB_DB_DB_ITER_H_	leveldb/db/db_iter.h	6;"	d
STORAGE_LEVELDB_DB_FILENAME_H_	leveldb/db/filename.h	8;"	d
STORAGE_LEVELDB_DB_LOG_FORMAT_H_	leveldb/db/log_format.h	9;"	d
STORAGE_LEVELDB_DB_LOG_READER_H_	leveldb/db/log_reader.h	6;"	d
STORAGE_LEVELDB_DB_LOG_WRITER_H_	leveldb/db/log_writer.h	6;"	d
STORAGE_LEVELDB_DB_MEMTABLE_H_	leveldb/db/memtable.h	6;"	d
STORAGE_LEVELDB_DB_SKIPLIST_H_	leveldb/db/skiplist.h	2;"	d
STORAGE_LEVELDB_DB_SNAPSHOT_H_	leveldb/db/snapshot.h	6;"	d
STORAGE_LEVELDB_DB_TABLE_CACHE_H_	leveldb/db/table_cache.h	8;"	d
STORAGE_LEVELDB_DB_VERSION_EDIT_H_	leveldb/db/version_edit.h	6;"	d
STORAGE_LEVELDB_DB_VERSION_SET_H_	leveldb/db/version_set.h	16;"	d
STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_	leveldb/db/write_batch_internal.h	6;"	d
STORAGE_LEVELDB_HELPERS_MEMENV_MEMENV_H_	leveldb/helpers/memenv/memenv.h	6;"	d
STORAGE_LEVELDB_INCLUDE_CACHE_H_	leveldb/include/leveldb/cache.h	19;"	d
STORAGE_LEVELDB_INCLUDE_COMPARATOR_H_	leveldb/include/leveldb/comparator.h	6;"	d
STORAGE_LEVELDB_INCLUDE_C_H_	leveldb/include/leveldb/c.h	41;"	d
STORAGE_LEVELDB_INCLUDE_DB_H_	leveldb/include/leveldb/db.h	6;"	d
STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_	leveldb/include/leveldb/dumpfile.h	6;"	d
STORAGE_LEVELDB_INCLUDE_ENV_H_	leveldb/include/leveldb/env.h	14;"	d
STORAGE_LEVELDB_INCLUDE_FILTER_POLICY_H_	leveldb/include/leveldb/filter_policy.h	17;"	d
STORAGE_LEVELDB_INCLUDE_ITERATOR_H_	leveldb/include/leveldb/iterator.h	16;"	d
STORAGE_LEVELDB_INCLUDE_OPTIONS_H_	leveldb/include/leveldb/options.h	6;"	d
STORAGE_LEVELDB_INCLUDE_SLICE_H_	leveldb/include/leveldb/slice.h	16;"	d
STORAGE_LEVELDB_INCLUDE_STATUS_H_	leveldb/include/leveldb/status.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_BUILDER_H_	leveldb/include/leveldb/table_builder.h	14;"	d
STORAGE_LEVELDB_INCLUDE_TABLE_H_	leveldb/include/leveldb/table.h	6;"	d
STORAGE_LEVELDB_INCLUDE_WRITE_BATCH_H_	leveldb/include/leveldb/write_batch.h	22;"	d
STORAGE_LEVELDB_PORT_PORT_EXAMPLE_H_	leveldb/port/port_example.h	11;"	d
STORAGE_LEVELDB_PORT_PORT_H_	leveldb/port/port.h	6;"	d
STORAGE_LEVELDB_PORT_PORT_POSIX_H_	leveldb/port/port_posix.h	8;"	d
STORAGE_LEVELDB_PORT_PORT_WIN_H_	leveldb/port/port_win.h	32;"	d
STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_	leveldb/port/thread_annotations.h	6;"	d
STORAGE_LEVELDB_PORT_WIN_STDINT_H_	leveldb/port/win/stdint.h	8;"	d
STORAGE_LEVELDB_TABLE_BLOCK_BUILDER_H_	leveldb/table/block_builder.h	6;"	d
STORAGE_LEVELDB_TABLE_BLOCK_H_	leveldb/table/block.h	6;"	d
STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_	leveldb/table/filter_block.h	10;"	d
STORAGE_LEVELDB_TABLE_FORMAT_H_	leveldb/table/format.h	6;"	d
STORAGE_LEVELDB_TABLE_ITERATOR_WRAPPER_H_	leveldb/table/iterator_wrapper.h	6;"	d
STORAGE_LEVELDB_TABLE_MERGER_H_	leveldb/table/merger.h	6;"	d
STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_	leveldb/table/two_level_iterator.h	6;"	d
STORAGE_LEVELDB_UTIL_ARENA_H_	leveldb/util/arena.h	6;"	d
STORAGE_LEVELDB_UTIL_CODING_H_	leveldb/util/coding.h	11;"	d
STORAGE_LEVELDB_UTIL_CRC32C_H_	leveldb/util/crc32c.h	6;"	d
STORAGE_LEVELDB_UTIL_HASH_H_	leveldb/util/hash.h	8;"	d
STORAGE_LEVELDB_UTIL_HISTOGRAM_H_	leveldb/util/histogram.h	6;"	d
STORAGE_LEVELDB_UTIL_LOGGING_H_	leveldb/util/logging.h	9;"	d
STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_	leveldb/util/mutexlock.h	6;"	d
STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_	leveldb/util/posix_logger.h	9;"	d
STORAGE_LEVELDB_UTIL_RANDOM_H_	leveldb/util/random.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTHARNESS_H_	leveldb/util/testharness.h	6;"	d
STORAGE_LEVELDB_UTIL_TESTUTIL_H_	leveldb/util/testutil.h	6;"	d
STRERROR_R_CHAR_P	config/bitcoin-config.h	319;"	d
STRINGIFY	util.h	76;"	d
STRINGIFY_ARG	util.h	75;"	d
STRINGIZE	clientversion.h	38;"	d
STRIP	Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
STRIP	secp256k1/Makefile	/^STRIP = \/usr\/bin\/strip$/;"	m
SUBDIRS	Makefile	/^SUBDIRS =$/;"	m
SUFFICIENT_FEETXS	policy/fees.h	/^static const double SUFFICIENT_FEETXS = 1;$/;"	v
SUFFICIENT_PRITXS	policy/fees.h	/^static const double SUFFICIENT_PRITXS = .2;$/;"	v
SYSTEMD_JOURNAL_CFLAGS	Makefile	/^SYSTEMD_JOURNAL_CFLAGS = $/;"	m
SYSTEMD_JOURNAL_LIBS	Makefile	/^SYSTEMD_JOURNAL_LIBS = $/;"	m
S_IRUSR	compat.h	68;"	d
S_IWUSR	compat.h	69;"	d
Salvage	wallet/db.cpp	/^bool CDBEnv::Salvage(const std::string& strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)$/;"	f	class:CDBEnv
SanitizeOptions	leveldb/db/db_impl.cc	/^Options SanitizeOptions(const std::string& dbname,$/;"	f	namespace:leveldb
SanitizeString	utilstrencodings.cpp	/^string SanitizeString(const string& str)$/;"	f
SanityCheck	ecwrapper.cpp	/^bool CECKey::SanityCheck()$/;"	f	class:CECKey
SaveBandwidth	net.cpp	/^void CNetRecorder::SaveBandwidth(string addr, int64_t when, int64_t bandwidth)$/;"	f	class:CNetRecorder
SaveError	leveldb/db/c.cc	/^static bool SaveError(char** errptr, const Status& s) {$/;"	f	file:
SaveError	leveldb/table/two_level_iterator.cc	/^  void SaveError(const Status& s) {$/;"	f	class:leveldb::__anon30::TwoLevelIterator	file:
SaveKey	leveldb/db/db_iter.cc	/^  inline void SaveKey(const Slice& k, std::string* dst) {$/;"	f	class:leveldb::__anon22::DBIter	file:
SaveRTT	net.cpp	/^void CNetRecorder::SaveRTT(string addr, int64_t when, int64_t rtt)$/;"	f	class:CNetRecorder
SaveTo	leveldb/db/version_set.cc	/^  void SaveTo(Version* v) {$/;"	f	class:leveldb::VersionSet::Builder
SaveValue	leveldb/db/version_set.cc	/^static void SaveValue(void* arg, const Slice& ikey, const Slice& v) {$/;"	f	namespace:leveldb
Saver	leveldb/db/version_set.cc	/^struct Saver {$/;"	s	namespace:leveldb::__anon24	file:
SaverState	leveldb/db/version_set.cc	/^enum SaverState {$/;"	g	namespace:leveldb::__anon24	file:
ScanForWalletTransactions	wallet/wallet.cpp	/^int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)$/;"	f	class:CWallet
ScanHash	miner.cpp	/^bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phash)$/;"	f	file:
ScanTable	leveldb/db/repair.cc	/^  void ScanTable(uint64_t number) {$/;"	f	class:leveldb::__anon17::Repairer	file:
Schedule	leveldb/include/leveldb/env.h	/^  void Schedule(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
Schedule	leveldb/util/env_posix.cc	/^void PosixEnv::Schedule(void (*function)(void*), void* arg) {$/;"	f	class:leveldb::__anon42::PosixEnv
Schedule	leveldb/util/env_win.cc	/^void Win32Env::Schedule( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
ScheduleProc	leveldb/util/env_win.cc	/^typedef void (*ScheduleProc)(void*) ;$/;"	t	namespace:leveldb::Win32	file:
ScriptError	script/script_error.h	/^} ScriptError;$/;"	t	typeref:enum:ScriptError_t
ScriptErrorString	script/script_error.cpp	/^const char* ScriptErrorString(const ScriptError serror)$/;"	f
ScriptError_t	script/script_error.h	/^typedef enum ScriptError_t$/;"	g
ScriptMap	keystore.h	/^typedef std::map<CScriptID, CScript > ScriptMap;$/;"	t
ScriptPubKeyToJSON	rpcrawtransaction.cpp	/^void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex)$/;"	f
ScriptPubKeyToUniv	core_write.cpp	/^void ScriptPubKeyToUniv(const CScript& scriptPubKey,$/;"	f
ScriptSigArgsExpected	script/standard.cpp	/^int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)$/;"	f
SecureString	support/allocators/secure.h	/^typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;$/;"	t
SeedSpec6	chainparams.h	/^struct SeedSpec6 {$/;"	s
Seek	leveldb/db/db_iter.cc	/^void DBIter::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon22::DBIter
Seek	leveldb/db/db_test.cc	/^    virtual void Seek(const Slice& k) {$/;"	f	class:leveldb::ModelDB::ModelIter
Seek	leveldb/db/memtable.cc	/^  virtual void Seek(const Slice& k) { iter_.Seek(EncodeKey(&tmp_, k)); }$/;"	f	class:leveldb::MemTableIterator
Seek	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::Seek(const Key& target) {$/;"	f	class:leveldb::SkipList::Iterator
Seek	leveldb/db/version_set.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Seek	leveldb/table/block.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::Block::Iter
Seek	leveldb/table/iterator.cc	/^  virtual void Seek(const Slice& target) { }$/;"	f	class:leveldb::__anon29::EmptyIterator
Seek	leveldb/table/iterator_wrapper.h	/^  void Seek(const Slice& k) { assert(iter_); iter_->Seek(k);       Update(); }$/;"	f	class:leveldb::IteratorWrapper
Seek	leveldb/table/merger.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::__anon28::MergingIterator
Seek	leveldb/table/table_test.cc	/^  virtual void Seek(const Slice& target) {$/;"	f	class:leveldb::KeyConvertingIterator
Seek	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::Seek(const Slice& target) {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
Seek	streams.h	/^    bool Seek(uint64_t nPos) {$/;"	f	class:CBufferedFile
SeekRandom	leveldb/db/db_bench.cc	/^  void SeekRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SeekToFirst	leveldb/db/db_iter.cc	/^void DBIter::SeekToFirst() {$/;"	f	class:leveldb::__anon22::DBIter
SeekToFirst	leveldb/db/db_test.cc	/^    virtual void SeekToFirst() { iter_ = map_->begin(); }$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToFirst	leveldb/db/memtable.cc	/^  virtual void SeekToFirst() { iter_.SeekToFirst(); }$/;"	f	class:leveldb::MemTableIterator
SeekToFirst	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToFirst() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToFirst	leveldb/db/version_set.cc	/^  virtual void SeekToFirst() { index_ = 0; }$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToFirst	leveldb/table/block.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::Block::Iter
SeekToFirst	leveldb/table/iterator.cc	/^  virtual void SeekToFirst() { }$/;"	f	class:leveldb::__anon29::EmptyIterator
SeekToFirst	leveldb/table/iterator_wrapper.h	/^  void SeekToFirst()        { assert(iter_); iter_->SeekToFirst(); Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToFirst	leveldb/table/merger.cc	/^  virtual void SeekToFirst() {$/;"	f	class:leveldb::__anon28::MergingIterator
SeekToFirst	leveldb/table/table_test.cc	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToFirst	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToFirst() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SeekToLast	leveldb/db/db_iter.cc	/^void DBIter::SeekToLast() {$/;"	f	class:leveldb::__anon22::DBIter
SeekToLast	leveldb/db/db_test.cc	/^    virtual void SeekToLast() {$/;"	f	class:leveldb::ModelDB::ModelIter
SeekToLast	leveldb/db/memtable.cc	/^  virtual void SeekToLast() { iter_.SeekToLast(); }$/;"	f	class:leveldb::MemTableIterator
SeekToLast	leveldb/db/skiplist.h	/^inline void SkipList<Key,Comparator>::Iterator::SeekToLast() {$/;"	f	class:leveldb::SkipList::Iterator
SeekToLast	leveldb/db/version_set.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Version::LevelFileNumIterator
SeekToLast	leveldb/table/block.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::Block::Iter
SeekToLast	leveldb/table/iterator.cc	/^  virtual void SeekToLast() { }$/;"	f	class:leveldb::__anon29::EmptyIterator
SeekToLast	leveldb/table/iterator_wrapper.h	/^  void SeekToLast()         { assert(iter_); iter_->SeekToLast();  Update(); }$/;"	f	class:leveldb::IteratorWrapper
SeekToLast	leveldb/table/merger.cc	/^  virtual void SeekToLast() {$/;"	f	class:leveldb::__anon28::MergingIterator
SeekToLast	leveldb/table/table_test.cc	/^  virtual void SeekToLast() { iter_->SeekToLast(); }$/;"	f	class:leveldb::KeyConvertingIterator
SeekToLast	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SeekToLast() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SeekToLastValidPos_	net.cpp	/^void CNetRecorder::CFileWriter::SeekToLastValidPos_()$/;"	f	class:CNetRecorder::CFileWriter
SeekToRestartPoint	leveldb/table/block.cc	/^  void SeekToRestartPoint(uint32_t index) {$/;"	f	class:leveldb::Block::Iter	file:
SeenLocal	net.cpp	/^bool SeenLocal(const CService& addr)$/;"	f
Select	addrman.h	/^    CAddrInfo Select()$/;"	f	class:CAddrMan
Select	coincontrol.h	/^    void Select(const COutPoint& output)$/;"	f	class:CCoinControl
SelectBaseParams	chainparamsbase.cpp	/^void SelectBaseParams(CBaseChainParams::Network network)$/;"	f
SelectBaseParamsFromCommandLine	chainparamsbase.cpp	/^bool SelectBaseParamsFromCommandLine()$/;"	f
SelectCoins	wallet/wallet.cpp	/^bool CWallet::SelectCoins(const CAmount& nTargetValue, const type_Color& color, set<pair<const CWalletTx*, unsigned int> >& setCoinsRet,$/;"	f	class:CWallet
SelectCoinsForType	wallet/wallet.cpp	/^bool CWallet::SelectCoinsForType(const CAmount& nTargetValue, const type_Color& send_color, int type, set<std::pair<const CWalletTx*, unsigned int> >& setCoinsRet, CAmount& nValueRet) const$/;"	f	class:CWallet
SelectCoinsMinConf	wallet/wallet.cpp	/^bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,$/;"	f	class:CWallet
SelectParams	chainparams.cpp	/^void SelectParams(CBaseChainParams::Network network) {$/;"	f
SelectParamsFromCommandLine	chainparams.cpp	/^bool SelectParamsFromCommandLine()$/;"	f
Select_	addrman.cpp	/^CAddrInfo CAddrMan::Select_()$/;"	f	class:CAddrMan
SelfTest	test/coins_tests.cpp	/^    void SelfTest() const$/;"	f	class:__anon93::CCoinsViewCacheTest
Semantic_actions	json/json_spirit_reader_template.h	/^        Semantic_actions( Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
Semantic_actions	json/json_spirit_reader_template.h	/^    class Semantic_actions $/;"	c	namespace:json_spirit
Semantic_actions_t	json/json_spirit_reader_template.h	/^        typedef Semantic_actions< Value_type, Iter_type > Semantic_actions_t;$/;"	t	class:json_spirit::Json_grammer
SendBanVote	wallet/rpcwallet.cpp	/^static void SendBanVote(const CTxDestination& address, CWalletTx& wtxNew)$/;"	f	file:
SendBufferSize	net.cpp	/^unsigned int SendBufferSize() { return 1000*GetArg("-maxsendbuffer", 1*1000); }$/;"	f
SendLicense	wallet/rpcwallet.cpp	/^static void SendLicense(const CTxDestination& address, const type_Color& color, CWalletTx& wtxNew)$/;"	f	file:
SendMessages	main.cpp	/^bool SendMessages(CNode* pto, bool fSendTrickle)$/;"	f
SendMessages	net.h	/^    boost::signals2::signal<bool (CNode*, bool), CombinerAll> SendMessages;$/;"	m	struct:CNodeSignals
SendMoney	wallet/rpcwallet.cpp	/^static void SendMoney(const CTxDestination& address, CAmount nValue, const type_Color& color, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)$/;"	f	file:
SendMoneyFromFixedAddress	wallet/rpcwallet.cpp	/^static void SendMoneyFromFixedAddress(const string& strFromAddress, const CTxDestination& address, CAmount nValue, const type_Color& color, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, const string& feeFromAddress = "")$/;"	f	file:
SendMoneyMerge	wallet/rpcwallet.cpp	/^static void SendMoneyMerge(const CTxDestination& address, CAmount nValue, const type_Color& color, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)$/;"	f	file:
SendOrder	wallet/wallet.cpp	/^string CWallet::SendOrder(CWalletTx& wtxNew, const int64_t sell_amount, const type_Color sell_color, const int64_t buy_amount, const type_Color buy_color)$/;"	f	class:CWallet
SendVote	wallet/rpcwallet.cpp	/^static void SendVote(const CTxDestination& address, CWalletTx& wtxNew)$/;"	f	file:
Sequence	leveldb/db/write_batch.cc	/^SequenceNumber WriteBatchInternal::Sequence(const WriteBatch* b) {$/;"	f	class:leveldb::WriteBatchInternal
SequenceNumber	leveldb/db/dbformat.h	/^typedef uint64_t SequenceNumber;$/;"	t	namespace:leveldb
SequentialFile	leveldb/include/leveldb/env.h	/^  SequentialFile() { }$/;"	f	class:leveldb::SequentialFile
SequentialFile	leveldb/include/leveldb/env.h	/^class SequentialFile {$/;"	c	namespace:leveldb
SequentialFileImpl	leveldb/helpers/memenv/memenv.cc	/^  explicit SequentialFileImpl(FileState* file) : file_(file), pos_(0) {$/;"	f	class:leveldb::__anon26::SequentialFileImpl
SequentialFileImpl	leveldb/helpers/memenv/memenv.cc	/^class SequentialFileImpl : public SequentialFile {$/;"	c	namespace:leveldb::__anon26	file:
SerReadWrite	serialize.h	/^inline void SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline void SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)$/;"	f
SerializationOp	addrman.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CAddrInfo
SerializationOp	alert.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CAlert
SerializationOp	alert.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CUnsignedAlert
SerializationOp	amount.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CFeeRate
SerializationOp	bloom.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CBloomFilter
SerializationOp	cache.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	struct:color_license::Owner_
SerializationOp	cache.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	struct:order_list::order_info_
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CDiskBlockIndex
SerializationOp	chain.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	struct:CDiskBlockPos
SerializationOp	compressor.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CTxOutCompressor
SerializationOp	main.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CBlockFileInfo
SerializationOp	main.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	struct:CDiskTxPos
SerializationOp	merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CMerkleBlock
SerializationOp	merkleblock.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CPartialMerkleTree
SerializationOp	netbase.h	/^        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CNetAddr
SerializationOp	netbase.h	/^        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CService
SerializationOp	policy/licenseinfo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CLicenseInfo
SerializationOp	primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CBlock
SerializationOp	primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CBlockHeader
SerializationOp	primitives/block.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	struct:CBlockLocator
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:COutPoint
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CTransaction
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CTxIn
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CTxOut
SerializationOp	primitives/transaction.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	struct:CMutableTransaction
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)$/;"	f	class:CAddress
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)$/;"	f	class:CInv
SerializationOp	protocol.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)$/;"	f	class:CMessageHeader
SerializationOp	rest.cpp	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)$/;"	f	struct:CCoin
SerializationOp	undo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CBlockUndo
SerializationOp	undo.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CTxUndo
SerializationOp	wallet/crypter.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CMasterKey
SerializationOp	wallet/hdkeystore.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CHDChain
SerializationOp	wallet/hdkeystore.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CHDPubKey
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CAccount
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CAccountingEntry
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CKeyPool
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CMerkleTx
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CWalletKey
SerializationOp	wallet/wallet.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CWalletTx
SerializationOp	wallet/walletdb.h	/^    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {$/;"	f	class:CKeyMetadata
Serialize	addrman.h	/^    void Serialize(Stream &s, int nType, int nVersionDummy) const$/;"	f	class:CAddrMan
Serialize	coins.h	/^    void Serialize(Stream &s, int nType, int nVersion) const$/;"	f	class:CCoins
Serialize	compressor.h	/^    void Serialize(Stream &s, int nType, int nVersion) const {$/;"	f	class:CScriptCompressor
Serialize	pubkey.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:CPubKey
Serialize	pubkey.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	struct:CExtPubKey
Serialize	script/interpreter.cpp	/^    void Serialize(S &s, int nType, int nVersion) const {$/;"	f	class:__anon88::CTransactionSignatureSerializer
Serialize	script/interpreter.cpp	/^    void Serialize(S &s, int nType, int nVersion) const$/;"	f	class:__anon88::CBlockHeaderSignatureSerializer
Serialize	serialize.h	/^    void Serialize(Stream &s, int, int) const$/;"	f	class:CVarInt
Serialize	serialize.h	/^    void Serialize(Stream& s, int, int=0) const$/;"	f	class:CFlatData
Serialize	serialize.h	/^    void Serialize(Stream& s, int, int=0) const$/;"	f	class:LimitedString
Serialize	serialize.h	/^inline void Serialize(Stream& os, const T& a, long nType, int nVersion)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; ser_writedata8(s, f); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a,         int, int=0) { ser_writedata8(s, a); } \/\/ TODO Get rid of bare char$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a,       int, int=0) { ser_writedata64(s, ser_double_to_uint64(a)); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a,        int, int=0) { ser_writedata32(s, ser_float_to_uint32(a)); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int16_t a,      int, int=0) { ser_writedata16(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int32_t a,      int, int=0) { ser_writedata32(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64_t a,      int, int=0) { ser_writedata64(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int8_t a,       int, int=0) { ser_writedata8(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint16_t a,     int, int=0) { ser_writedata16(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint32_t a,     int, int=0) { ser_writedata32(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64_t a,     int, int=0) { ser_writedata64(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint8_t a,      int, int=0) { ser_writedata8(s, a); }$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const CScript& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str, int, int)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::list<T, A>& l, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	streams.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:CDataStream
Serialize	test/script_P2SH_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	test/sigopcount_tests.cpp	/^Serialize(const CScript& s)$/;"	f	file:
Serialize	uint256.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:base_blob
Serialize	undo.h	/^    void Serialize(Stream &s, int nType, int nVersion) const {$/;"	f	class:CTxInUndo
SerializeHash	hash.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)$/;"	f
SerializeInput	script/interpreter.cpp	/^    void SerializeInput(S &s, unsigned int nInput, int nType, int nVersion) const {$/;"	f	class:__anon88::CTransactionSignatureSerializer
SerializeOutput	script/interpreter.cpp	/^    void SerializeOutput(S &s, unsigned int nOutput, int nType, int nVersion) const {$/;"	f	class:__anon88::CTransactionSignatureSerializer
SerializeScriptCode	script/interpreter.cpp	/^    void SerializeScriptCode(S &s, int nType, int nVersion) const {$/;"	f	class:__anon88::CTransactionSignatureSerializer
SerializeScriptCode	script/interpreter.cpp	/^    void SerializeScriptCode(S& s, int nType, int nVersion) const$/;"	f	class:__anon88::CBlockHeaderSignatureSerializer
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)$/;"	f
ServiceConnection	rpcserver.cpp	/^void ServiceConnection(AcceptedConnection *conn)$/;"	f
Set	base58.cpp	/^bool CBitcoinAddress::Set(const CKeyID& id)$/;"	f	class:CBitcoinAddress
Set	base58.cpp	/^bool CBitcoinAddress::Set(const CScriptID& id)$/;"	f	class:CBitcoinAddress
Set	base58.cpp	/^bool CBitcoinAddress::Set(const CTxDestination& dest)$/;"	f	class:CBitcoinAddress
Set	key.h	/^    void Set(const T pbegin, const T pend, bool fCompressedIn)$/;"	f	class:CKey
Set	leveldb/db/skiplist_test.cc	/^    void Set(int k, intptr_t v) {$/;"	f	struct:leveldb::ConcurrentTest::State
Set	leveldb/table/iterator_wrapper.h	/^  void Set(Iterator* iter) {$/;"	f	class:leveldb::IteratorWrapper
Set	pubkey.h	/^    void Set(const T pbegin, const T pend)$/;"	f	class:CPubKey
Set	script/sigcache.cpp	/^    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)$/;"	f	class:__anon86::CSignatureCache
SetAddressBook	wallet/wallet.cpp	/^bool CWallet::SetAddressBook(const CTxDestination& address, const string& strName, const string& strPurpose)$/;"	f	class:CWallet
SetAllowed	leveldb/util/env_posix.cc	/^  void SetAllowed(intptr_t v) {$/;"	f	class:leveldb::__anon42::MmapLimiter	file:
SetBackend	coins.cpp	/^void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }$/;"	f	class:CCoinsViewBacked
SetBestBlock	coins.cpp	/^void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {$/;"	f	class:CCoinsViewCache
SetBestChain	validationinterface.h	/^    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;$/;"	m	struct:CMainSignals
SetBestChain	validationinterface.h	/^    virtual void SetBestChain(const CBlockLocator &locator) {}$/;"	f	class:CValidationInterface
SetBestChain	wallet/wallet.cpp	/^void CWallet::SetBestChain(const CBlockLocator& loc)$/;"	f	class:CWallet
SetBool	leveldb/util/env_test.cc	/^static void SetBool(void* ptr) {$/;"	f	namespace:leveldb
SetBroadcastTransactions	wallet/wallet.h	/^    void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }$/;"	f	class:CWallet
SetByte	leveldb/db/log_test.cc	/^  void SetByte(int offset, char new_byte) {$/;"	f	class:leveldb::log::LogTest
SetCapacity	leveldb/util/cache.cc	/^  void SetCapacity(size_t capacity) { capacity_ = capacity; }$/;"	f	class:leveldb::__anon39::LRUCache
SetCompact	arith_uint256.cpp	/^arith_uint256& arith_uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)$/;"	f	class:arith_uint256
SetCompactPointer	leveldb/db/version_edit.h	/^  void SetCompactPointer(int level, const InternalKey& key) {$/;"	f	class:leveldb::VersionEdit
SetComparatorName	leveldb/db/version_edit.h	/^  void SetComparatorName(const Slice& name) {$/;"	f	class:leveldb::VersionEdit
SetContents	leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetContents(WriteBatch* b, const Slice& contents) {$/;"	f	class:leveldb::WriteBatchInternal
SetCount	leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetCount(WriteBatch* b, int n) {$/;"	f	class:leveldb::WriteBatchInternal
SetCrypted	wallet/crypter.cpp	/^bool CCryptoKeyStore::SetCrypted()$/;"	f	class:CCryptoKeyStore
SetCurrentFile	leveldb/db/filename.cc	/^Status SetCurrentFile(Env* env, const std::string& dbname,$/;"	f	namespace:leveldb
SetData	base58.cpp	/^void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)$/;"	f	class:CBase58Data
SetData	base58.cpp	/^void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetDataIterator	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SetDataIterator(Iterator* data_iter) {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SetDefaultKey	wallet/wallet.cpp	/^bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)$/;"	f	class:CWallet
SetFrom	leveldb/db/dbformat.h	/^  void SetFrom(const ParsedInternalKey& p) {$/;"	f	class:leveldb::InternalKey
SetHex	arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	arith_uint256.cpp	/^void base_uint<BITS>::SetHex(const std::string& str)$/;"	f	class:base_uint
SetHex	uint256.cpp	/^void base_blob<BITS>::SetHex(const char* psz)$/;"	f	class:base_blob
SetHex	uint256.cpp	/^void base_blob<BITS>::SetHex(const std::string& str)$/;"	f	class:base_blob
SetIP	netbase.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetKey	base58.cpp	/^void CBitcoinSecret::SetKey(const CKey& vchSecret)$/;"	f	class:CBitcoinSecret
SetKey	base58.h	/^    void SetKey(const K &key)$/;"	f	class:CBitcoinExtKeyBase
SetKey	wallet/crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	wallet/crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLastSequence	leveldb/db/version_edit.h	/^  void SetLastSequence(SequenceNumber seq) {$/;"	f	class:leveldb::VersionEdit
SetLastSequence	leveldb/db/version_set.h	/^  void SetLastSequence(uint64_t s) {$/;"	f	class:leveldb::VersionSet
SetLimit	streams.h	/^    bool SetLimit(uint64_t nPos = (uint64_t)(-1)) {$/;"	f	class:CBufferedFile
SetLimited	net.cpp	/^void SetLimited(enum Network net, bool fLimited)$/;"	f
SetLogNumber	leveldb/db/version_edit.h	/^  void SetLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetMaster	key.cpp	/^void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {$/;"	f	class:CExtKey
SetMaxVersion	wallet/wallet.cpp	/^bool CWallet::SetMaxVersion(int nVersion)$/;"	f	class:CWallet
SetMerkleBranch	wallet/wallet.cpp	/^int CMerkleTx::SetMerkleBranch(const CBlock& block)$/;"	f	class:CMerkleTx
SetMinVersion	wallet/wallet.cpp	/^bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)$/;"	f	class:CWallet
SetMockTime	utiltime.cpp	/^void SetMockTime(int64_t nMockTimeIn)$/;"	f
SetNameProxy	netbase.cpp	/^bool SetNameProxy(const proxyType &addrProxy) {$/;"	f
SetNext	leveldb/db/skiplist.h	/^  void SetNext(int n, Node* x) {$/;"	f	struct:leveldb::SkipList::Node
SetNextFile	leveldb/db/version_edit.h	/^  void SetNextFile(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetNull	alert.cpp	/^void CAlert::SetNull()$/;"	f	class:CAlert
SetNull	alert.cpp	/^void CUnsignedAlert::SetNull()$/;"	f	class:CUnsignedAlert
SetNull	chain.h	/^    void SetNull() { nFile = -1; nPos = 0; }$/;"	f	struct:CDiskBlockPos
SetNull	chain.h	/^    void SetNull()$/;"	f	class:CBlockIndex
SetNull	coincontrol.h	/^    void SetNull()$/;"	f	class:CCoinControl
SetNull	main.h	/^     void SetNull() {$/;"	f	class:CBlockFileInfo
SetNull	main.h	/^    void SetNull() {$/;"	f	class:TxInfo
SetNull	main.h	/^    void SetNull() {$/;"	f	struct:CDiskTxPos
SetNull	primitives/block.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	primitives/block.h	/^    void SetNull()$/;"	f	class:CBlockHeader
SetNull	primitives/block.h	/^    void SetNull()$/;"	f	struct:CBlockLocator
SetNull	primitives/transaction.h	/^    void SetNull() { hash.SetNull(); n = (uint32_t) -1; }$/;"	f	class:COutPoint
SetNull	primitives/transaction.h	/^    void SetNull()$/;"	f	class:CTxOut
SetNull	txmempool.h	/^    void SetNull() { ptx = NULL; n = (uint32_t) -1; }$/;"	f	class:CInPoint
SetNull	uint256.h	/^    void SetNull()$/;"	f	class:base_blob
SetNull	wallet/hdkeystore.h	/^    void SetNull()$/;"	f	class:CHDChain
SetNull	wallet/hdkeystore.h	/^    void SetNull()$/;"	f	class:CHDPubKey
SetNull	wallet/wallet.h	/^    void SetNull()$/;"	f	class:CAccount
SetNull	wallet/wallet.h	/^    void SetNull()$/;"	f	class:CAccountingEntry
SetNull	wallet/wallet.h	/^    void SetNull()$/;"	f	class:CWallet
SetNull	wallet/walletdb.h	/^    void SetNull()$/;"	f	class:CKeyMetadata
SetOutputForFee	main.cpp	/^void Fee::SetOutputForFee(CTxOut &txout, const CScript& scriptPubKeyIn, unsigned int cnt) {$/;"	f	class:Fee
SetOwner	cache.cpp	/^bool ColorLicense::SetOwner(const type_Color &color, const string addr, const CLicenseInfo *pinfo)$/;"	f	class:color_license::ColorLicense
SetPort	netbase.cpp	/^void CService::SetPort(unsigned short portIn)$/;"	f	class:CService
SetPort	netbase.h	27;"	d
SetPos	streams.h	/^    bool SetPos(uint64_t nPos) {$/;"	f	class:CBufferedFile
SetPrevLogNumber	leveldb/db/version_edit.h	/^  void SetPrevLogNumber(uint64_t num) {$/;"	f	class:leveldb::VersionEdit
SetPrivKey	key.cpp	/^bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {$/;"	f	class:CKey
SetProxy	netbase.cpp	/^bool SetProxy(enum Network net, const proxyType &addrProxy) {$/;"	f
SetPubKey	ecwrapper.cpp	/^bool CECKey::SetPubKey(const unsigned char* pubkey, size_t size) {$/;"	f	class:CECKey
SetRPCWarmupFinished	rpcserver.cpp	/^void SetRPCWarmupFinished()$/;"	f
SetRPCWarmupStatus	rpcserver.cpp	/^void SetRPCWarmupStatus(const std::string& newStatus)$/;"	f
SetRaw	netbase.cpp	/^void CNetAddr::SetRaw(Network network, const uint8_t *ip_in)$/;"	f	class:CNetAddr
SetReachable	net.cpp	/^void SetReachable(enum Network net, bool fFlag)$/;"	f
SetRecvVersion	net.h	/^    void SetRecvVersion(int nVersionIn)$/;"	f	class:CNode
SetSequence	leveldb/db/write_batch.cc	/^void WriteBatchInternal::SetSequence(WriteBatch* b, SequenceNumber seq) {$/;"	f	class:leveldb::WriteBatchInternal
SetSockAddr	netbase.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSocketNonBlocking	netbase.cpp	/^bool SetSocketNonBlocking(SOCKET& hSocket, bool fNonBlocking)$/;"	f
SetSpecial	netbase.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetString	base58.cpp	/^bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)$/;"	f	class:CBase58Data
SetString	base58.cpp	/^bool CBase58Data::SetString(const std::string& str)$/;"	f	class:CBase58Data
SetString	base58.cpp	/^bool CBitcoinSecret::SetString(const char* pszSecret)$/;"	f	class:CBitcoinSecret
SetString	base58.cpp	/^bool CBitcoinSecret::SetString(const std::string& strSecret)$/;"	f	class:CBitcoinSecret
SetThreadPriority	util.cpp	/^void SetThreadPriority(int nPriority)$/;"	f
SetTip	chain.cpp	/^void CChain::SetTip(CBlockIndex *pindex) {$/;"	f	class:CChain
SetType	streams.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CAutoFile
SetType	streams.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetVersion	net.h	/^    void SetVersion(int nVersionIn)$/;"	f	class:CNetMessage
SetVersion	streams.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CAutoFile
SetVersion	streams.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
SetupDummyInputs	test/transaction_tests.cpp	/^SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)$/;"	f	file:
SetupEnvironment	util.cpp	/^void SetupEnvironment()$/;"	f
SetupOtherInputs	leveldb/db/version_set.cc	/^void VersionSet::SetupOtherInputs(Compaction* c) {$/;"	f	class:leveldb::VersionSet
Shard	leveldb/util/cache.cc	/^  static uint32_t Shard(uint32_t hash) {$/;"	f	class:leveldb::__anon39::ShardedLRUCache	file:
ShardedLRUCache	leveldb/util/cache.cc	/^  explicit ShardedLRUCache(size_t capacity)$/;"	f	class:leveldb::__anon39::ShardedLRUCache
ShardedLRUCache	leveldb/util/cache.cc	/^class ShardedLRUCache : public Cache {$/;"	c	namespace:leveldb::__anon39	file:
SharedState	leveldb/db/db_bench.cc	/^  SharedState() : cv(&mu) { }$/;"	f	struct:leveldb::__anon15::SharedState
SharedState	leveldb/db/db_bench.cc	/^struct SharedState {$/;"	s	namespace:leveldb::__anon15	file:
ShortSuccessor	leveldb/db/dbformat_test.cc	/^static std::string ShortSuccessor(const std::string& s) {$/;"	f	namespace:leveldb
Shorten	leveldb/db/dbformat_test.cc	/^static std::string Shorten(const std::string& s, const std::string& l) {$/;"	f	namespace:leveldb
ShouldStopBefore	leveldb/db/version_set.cc	/^bool Compaction::ShouldStopBefore(const Slice& internal_key) {$/;"	f	class:leveldb::Compaction
ShowProgress	ui_interface.h	/^    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;$/;"	m	class:CClientUIInterface
ShowProgress	wallet/wallet.h	/^    boost::signals2::signal<void (const std::string &title, int nProgress)> ShowProgress;$/;"	m	class:CWallet
ShrinkDebugFile	util.cpp	/^void ShrinkDebugFile()$/;"	f
ShrinkSize	leveldb/db/log_test.cc	/^  void ShrinkSize(int bytes) {$/;"	f	class:leveldb::log::LogTest
Shutdown	init.cpp	/^void Shutdown()$/;"	f
Shutdown	test/test_bitcoin.cpp	/^void Shutdown(void* parg)$/;"	f
ShutdownRequested	init.cpp	/^bool ShutdownRequested()$/;"	f
ShutdownRequested	test/test_bitcoin.cpp	/^bool ShutdownRequested()$/;"	f
Sigma0	crypto/sha256.cpp	/^uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }$/;"	f	namespace:__anon6::sha256
Sigma0	crypto/sha512.cpp	/^uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }$/;"	f	namespace:__anon8::sha512
Sigma0	secp256k1/src/hash_impl.h	18;"	d
Sigma0	secp256k1/src/hash_impl.h	286;"	d
Sigma1	crypto/sha256.cpp	/^uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }$/;"	f	namespace:__anon6::sha256
Sigma1	crypto/sha512.cpp	/^uint64_t inline Sigma1(uint64_t x) { return (x >> 14 | x << 50) ^ (x >> 18 | x << 46) ^ (x >> 41 | x << 23); }$/;"	f	namespace:__anon8::sha512
Sigma1	secp256k1/src/hash_impl.h	19;"	d
Sigma1	secp256k1/src/hash_impl.h	287;"	d
Sign	key.cpp	/^bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {$/;"	f	class:CKey
Sign1	script/sign.cpp	/^static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)$/;"	f	file:
SignBlockHeader	script/sign.cpp	/^bool SignBlockHeader(const CKeyStore& keystore, CBlock& block, int nHashType)$/;"	f
SignCompact	key.cpp	/^bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {$/;"	f	class:CKey
SignN	script/sign.cpp	/^static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)$/;"	f	file:
SignSignature	script/sign.cpp	/^bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignSignature	script/sign.cpp	/^bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignStep	script/sign.cpp	/^static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,$/;"	f	file:
Signal	leveldb/port/port_posix.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
Signal	leveldb/port/port_win.cc	/^void CondVar::Signal() {$/;"	f	class:leveldb::port::CondVar
SignalAll	leveldb/port/port_posix.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignalAll	leveldb/port/port_win.cc	/^void CondVar::SignalAll() {$/;"	f	class:leveldb::port::CondVar
SignatureHash	script/interpreter.cpp	/^uint256 SignatureHash(const CScript& scriptCode, const CBlock& block, int nHashType)$/;"	f
SignatureHash	script/interpreter.cpp	/^uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignatureHashOld	test/sighash_tests.cpp	/^uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f	file:
Size	leveldb/db/autocompact_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::AutoCompactTest
Size	leveldb/db/db_test.cc	/^  uint64_t Size(const Slice& start, const Slice& limit) {$/;"	f	class:leveldb::DBTest
Size	leveldb/helpers/memenv/memenv.cc	/^  uint64_t Size() const { return size_; }$/;"	f	class:leveldb::__anon26::FileState
Size	leveldb/table/table_test.cc	/^  uint64_t Size() const { return contents_.size(); }$/;"	f	class:leveldb::StringSource
Skewed	leveldb/util/random.h	/^  uint32_t Skewed(int max_log) {$/;"	f	class:leveldb::Random
Skip	leveldb/db/log_test.cc	/^    virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::log::LogTest::StringSource
Skip	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon26::SequentialFileImpl
Skip	leveldb/util/env_posix.cc	/^  virtual Status Skip(uint64_t n) {$/;"	f	class:leveldb::__anon42::PosixSequentialFile
Skip	leveldb/util/env_win.cc	/^Status Win32SequentialFile::Skip( uint64_t n )$/;"	f	class:leveldb::Win32::Win32SequentialFile
SkipEmptyDataBlocksBackward	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksBackward() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SkipEmptyDataBlocksForward	leveldb/table/two_level_iterator.cc	/^void TwoLevelIterator::SkipEmptyDataBlocksForward() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
SkipList	leveldb/db/skiplist.h	/^SkipList<Key,Comparator>::SkipList(Comparator cmp, Arena* arena)$/;"	f	class:leveldb::SkipList
SkipList	leveldb/db/skiplist.h	/^class SkipList {$/;"	c	namespace:leveldb
SkipTest	leveldb/db/skiplist_test.cc	/^class SkipTest { };$/;"	c	namespace:leveldb	file:
SkipToInitialBlock	leveldb/db/log_reader.cc	/^bool Reader::SkipToInitialBlock() {$/;"	f	class:leveldb::log::Reader
SleepForMicroseconds	leveldb/include/leveldb/env.h	/^  void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::EnvWrapper
SleepForMicroseconds	leveldb/util/env_posix.cc	/^  virtual void SleepForMicroseconds(int micros) {$/;"	f	class:leveldb::__anon42::PosixEnv
SleepForMicroseconds	leveldb/util/env_win.cc	/^void Win32Env::SleepForMicroseconds( int micros )$/;"	f	class:leveldb::Win32::Win32Env
Slice	leveldb/include/leveldb/slice.h	/^  Slice() : data_(""), size_(0) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^  Slice(const char* d, size_t n) : data_(d), size_(n) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^  Slice(const char* s) : data_(s), size_(strlen(s)) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^  Slice(const std::string& s) : data_(s.data()), size_(s.size()) { }$/;"	f	class:leveldb::Slice
Slice	leveldb/include/leveldb/slice.h	/^class Slice {$/;"	c	namespace:leveldb
SnappyCompress	leveldb/db/db_bench.cc	/^  void SnappyCompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
SnappyCompressionSupported	leveldb/table/table_test.cc	/^static bool SnappyCompressionSupported() {$/;"	f	namespace:leveldb
SnappyUncompress	leveldb/db/db_bench.cc	/^  void SnappyUncompress(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
Snappy_Compress	leveldb/port/port_posix.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Compress	leveldb/port/port_win.h	/^inline bool Snappy_Compress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	leveldb/port/port_posix.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_GetUncompressedLength	leveldb/port/port_win.h	/^inline bool Snappy_GetUncompressedLength(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	leveldb/port/port_posix.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snappy_Uncompress	leveldb/port/port_win.h	/^inline bool Snappy_Uncompress(const char* input, size_t length,$/;"	f	namespace:leveldb::port
Snapshot	leveldb/include/leveldb/db.h	/^class Snapshot {$/;"	c	namespace:leveldb
SnapshotImpl	leveldb/db/snapshot.h	/^class SnapshotImpl : public Snapshot {$/;"	c	namespace:leveldb
SnapshotList	leveldb/db/snapshot.h	/^  SnapshotList() {$/;"	f	class:leveldb::SnapshotList
SnapshotList	leveldb/db/snapshot.h	/^class SnapshotList {$/;"	c	namespace:leveldb
SocketSendData	net.cpp	/^void SocketSendData(CNode *pnode)$/;"	f
Socks5	netbase.cpp	/^static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)$/;"	f	file:
SoftSetArg	util.cpp	/^bool SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f
SoftSetBoolArg	util.cpp	/^bool SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f
Solver	script/standard.cpp	/^bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)$/;"	f
SomeFileOverlapsRange	leveldb/db/version_set.cc	/^bool SomeFileOverlapsRange($/;"	f	namespace:leveldb
SpecialEnv	leveldb/db/db_test.cc	/^  explicit SpecialEnv(Env* base) : EnvWrapper(base) {$/;"	f	class:leveldb::SpecialEnv
SpecialEnv	leveldb/db/db_test.cc	/^class SpecialEnv : public EnvWrapper {$/;"	c	namespace:leveldb	file:
Spend	coins.cpp	/^bool CCoins::Spend(uint32_t nPos) $/;"	f	class:CCoins
SplitHostPort	netbase.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
StandardDeviation	leveldb/util/histogram.cc	/^double Histogram::StandardDeviation() const {$/;"	f	class:leveldb::Histogram
Start	leveldb/db/db_bench.cc	/^  void Start() {$/;"	f	class:leveldb::__anon15::Stats
Start	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
Start	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Start() {$/;"	f	class:leveldb::Benchmark	file:
StartBlock	leveldb/table/filter_block.cc	/^void FilterBlockBuilder::StartBlock(uint64_t block_offset) {$/;"	f	class:leveldb::FilterBlockBuilder
StartDummyRPCThread	rpcserver.cpp	/^void StartDummyRPCThread()$/;"	f
StartNode	net.cpp	/^void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)$/;"	f
StartPhase	leveldb/db/c_test.c	/^static void StartPhase(const char* name) {$/;"	f	file:
StartRPCThreads	rpcserver.cpp	/^void StartRPCThreads()$/;"	f
StartShutdown	init.cpp	/^void StartShutdown()$/;"	f
StartShutdown	test/test_bitcoin.cpp	/^void StartShutdown()$/;"	f
StartThread	leveldb/include/leveldb/env.h	/^  void StartThread(void (*f)(void*), void* a) {$/;"	f	class:leveldb::EnvWrapper
StartThread	leveldb/util/env_posix.cc	/^void PosixEnv::StartThread(void (*function)(void* arg), void* arg) {$/;"	f	class:leveldb::__anon42::PosixEnv
StartThread	leveldb/util/env_win.cc	/^void Win32Env::StartThread( void (*function)(void* arg), void* arg )$/;"	f	class:leveldb::Win32::Win32Env
StartThreadState	leveldb/util/env_posix.cc	/^struct StartThreadState {$/;"	s	namespace:leveldb::__anon42::__anon43	file:
StartThreadWrapper	leveldb/util/env_posix.cc	/^static void* StartThreadWrapper(void* arg) {$/;"	f	namespace:leveldb::__anon42
Started	rpcserver.cpp	/^    boost::signals2::signal<void ()> Started;$/;"	m	struct:CRPCSignals	file:
State	leveldb/db/skiplist_test.cc	/^    State() {$/;"	f	struct:leveldb::ConcurrentTest::State
State	leveldb/db/skiplist_test.cc	/^  struct State {$/;"	s	class:leveldb::ConcurrentTest	file:
State	leveldb/util/env_test.cc	/^struct State {$/;"	s	namespace:leveldb	file:
State	main.cpp	/^CNodeState *State(NodeId pnode)$/;"	f	namespace:__anon47
Stats	leveldb/db/db_bench.cc	/^  Stats() { Start(); }$/;"	f	class:leveldb::__anon15::Stats
Stats	leveldb/db/db_bench.cc	/^class Stats {$/;"	c	namespace:leveldb::__anon15	file:
Status	leveldb/include/leveldb/status.h	/^  Status() : state_(NULL) { }$/;"	f	class:leveldb::Status
Status	leveldb/include/leveldb/status.h	/^class Status {$/;"	c	namespace:leveldb
Status	leveldb/include/leveldb/status.h	/^inline Status::Status(const Status& s) {$/;"	f	class:leveldb::Status
Status	leveldb/util/status.cc	/^Status::Status(Code code, const Slice& msg, const Slice& msg2) {$/;"	f	class:leveldb::Status
StdoutPrinter	leveldb/db/leveldb_main.cc	/^class StdoutPrinter : public WritableFile {$/;"	c	namespace:leveldb::__anon25	file:
StepErrorCheck	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void StepErrorCheck(int status) {$/;"	f	file:
Stop	leveldb/db/db_bench.cc	/^  void Stop() {$/;"	f	class:leveldb::__anon15::Stats
Stop	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
Stop	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Stop(const Slice& name) {$/;"	f	class:leveldb::Benchmark	file:
StopNode	net.cpp	/^bool StopNode()$/;"	f
StopRPCThreads	rpcserver.cpp	/^void StopRPCThreads()$/;"	f
Stopped	rpcserver.cpp	/^    boost::signals2::signal<void ()> Stopped;$/;"	m	struct:CRPCSignals	file:
Stream_reader	json/json_spirit_stream_reader.h	/^        Stream_reader( Istream_type& is )$/;"	f	class:json_spirit::Stream_reader
Stream_reader	json/json_spirit_stream_reader.h	/^    class Stream_reader$/;"	c	namespace:json_spirit
Stream_reader_thrower	json/json_spirit_stream_reader.h	/^        Stream_reader_thrower( Istream_type& is )$/;"	f	class:json_spirit::Stream_reader_thrower
Stream_reader_thrower	json/json_spirit_stream_reader.h	/^    class Stream_reader_thrower$/;"	c	namespace:json_spirit
StringDest	leveldb/db/log_test.cc	/^  class StringDest : public WritableFile {$/;"	c	class:leveldb::log::LogTest	file:
StringMap	wallet/wallet.h	/^    typedef std::map<std::string, std::string> StringMap;$/;"	t	class:CAddressBookData
StringSink	leveldb/table/table_test.cc	/^class StringSink: public WritableFile {$/;"	c	namespace:leveldb	file:
StringSource	leveldb/db/log_test.cc	/^    StringSource() : force_error_(false), returned_partial_(false) { }$/;"	f	class:leveldb::log::LogTest::StringSource
StringSource	leveldb/db/log_test.cc	/^  class StringSource : public SequentialFile {$/;"	c	class:leveldb::log::LogTest	file:
StringSource	leveldb/table/table_test.cc	/^  StringSource(const Slice& contents)$/;"	f	class:leveldb::StringSource
StringSource	leveldb/table/table_test.cc	/^class StringSource: public RandomAccessFile {$/;"	c	namespace:leveldb	file:
String_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::String_type String_type;$/;"	t	class:json_spirit::Semantic_actions
String_type	json/json_spirit_value.h	/^        typedef String String_type;$/;"	t	struct:json_spirit::Config_map
String_type	json/json_spirit_value.h	/^        typedef String String_type;$/;"	t	struct:json_spirit::Config_vector
String_type	json/json_spirit_value.h	/^        typedef typename Config::String_type String_type;$/;"	t	class:json_spirit::Value_impl
String_type	json/json_spirit_value.h	/^        typedef typename Config::String_type String_type;$/;"	t	struct:json_spirit::Pair_impl
String_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::String_type String_type;$/;"	t	class:json_spirit::Generator
SwapRandom	addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
Sync	leveldb/db/leveldb_main.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon25::StdoutPrinter
Sync	leveldb/db/log_test.cc	/^    virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::log::LogTest::StringDest
Sync	leveldb/helpers/memenv/memenv.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::__anon26::WritableFileImpl
Sync	leveldb/table/table_test.cc	/^  virtual Status Sync() { return Status::OK(); }$/;"	f	class:leveldb::StringSink
Sync	leveldb/util/env_posix.cc	/^  virtual Status Sync() {$/;"	f	class:leveldb::__anon42::PosixWritableFile
Sync	leveldb/util/env_win.cc	/^Status Win32MapFile::Sync()$/;"	f	class:leveldb::Win32::Win32MapFile
Sync	leveldbwrapper.h	/^    bool Sync() throw(leveldb_error)$/;"	f	class:CLevelDBWrapper
SyncDirIfManifest	leveldb/util/env_posix.cc	/^  Status SyncDirIfManifest() {$/;"	f	class:leveldb::__anon42::PosixWritableFile
SyncMetaData	wallet/wallet.cpp	/^void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)$/;"	f	class:CWallet
SyncTransaction	validationinterface.h	/^    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;$/;"	m	struct:CMainSignals
SyncTransaction	validationinterface.h	/^    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {}$/;"	f	class:CValidationInterface
SyncTransaction	wallet/wallet.cpp	/^void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)$/;"	f	class:CWallet
SyncWithWallets	validationinterface.cpp	/^void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {$/;"	f
T	test/hash_tests.cpp	20;"	d	file:
T	test/hash_tests.cpp	47;"	d	file:
TABLE_TEST	leveldb/table/table_test.cc	/^  TABLE_TEST,$/;"	e	enum:leveldb::TestType	file:
TCONCAT	leveldb/util/testharness.h	114;"	d
TCONCAT1	leveldb/util/testharness.h	115;"	d
TEST	leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadAll) {$/;"	f	namespace:leveldb
TEST	leveldb/db/autocompact_test.cc	/^TEST(AutoCompactTest, ReadHalf) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CompactionInputErrorParanoid) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, CorruptedDescriptor) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, MissingDescriptor) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, NewFileErrorDuringWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, RecoverWriteError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, Recovery) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, SequenceNumberRecovery) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFile) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileIndexData) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, TableFileRepair) {$/;"	f	namespace:leveldb
TEST	leveldb/db/corruption_test.cc	/^TEST(CorruptionTest, UnrelatedKeys) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ApproximateSizes_MixOfSmallAndLarge) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, BloomFilter) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, CompactionsGenerateMultipleFiles) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ComparatorCheck) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, CustomComparator) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, DBOpen_Options) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers1) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, DeletionMarkers2) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, FilesDeletedAfterCompaction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetEncountersEmptyLevel) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetFromImmutableLayer) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetFromVersions) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetLevel0Ordering) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetOrderedByLevels) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetPicksCorrectFile) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, GetSnapshot) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, HiddenValuesAreRemoved) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterEmpty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterMulti) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterMultiWithDelete) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterSingle) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IterSmallAndLargeMix) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, IteratorPinsRef) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_a) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, L0_CompactionBug_Issue44_b) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Locking) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ManifestWriteError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ManualCompaction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, MinorCompactionsHappen) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, MissingSSTFile) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, MultiThreaded) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, NoSpace) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, NonWritableFileSystem) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, OverlapInLevel0) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, PutDeleteGet) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Randomized) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Recover) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RecoverDuringMemtableCompaction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RecoverWithLargeLog) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RecoveryWithEmptyLog) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, RepeatedWritesToSameKey) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, Snapshot) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, SparseMerge) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, StillReadSST) {$/;"	f	namespace:leveldb
TEST	leveldb/db/db_test.cc	/^TEST(DBTest, WriteSyncError) {$/;"	f	namespace:leveldb
TEST	leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortSeparator) {$/;"	f	namespace:leveldb
TEST	leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKeyShortestSuccessor) {$/;"	f	namespace:leveldb
TEST	leveldb/db/dbformat_test.cc	/^TEST(FormatTest, InternalKey_EncodeDecode) {$/;"	f	namespace:leveldb
TEST	leveldb/db/filename_test.cc	/^TEST(FileNameTest, Construction) {$/;"	f	namespace:leveldb
TEST	leveldb/db/filename_test.cc	/^TEST(FileNameTest, Parse) {$/;"	f	namespace:leveldb
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, AlignedEof) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, BadLength) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, BadLengthAtEndIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, BadRecordType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ChecksumMismatch) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, Empty) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ErrorJoinsRecords) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, Fragmentation) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ManyBlocks) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, MarginalTrailer2) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, MissingLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, PartialLastIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, RandomRead) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadEnd) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadError) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthFirstBlockTrailer) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthLastBlock) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthMiddleBlock) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthOneOff) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadFourthStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadPastEnd) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondOneOff) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadSecondTenThousand) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdOneOff) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadThirdStart) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ReadWrite) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, ShortTrailer) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, TruncatedTrailingRecordIsIgnored) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFirstType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedFullType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedLastType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/log_test.cc	/^TEST(LogTest, UnexpectedMiddleType) {$/;"	f	namespace:leveldb::log
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent1) { RunConcurrent(1); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent2) { RunConcurrent(2); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent3) { RunConcurrent(3); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent4) { RunConcurrent(4); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Concurrent5) { RunConcurrent(5); }$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, ConcurrentWithoutThreads) {$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/skiplist_test.cc	/^TEST(SkipTest, InsertAndLookup) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_edit_test.cc	/^TEST(VersionEditTest, EncodeDecode) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Multiple) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, MultipleNullBoundaries) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlapSequenceChecks) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, OverlappingFiles) {$/;"	f	namespace:leveldb
TEST	leveldb/db/version_set_test.cc	/^TEST(FindFileTest, Single) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Append) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Corruption) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/db/write_batch_test.cc	/^TEST(WriteBatchTest, Multiple) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Basics) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, DBTest) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, LargeWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Locks) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, Misc) {$/;"	f	namespace:leveldb
TEST	leveldb/helpers/memenv/memenv_test.cc	/^TEST(MemEnvTest, ReadWrite) {$/;"	f	namespace:leveldb
TEST	leveldb/issues/issue178_test.cc	/^TEST(Issue178, Test) {$/;"	f	namespace:__anon12
TEST	leveldb/issues/issue200_test.cc	/^TEST(Issue200, Test) {$/;"	f	namespace:leveldb
TEST	leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, EmptyBuilder) {$/;"	f	namespace:leveldb
TEST	leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, MultiChunk) {$/;"	f	namespace:leveldb
TEST	leveldb/table/filter_block_test.cc	/^TEST(FilterBlockTest, SingleChunk) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, Randomized) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, RandomizedLongDB) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleEmptyKey) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleMulti) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleSingle) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, SimpleSpecialKey) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(Harness, ZeroRestartPointsInBlock) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(MemTableTest, Simple) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfCompressed) {$/;"	f	namespace:leveldb
TEST	leveldb/table/table_test.cc	/^TEST(TableTest, ApproximateOffsetOfPlain) {$/;"	f	namespace:leveldb
TEST	leveldb/util/arena_test.cc	/^TEST(ArenaTest, Empty) {$/;"	f	namespace:leveldb
TEST	leveldb/util/arena_test.cc	/^TEST(ArenaTest, Simple) {$/;"	f	namespace:leveldb
TEST	leveldb/util/bloom_test.cc	/^TEST(BloomTest, EmptyFilter) {$/;"	f	namespace:leveldb
TEST	leveldb/util/bloom_test.cc	/^TEST(BloomTest, Small) {$/;"	f	namespace:leveldb
TEST	leveldb/util/bloom_test.cc	/^TEST(BloomTest, VaryingLengths) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, EntriesArePinned) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, Erase) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, EvictionPolicy) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, HeavyEntries) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, HitAndMiss) {$/;"	f	namespace:leveldb
TEST	leveldb/util/cache_test.cc	/^TEST(CacheTest, NewId) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, EncodingOutput) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Fixed32) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Fixed64) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Strings) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint32) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Overflow) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint32Truncation) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint64) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Overflow) {$/;"	f	namespace:leveldb
TEST	leveldb/util/coding_test.cc	/^TEST(Coding, Varint64Truncation) {$/;"	f	namespace:leveldb
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, Extend) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, Mask) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, StandardResults) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/crc32c_test.cc	/^TEST(CRC, Values) {$/;"	f	namespace:leveldb::crc32c
TEST	leveldb/util/env_test.cc	/^TEST(EnvPosixTest, RunImmediately) {$/;"	f	namespace:leveldb
TEST	leveldb/util/env_test.cc	/^TEST(EnvPosixTest, RunMany) {$/;"	f	namespace:leveldb
TEST	leveldb/util/env_test.cc	/^TEST(EnvPosixTest, StartThread) {$/;"	f	namespace:leveldb
TEST	leveldb/util/hash_test.cc	/^TEST(HASH, SignedUnsignedIssue) {$/;"	f	namespace:leveldb
TEST	leveldb/util/testharness.h	117;"	d
TESTDEFS	Makefile	/^TESTDEFS =  -DBOOST_TEST_DYN_LINK$/;"	m
TESTHARNESS	leveldb/Makefile	/^TESTHARNESS = .\/util\/testharness.o $(TESTUTIL)$/;"	m
TESTNET	chainparamsbase.h	/^        TESTNET,$/;"	e	enum:CBaseChainParams::Network
TESTS	Makefile	/^TESTS = $(am__EXEEXT_3)$/;"	m
TESTS	leveldb/Makefile	/^TESTS = \\$/;"	m
TESTS	secp256k1/Makefile	/^TESTS = tests$(EXEEXT)$/;"	m
TESTUTIL	leveldb/Makefile	/^TESTUTIL = .\/util\/testutil.o$/;"	m
TEST_BINARY	Makefile	/^TEST_BINARY = test\/test_bitcoin$(EXEEXT)$/;"	m
TEST_CompactMemTable	leveldb/db/db_impl.cc	/^Status DBImpl::TEST_CompactMemTable() {$/;"	f	class:leveldb::DBImpl
TEST_CompactRange	leveldb/db/db_impl.cc	/^void DBImpl::TEST_CompactRange(int level, const Slice* begin,const Slice* end) {$/;"	f	class:leveldb::DBImpl
TEST_EXTENSIONS	Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_EXTENSIONS	secp256k1/Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_FAILURE	secp256k1/src/util.h	19;"	d
TEST_FAILURE	secp256k1/src/util.h	24;"	d
TEST_LOGS	Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOGS	secp256k1/Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOG_COMPILE	Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_COMPILE	secp256k1/Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_DRIVER	Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_LOG_DRIVER	secp256k1/Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_MaxNextLevelOverlappingBytes	leveldb/db/db_impl.cc	/^int64_t DBImpl::TEST_MaxNextLevelOverlappingBytes() {$/;"	f	class:leveldb::DBImpl
TEST_NewInternalIterator	leveldb/db/db_impl.cc	/^Iterator* DBImpl::TEST_NewInternalIterator() {$/;"	f	class:leveldb::DBImpl
TEST_SRCDIR	Makefile	/^TEST_SRCDIR = test$/;"	m
TEST_SUITE_LOG	Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TEST_SUITE_LOG	secp256k1/Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
THREAD_PRIORITY_ABOVE_NORMAL	compat.h	88;"	d
THREAD_PRIORITY_BELOW_NORMAL	compat.h	86;"	d
THREAD_PRIORITY_LOWEST	compat.h	85;"	d
THREAD_PRIORITY_NORMAL	compat.h	87;"	d
TIMEOUT_INTERVAL	net.h	/^static const int TIMEOUT_INTERVAL = 20 * 60;$/;"	v
TINYFORMAT_ARGTYPES	tinyformat.h	321;"	d
TINYFORMAT_ARGTYPES_1	tinyformat.h	362;"	d
TINYFORMAT_ARGTYPES_10	tinyformat.h	371;"	d
TINYFORMAT_ARGTYPES_11	tinyformat.h	372;"	d
TINYFORMAT_ARGTYPES_12	tinyformat.h	373;"	d
TINYFORMAT_ARGTYPES_13	tinyformat.h	374;"	d
TINYFORMAT_ARGTYPES_14	tinyformat.h	375;"	d
TINYFORMAT_ARGTYPES_15	tinyformat.h	376;"	d
TINYFORMAT_ARGTYPES_16	tinyformat.h	377;"	d
TINYFORMAT_ARGTYPES_2	tinyformat.h	363;"	d
TINYFORMAT_ARGTYPES_3	tinyformat.h	364;"	d
TINYFORMAT_ARGTYPES_4	tinyformat.h	365;"	d
TINYFORMAT_ARGTYPES_5	tinyformat.h	366;"	d
TINYFORMAT_ARGTYPES_6	tinyformat.h	367;"	d
TINYFORMAT_ARGTYPES_7	tinyformat.h	368;"	d
TINYFORMAT_ARGTYPES_8	tinyformat.h	369;"	d
TINYFORMAT_ARGTYPES_9	tinyformat.h	370;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	tinyformat.h	297;"	d
TINYFORMAT_DEFINE_FORMATVALUE_CHAR	tinyformat.h	313;"	d
TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE	tinyformat.h	510;"	d
TINYFORMAT_DEFINE_FORMAT_C_STRING_TRUNCATE	tinyformat.h	525;"	d
TINYFORMAT_ERROR	tinyformat.h	112;"	d
TINYFORMAT_ERROR	tinyformat.h	127;"	d
TINYFORMAT_FOREACH_ARGNUM	tinyformat.h	430;"	d
TINYFORMAT_H_INCLUDED	tinyformat.h	102;"	d
TINYFORMAT_MAKE_FORMAT_DETAIL	tinyformat.h	876;"	d
TINYFORMAT_MAKE_FORMAT_DETAIL	tinyformat.h	885;"	d
TINYFORMAT_NOINLINE	tinyformat.h	137;"	d
TINYFORMAT_NOINLINE	tinyformat.h	139;"	d
TINYFORMAT_NOINLINE	tinyformat.h	141;"	d
TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND	tinyformat.h	147;"	d
TINYFORMAT_PASSARGS	tinyformat.h	323;"	d
TINYFORMAT_PASSARGS_1	tinyformat.h	396;"	d
TINYFORMAT_PASSARGS_10	tinyformat.h	405;"	d
TINYFORMAT_PASSARGS_11	tinyformat.h	406;"	d
TINYFORMAT_PASSARGS_12	tinyformat.h	407;"	d
TINYFORMAT_PASSARGS_13	tinyformat.h	408;"	d
TINYFORMAT_PASSARGS_14	tinyformat.h	409;"	d
TINYFORMAT_PASSARGS_15	tinyformat.h	410;"	d
TINYFORMAT_PASSARGS_16	tinyformat.h	411;"	d
TINYFORMAT_PASSARGS_2	tinyformat.h	397;"	d
TINYFORMAT_PASSARGS_3	tinyformat.h	398;"	d
TINYFORMAT_PASSARGS_4	tinyformat.h	399;"	d
TINYFORMAT_PASSARGS_5	tinyformat.h	400;"	d
TINYFORMAT_PASSARGS_6	tinyformat.h	401;"	d
TINYFORMAT_PASSARGS_7	tinyformat.h	402;"	d
TINYFORMAT_PASSARGS_8	tinyformat.h	403;"	d
TINYFORMAT_PASSARGS_9	tinyformat.h	404;"	d
TINYFORMAT_PASSARGS_TAIL	tinyformat.h	324;"	d
TINYFORMAT_PASSARGS_TAIL_1	tinyformat.h	413;"	d
TINYFORMAT_PASSARGS_TAIL_10	tinyformat.h	422;"	d
TINYFORMAT_PASSARGS_TAIL_11	tinyformat.h	423;"	d
TINYFORMAT_PASSARGS_TAIL_12	tinyformat.h	424;"	d
TINYFORMAT_PASSARGS_TAIL_13	tinyformat.h	425;"	d
TINYFORMAT_PASSARGS_TAIL_14	tinyformat.h	426;"	d
TINYFORMAT_PASSARGS_TAIL_15	tinyformat.h	427;"	d
TINYFORMAT_PASSARGS_TAIL_16	tinyformat.h	428;"	d
TINYFORMAT_PASSARGS_TAIL_2	tinyformat.h	414;"	d
TINYFORMAT_PASSARGS_TAIL_3	tinyformat.h	415;"	d
TINYFORMAT_PASSARGS_TAIL_4	tinyformat.h	416;"	d
TINYFORMAT_PASSARGS_TAIL_5	tinyformat.h	417;"	d
TINYFORMAT_PASSARGS_TAIL_6	tinyformat.h	418;"	d
TINYFORMAT_PASSARGS_TAIL_7	tinyformat.h	419;"	d
TINYFORMAT_PASSARGS_TAIL_8	tinyformat.h	420;"	d
TINYFORMAT_PASSARGS_TAIL_9	tinyformat.h	421;"	d
TINYFORMAT_USE_VARIADIC_TEMPLATES	tinyformat.h	132;"	d
TINYFORMAT_VARARGS	tinyformat.h	322;"	d
TINYFORMAT_VARARGS_1	tinyformat.h	379;"	d
TINYFORMAT_VARARGS_10	tinyformat.h	388;"	d
TINYFORMAT_VARARGS_11	tinyformat.h	389;"	d
TINYFORMAT_VARARGS_12	tinyformat.h	390;"	d
TINYFORMAT_VARARGS_13	tinyformat.h	391;"	d
TINYFORMAT_VARARGS_14	tinyformat.h	392;"	d
TINYFORMAT_VARARGS_15	tinyformat.h	393;"	d
TINYFORMAT_VARARGS_16	tinyformat.h	394;"	d
TINYFORMAT_VARARGS_2	tinyformat.h	380;"	d
TINYFORMAT_VARARGS_3	tinyformat.h	381;"	d
TINYFORMAT_VARARGS_4	tinyformat.h	382;"	d
TINYFORMAT_VARARGS_5	tinyformat.h	383;"	d
TINYFORMAT_VARARGS_6	tinyformat.h	384;"	d
TINYFORMAT_VARARGS_7	tinyformat.h	385;"	d
TINYFORMAT_VARARGS_8	tinyformat.h	386;"	d
TINYFORMAT_VARARGS_9	tinyformat.h	387;"	d
TINYFORMAT_WRAP_FORMAT	tinyformat.h	981;"	d
TINYFORMAT_WRAP_FORMAT_EXTRA_ARGS	tinyformat.h	969;"	d
TINYFORMAT_WRAP_FORMAT_N	tinyformat.h	970;"	d
TRY_LOCK	sync.h	167;"	d
TX_MULTISIG	script/standard.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	script/standard.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_NULL_DATA	script/standard.h	/^    TX_NULL_DATA,$/;"	e	enum:txnouttype
TX_PUBKEY	script/standard.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	script/standard.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	script/standard.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
Table	leveldb/db/memtable.h	/^  typedef SkipList<const char*, KeyComparator> Table;$/;"	t	class:leveldb::MemTable
Table	leveldb/include/leveldb/table.h	/^  explicit Table(Rep* rep) { rep_ = rep; }$/;"	f	class:leveldb::Table
Table	leveldb/include/leveldb/table.h	/^class Table {$/;"	c	namespace:leveldb
TableAndFile	leveldb/db/table_cache.cc	/^struct TableAndFile {$/;"	s	namespace:leveldb	file:
TableBuilder	leveldb/include/leveldb/table_builder.h	/^class TableBuilder {$/;"	c	namespace:leveldb
TableBuilder	leveldb/table/table_builder.cc	/^TableBuilder::TableBuilder(const Options& options, WritableFile* file)$/;"	f	class:leveldb::TableBuilder
TableCache	leveldb/db/table_cache.cc	/^TableCache::TableCache(const std::string& dbname,$/;"	f	class:leveldb::TableCache
TableCache	leveldb/db/table_cache.h	/^class TableCache {$/;"	c	namespace:leveldb
TableConstructor	leveldb/table/table_test.cc	/^  TableConstructor(const Comparator* cmp)$/;"	f	class:leveldb::TableConstructor
TableConstructor	leveldb/table/table_test.cc	/^class TableConstructor: public Constructor {$/;"	c	namespace:leveldb	file:
TableFileName	leveldb/db/filename.cc	/^std::string TableFileName(const std::string& name, uint64_t number) {$/;"	f	namespace:leveldb
TableInfo	leveldb/db/repair.cc	/^  struct TableInfo {$/;"	s	class:leveldb::__anon17::Repairer	file:
TableTest	leveldb/table/table_test.cc	/^class TableTest { };$/;"	c	namespace:leveldb	file:
Tag	leveldb/db/version_edit.cc	/^enum Tag {$/;"	g	namespace:leveldb	file:
Tc_t	cache.h	/^typedef map<pair<type_Color, type_Color>, vector<order_info_> > Tc_t;$/;"	t	namespace:order_list::__anon57
Tc_t	cache.h	/^typedef std::list<std::pair<std::string, unsigned int> > Tc_t;$/;"	t	namespace:block_miner::__anon55
Tc_t	cache.h	/^typedef std::map<type_Color, Owner_> Tc_t;$/;"	t	namespace:color_license::__anon54
Tc_t	cache.h	/^typedef std::map<type_Color, std::map<std::string, int64_t> > Tc_t;$/;"	t	namespace:activate_addr::__anon56
Tc_t	cache.h	/^typedef std::set<std::string> Tc_t;$/;"	t	namespace:alliance_member::__anon53
Te_t	cache.h	/^typedef TxInfo Te_t;$/;"	t	namespace:order_list::__anon57
Te_t	cache.h	/^typedef std::pair<type_Color, Owner_> Te_t;$/;"	t	namespace:color_license::__anon54
Te_t	cache.h	/^typedef std::pair<type_Color, std::string> Te_t;$/;"	t	namespace:activate_addr::__anon56
Te_t	cache.h	/^typedef std::string Te_t;$/;"	t	namespace:alliance_member::__anon53
Te_t	cache.h	/^typedef std::string Te_t;$/;"	t	namespace:block_miner::__anon55
TempFileName	leveldb/db/filename.cc	/^std::string TempFileName(const std::string& dbname, uint64_t number) {$/;"	f	namespace:leveldb
Test	leveldb/table/table_test.cc	/^  void Test(Random* rnd) {$/;"	f	class:leveldb::Harness
Test	leveldb/util/testharness.cc	/^struct Test {$/;"	s	namespace:leveldb::test::__anon41	file:
Test	test/script_tests.cpp	/^    TestBuilder& Test(bool expect)$/;"	f	class:__anon94::TestBuilder
TestAddrTypeVisitor	test/base58_tests.cpp	/^    TestAddrTypeVisitor(const std::string &exp_addrType) : exp_addrType(exp_addrType) { }$/;"	f	class:TestAddrTypeVisitor
TestAddrTypeVisitor	test/base58_tests.cpp	/^class TestAddrTypeVisitor : public boost::static_visitor<bool>$/;"	c	file:
TestArgs	leveldb/table/table_test.cc	/^struct TestArgs {$/;"	s	namespace:leveldb	file:
TestBackwardScan	leveldb/table/table_test.cc	/^  void TestBackwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestBlockSubsidyHalvings	test/main_tests.cpp	/^static void TestBlockSubsidyHalvings(const Consensus::Params& consensusParams)$/;"	f	file:
TestBlockSubsidyHalvings	test/main_tests.cpp	/^static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)$/;"	f	file:
TestBlockValidity	main.cpp	/^bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)$/;"	f
TestBuilder	test/script_tests.cpp	/^    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)$/;"	f	class:__anon94::TestBuilder
TestBuilder	test/script_tests.cpp	/^class TestBuilder$/;"	c	namespace:__anon94	file:
TestDecode	test/compress_tests.cpp	/^bool static TestDecode(uint64_t in) {$/;"	f	file:
TestDerivation	test/bip32_tests.cpp	/^struct TestDerivation {$/;"	s	file:
TestEncode	test/compress_tests.cpp	/^bool static TestEncode(uint64_t in) {$/;"	f	file:
TestEncodeDecode	leveldb/db/version_edit_test.cc	/^static void TestEncodeDecode(const VersionEdit& edit) {$/;"	f	namespace:leveldb
TestForwardScan	leveldb/table/table_test.cc	/^  void TestForwardScan(const std::vector<std::string>& keys,$/;"	f	class:leveldb::Harness
TestHMACSHA256	test/crypto_tests.cpp	/^void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f
TestHMACSHA512	test/crypto_tests.cpp	/^void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {$/;"	f
TestHashFilter	leveldb/table/filter_block_test.cc	/^class TestHashFilter : public FilterPolicy {$/;"	c	namespace:leveldb	file:
TestKey	leveldb/db/dbformat_test.cc	/^static void TestKey(const std::string& key,$/;"	f	namespace:leveldb
TestLocker	test/allocator_tests.cpp	/^class TestLocker$/;"	c	file:
TestPair	test/compress_tests.cpp	/^bool static TestPair(uint64_t dec, uint64_t enc) {$/;"	f	file:
TestParse	test/netbase_tests.cpp	/^bool static TestParse(string src, string canon)$/;"	f	file:
TestPayloadVisitor	test/base58_tests.cpp	/^    TestPayloadVisitor(std::vector<unsigned char> &exp_payload) : exp_payload(exp_payload) { }$/;"	f	class:TestPayloadVisitor
TestPayloadVisitor	test/base58_tests.cpp	/^class TestPayloadVisitor : public boost::static_visitor<bool>$/;"	c	file:
TestRIPEMD160	test/crypto_tests.cpp	/^void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}$/;"	f
TestRandomAccess	leveldb/table/table_test.cc	/^  void TestRandomAccess(Random* rnd,$/;"	f	class:leveldb::Harness
TestSHA1	test/crypto_tests.cpp	/^void TestSHA1(const std::string &in, const std::string &hexout) { TestVector(CSHA1(), in, ParseHex(hexout));}$/;"	f
TestSHA256	test/crypto_tests.cpp	/^void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(CSHA256(), in, ParseHex(hexout));}$/;"	f
TestSHA512	test/crypto_tests.cpp	/^void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}$/;"	f
TestSplitHost	test/netbase_tests.cpp	/^bool static TestSplitHost(string test, string host, int port)$/;"	f	file:
TestState	leveldb/db/skiplist_test.cc	/^  explicit TestState(int s)$/;"	f	class:leveldb::TestState
TestState	leveldb/db/skiplist_test.cc	/^class TestState {$/;"	c	namespace:leveldb	file:
TestType	leveldb/table/table_test.cc	/^enum TestType {$/;"	g	namespace:leveldb	file:
TestVector	test/bip32_tests.cpp	/^    TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}$/;"	f	struct:TestVector
TestVector	test/bip32_tests.cpp	/^struct TestVector {$/;"	s	file:
TestVector	test/crypto_tests.cpp	/^void TestVector(const Hasher &h, const In &in, const Out &out) {$/;"	f
Tester	leveldb/util/testharness.h	/^  Tester(const char* f, int l)$/;"	f	class:leveldb::test::Tester
Tester	leveldb/util/testharness.h	/^class Tester {$/;"	c	namespace:leveldb::test
TestingSetup	test/test_bitcoin.cpp	/^TestingSetup::TestingSetup()$/;"	f	class:TestingSetup
TestingSetup	test/test_bitcoin.h	/^struct TestingSetup: public BasicTestingSetup, public CacheSetupFixture, public GlobalSetupFixture{$/;"	s
TestnetToBeDeprecatedFieldRPC	chainparams.h	/^    bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }$/;"	f	class:CChainParams
Thread	checkqueue.h	/^    void Thread()$/;"	f	class:CCheckQueue
ThreadArg	leveldb/db/db_bench.cc	/^  struct ThreadArg {$/;"	s	class:leveldb::Benchmark	file:
ThreadBody	leveldb/db/db_bench.cc	/^  static void ThreadBody(void* v) {$/;"	f	class:leveldb::Benchmark	file:
ThreadBody	leveldb/util/env_test.cc	/^static void ThreadBody(void* arg) {$/;"	f	namespace:leveldb
ThreadDNSAddressSeed	net.cpp	/^void ThreadDNSAddressSeed()$/;"	f
ThreadFlushWalletDB	wallet/walletdb.cpp	/^void ThreadFlushWalletDB(const std::string& strFile)$/;"	f
ThreadImport	init.cpp	/^void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)$/;"	f
ThreadMapPort	net.cpp	/^void ThreadMapPort()$/;"	f
ThreadMessageHandler	net.cpp	/^void ThreadMessageHandler()$/;"	f
ThreadOpenAddedConnections	net.cpp	/^void ThreadOpenAddedConnections()$/;"	f
ThreadOpenConnections	net.cpp	/^void ThreadOpenConnections()$/;"	f
ThreadSafeMessageBox	ui_interface.h	/^    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;$/;"	m	class:CClientUIInterface
ThreadScriptCheck	main.cpp	/^void ThreadScriptCheck()$/;"	f
ThreadSocketHandler	net.cpp	/^void ThreadSocketHandler()$/;"	f
ThreadState	leveldb/db/db_bench.cc	/^  ThreadState(int index)$/;"	f	struct:leveldb::__anon15::ThreadState
ThreadState	leveldb/db/db_bench.cc	/^struct ThreadState {$/;"	s	namespace:leveldb::__anon15	file:
TimingResistantEqual	utilstrencodings.h	/^bool TimingResistantEqual(const T& a, const T& b)$/;"	f
Tip	chain.h	/^    CBlockIndex *Tip() const {$/;"	f	class:CChain
TmpDir	leveldb/util/testharness.cc	/^std::string TmpDir() {$/;"	f	namespace:leveldb::test
ToByteVector	script/script.h	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToNarrowPath	leveldb/util/env_win.cc	/^void ToNarrowPath(const std::wstring& value, std::string& target) {$/;"	f	namespace:leveldb::Win32
ToString	alert.cpp	/^std::string CUnsignedAlert::ToString() const$/;"	f	class:CUnsignedAlert
ToString	amount.cpp	/^std::string CFeeRate::ToString() const$/;"	f	class:CFeeRate
ToString	arith_uint256.cpp	/^std::string base_uint<BITS>::ToString() const$/;"	f	class:base_uint
ToString	base58.cpp	/^std::string CBase58Data::ToString() const$/;"	f	class:CBase58Data
ToString	chain.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	chain.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	chain.h	/^    std::string ToString() const$/;"	f	struct:CDiskBlockPos
ToString	leveldb/include/leveldb/slice.h	/^  std::string ToString() const { return std::string(data_, size_); }$/;"	f	class:leveldb::Slice
ToString	leveldb/table/table_test.cc	/^  std::string ToString(const Iterator* it) {$/;"	f	class:leveldb::Harness
ToString	leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data, const KVMap::const_iterator& it) {$/;"	f	class:leveldb::Harness
ToString	leveldb/table/table_test.cc	/^  std::string ToString(const KVMap& data,$/;"	f	class:leveldb::Harness
ToString	leveldb/util/histogram.cc	/^std::string Histogram::ToString() const {$/;"	f	class:leveldb::Histogram
ToString	leveldb/util/status.cc	/^std::string Status::ToString() const {$/;"	f	class:leveldb::Status
ToString	main.cpp	/^ std::string CBlockFileInfo::ToString() const {$/;"	f	class:CBlockFileInfo
ToString	netbase.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	netbase.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	netbase.cpp	/^std::string CSubNet::ToString() const$/;"	f	class:CSubNet
ToString	primitives/block.cpp	/^std::string CBlock::ToString() const$/;"	f	class:CBlock
ToString	primitives/transaction.cpp	/^std::string COutPoint::ToString() const$/;"	f	class:COutPoint
ToString	primitives/transaction.cpp	/^std::string CTransaction::ToString() const$/;"	f	class:CTransaction
ToString	primitives/transaction.cpp	/^std::string CTxIn::ToString() const$/;"	f	class:CTxIn
ToString	primitives/transaction.cpp	/^std::string CTxOut::ToString() const$/;"	f	class:CTxOut
ToString	protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	script/script.cpp	/^std::string CScript::ToString() const$/;"	f	class:CScript
ToString	sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	uint256.cpp	/^std::string base_blob<BITS>::ToString() const$/;"	f	class:base_blob
ToString	wallet/wallet.cpp	/^string COutput::ToString() const$/;"	f	class:COutput
ToStringIP	netbase.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	netbase.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringPort	netbase.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
ToWidePath	leveldb/util/env_win.cc	/^void ToWidePath(const std::string& value, std::wstring& target) {$/;"	f	namespace:leveldb::Win32
TopUpKeyPool	wallet/wallet.cpp	/^bool CWallet::TopUpKeyPool(unsigned int kpSize)$/;"	f	class:CWallet
TotalFileSize	leveldb/db/version_set.cc	/^static int64_t TotalFileSize(const std::vector<FileMetaData*>& files) {$/;"	f	namespace:leveldb
TotalTableFiles	leveldb/db/db_test.cc	/^  int TotalTableFiles() {$/;"	f	class:leveldb::DBTest
TraceThread	util.h	/^template <typename Callable> void TraceThread(const char* name,  Callable func)$/;"	f
TransactionSignatureChecker	script/interpreter.h	/^    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}$/;"	f	class:TransactionSignatureChecker
TransactionSignatureChecker	script/interpreter.h	/^class TransactionSignatureChecker : public BaseSignatureChecker$/;"	c
TransactionSignatureCreator	script/sign.cpp	/^TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}$/;"	f	class:TransactionSignatureCreator
TransactionSignatureCreator	script/sign.h	/^class TransactionSignatureCreator : public BaseSignatureCreator {$/;"	c
TransactionType	primitives/transaction.h	/^enum TransactionType$/;"	g
TransferLicenseHandlerCheckValidFixture	test/handler_license.cpp	/^    TransferLicenseHandlerCheckValidFixture()$/;"	f	struct:TransferLicenseHandlerCheckValidFixture
TransferLicenseHandlerCheckValidFixture	test/handler_license.cpp	/^struct TransferLicenseHandlerCheckValidFixture : public LicenseHandlerFixture$/;"	s	file:
Transform	crypto/ripemd160.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon5::ripemd160
Transform	crypto/sha1.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon7::sha1
Transform	crypto/sha256.cpp	/^void Transform(uint32_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon6::sha256
Transform	crypto/sha512.cpp	/^void Transform(uint64_t* s, const unsigned char* chunk)$/;"	f	namespace:__anon8::sha512
Translate	util.h	/^    boost::signals2::signal<std::string (const char* psz)> Translate;$/;"	m	class:CTranslationInterface
TraverseAndBuild	merkleblock.cpp	/^void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) {$/;"	f	class:CPartialMerkleTree
TraverseAndExtract	merkleblock.cpp	/^uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch) {$/;"	f	class:CPartialMerkleTree
TrimSpace	leveldb/db/db_bench.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon15
TrimSpace	leveldb/doc/bench/db_bench_sqlite3.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon35
TrimSpace	leveldb/doc/bench/db_bench_tree_db.cc	/^static Slice TrimSpace(Slice s) {$/;"	f	namespace:leveldb::__anon36
TruncateFile	util.cpp	/^bool TruncateFile(FILE *file, unsigned int length) {$/;"	f
TryAcquire	sync.h	/^    bool TryAcquire()$/;"	f	class:CSemaphoreGrant
TryCreateDirectory	util.cpp	/^bool TryCreateDirectory(const boost::filesystem::path& p)$/;"	f
TryCreateFileIfNeed_	net.cpp	/^void CNetRecorder::CFileWriter::TryCreateFileIfNeed_($/;"	f	class:CNetRecorder::CFileWriter
TryEnter	sync.h	/^    bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
TryInit_	net.cpp	/^void CNetRecorder::TryInit_()$/;"	f	class:CNetRecorder
TryReopen	leveldb/db/corruption_test.cc	/^  Status TryReopen() {$/;"	f	class:leveldb::CorruptionTest
TryReopen	leveldb/db/db_test.cc	/^  Status TryReopen(Options* options) {$/;"	f	class:leveldb::DBTest
TweakPublic	ecwrapper.cpp	/^bool CECKey::TweakPublic(const unsigned char vchTweak[32]) {$/;"	f	class:CECKey
TwoLevelIterator	leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::TwoLevelIterator($/;"	f	class:leveldb::__anon30::TwoLevelIterator
TwoLevelIterator	leveldb/table/two_level_iterator.cc	/^class TwoLevelIterator: public Iterator {$/;"	c	namespace:leveldb::__anon30	file:
TxConfirmStats	policy/fees.h	/^class TxConfirmStats$/;"	c
TxInErrorToJSON	rpcrawtransaction.cpp	/^static void TxInErrorToJSON(const CTxIn& txin, Array& vErrorsRet, const std::string& strMessage)$/;"	f	file:
TxInfo	main.h	/^    TxInfo() {$/;"	f	class:TxInfo
TxInfo	main.h	/^    TxInfo(const CTransaction& tx) : hash(tx.GetHash()), vout(tx.vout), type(tx.type) {}$/;"	f	class:TxInfo
TxInfo	main.h	/^class TxInfo$/;"	c
TxInputStream	script/bitcoinconsensus.cpp	/^    TxInputStream(int nTypeIn, int nVersionIn, const unsigned char *txTo, size_t txToLen) :$/;"	f	class:__anon90::TxInputStream
TxInputStream	script/bitcoinconsensus.cpp	/^class TxInputStream$/;"	c	namespace:__anon90	file:
TxItems	wallet/wallet.h	/^    typedef std::multimap<int64_t, TxPair > TxItems;$/;"	t	class:CWallet
TxPair	wallet/wallet.h	/^    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;$/;"	t	class:CWallet
TxPriority	miner.cpp	/^typedef boost::tuple<double, CFeeRate, const CTransaction*> TxPriority;$/;"	t	file:
TxPriorityCompare	miner.cpp	/^    TxPriorityCompare(bool _byFee) : byFee(_byFee) { }$/;"	f	class:TxPriorityCompare
TxPriorityCompare	miner.cpp	/^class TxPriorityCompare$/;"	c	file:
TxSpends	wallet/wallet.h	/^    typedef std::multimap<COutPoint, uint256> TxSpends;$/;"	t	class:CWallet
TxStatsInfo	policy/fees.h	/^        TxStatsInfo() : stats(NULL), blockHeight(0), bucketIndex(0) {}$/;"	f	struct:CBlockPolicyEstimator::TxStatsInfo
TxStatsInfo	policy/fees.h	/^    struct TxStatsInfo$/;"	s	class:CBlockPolicyEstimator
TxToJSON	rpcrawtransaction.cpp	/^void TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)$/;"	f
TxToUniv	core_write.cpp	/^void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)$/;"	f
TxType	primitives/transaction.h	/^std::string const TxType[] = {$/;"	m	class:std
TxnAbort	wallet/db.h	/^    bool TxnAbort()$/;"	f	class:CDB
TxnBegin	wallet/db.h	/^    DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)$/;"	f	class:CDBEnv
TxnBegin	wallet/db.h	/^    bool TxnBegin()$/;"	f	class:CDB
TxnCommit	wallet/db.h	/^    bool TxnCommit()$/;"	f	class:CDB
Type_to_type	json/json_spirit_value.h	/^        struct Type_to_type$/;"	s	namespace:json_spirit::internal_
UBEGIN	utilstrencodings.h	18;"	d
UEND	utilstrencodings.h	19;"	d
UL.nobullets 	leveldb/doc/doc.css	/^UL.nobullets {$/;"	s
UNDOFILE_CHUNK_SIZE	main.h	/^static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; \/\/ 1 MiB$/;"	v
UNKNOWN	primitives/transaction.h	/^    UNKNOWN$/;"	e	enum:TransactionType
UNLIKELY_PCT	policy/fees.h	/^static const double UNLIKELY_PCT = .5;$/;"	v
UNLOCK_FUNCTION	leveldb/port/thread_annotations.h	53;"	d
UNLOCK_FUNCTION	leveldb/util/mutexlock.h	/^  ~MutexLock() UNLOCK_FUNCTION() { this->mu_->Unlock(); }$/;"	f	class:leveldb::MutexLock
UNLOCK_FUNCTION	net.cpp	/^void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)$/;"	f
UNLOCK_FUNCTION	net.cpp	/^void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)$/;"	f
UNLOCK_FUNCTION	sync.h	/^    void unlock() UNLOCK_FUNCTION()$/;"	f	class:AnnotatedMixin
UNLOCK_FUNCTION	threadsafety.h	28;"	d
UNLOCK_FUNCTION	threadsafety.h	47;"	d
USE_ASM_X86_64	secp256k1/src/libsecp256k1-config.h	85;"	d
USE_FIELD_5X52	secp256k1/src/libsecp256k1-config.h	94;"	d
USE_FIELD_INV_BUILTIN	secp256k1/src/libsecp256k1-config.h	97;"	d
USE_NUM_NONE	secp256k1/src/libsecp256k1-config.h	106;"	d
USE_QRCODE	Makefile	/^USE_QRCODE = $/;"	m
USE_SCALAR_4X64	secp256k1/src/libsecp256k1-config.h	109;"	d
USE_SCALAR_INV_BUILTIN	secp256k1/src/libsecp256k1-config.h	115;"	d
UintToArith256	arith_uint256.cpp	/^arith_uint256 UintToArith256(const uint256 &a)$/;"	f
UnSelect	coincontrol.h	/^    void UnSelect(const COutPoint& output)$/;"	f	class:CCoinControl
UnSelectAll	coincontrol.h	/^    void UnSelectAll()$/;"	f	class:CCoinControl
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_BanVote_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Cancel_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_InvalidType_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Match_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Mint_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Normal_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Order_
Undo	main.cpp	/^    bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::__anon48::Handler_Vote_
Undo	main.h	/^    virtual bool Undo(const CTransaction &tx, const CBlock *pblock)$/;"	f	class:type_transaction_handler::HandlerInterface
UndoReadFromDisk	main.cpp	/^bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uint256& hashBlock)$/;"	f	namespace:__anon50
UndoWriteToDisk	main.cpp	/^bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)$/;"	f	namespace:__anon50
UniValue	univalue/univalue.h	/^    UniValue() { typ = VNULL; }$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^    UniValue(UniValue::VType initialType, const std::string& initialStr = "") {$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^    UniValue(const char *val_) {$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^    UniValue(const std::string& val_) {$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^    UniValue(double val_) {$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^    UniValue(int val_) {$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^    UniValue(int64_t val_) {$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^    UniValue(uint64_t val_) {$/;"	f	class:UniValue
UniValue	univalue/univalue.h	/^class UniValue {$/;"	c
Uniform	leveldb/util/random.h	/^  uint32_t Uniform(int n) { return Next() % n; }$/;"	f	class:leveldb::Random
UnlinkPrunedFiles	main.cpp	/^void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)$/;"	f
UnloadBlockIndex	main.cpp	/^void UnloadBlockIndex()$/;"	f
Unlock	leveldb/port/port_posix.cc	/^void Mutex::Unlock() { PthreadCall("unlock", pthread_mutex_unlock(&mu_)); }$/;"	f	class:leveldb::port::Mutex
Unlock	leveldb/port/port_win.cc	/^void Mutex::Unlock() {$/;"	f	class:leveldb::port::Mutex
Unlock	support/pagelocker.cpp	/^bool MemoryPageLocker::Unlock(const void* addr, size_t len)$/;"	f	class:MemoryPageLocker
Unlock	test/allocator_tests.cpp	/^    bool Unlock(const void *addr, size_t len)$/;"	f	class:TestLocker
Unlock	wallet/crypter.cpp	/^bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
Unlock	wallet/wallet.cpp	/^bool CWallet::Unlock(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
UnlockAllCoins	wallet/wallet.cpp	/^void CWallet::UnlockAllCoins()$/;"	f	class:CWallet
UnlockCoin	wallet/wallet.cpp	/^void CWallet::UnlockCoin(COutPoint& output)$/;"	f	class:CWallet
UnlockFile	leveldb/helpers/memenv/memenv.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon26::InMemoryEnv
UnlockFile	leveldb/include/leveldb/env.h	/^  Status UnlockFile(FileLock* l) { return target_->UnlockFile(l); }$/;"	f	class:leveldb::EnvWrapper
UnlockFile	leveldb/util/env_posix.cc	/^  virtual Status UnlockFile(FileLock* lock) {$/;"	f	class:leveldb::__anon42::PosixEnv
UnlockFile	leveldb/util/env_win.cc	/^Status Win32Env::UnlockFile( FileLock* lock )$/;"	f	class:leveldb::Win32::Win32Env
UnlockObject	support/pagelocker.h	/^void UnlockObject(const T& t)$/;"	f
UnlockRange	support/pagelocker.h	/^    void UnlockRange(void* p, size_t size)$/;"	f	class:LockedPageManagerBase
Unmask	leveldb/util/crc32c.h	/^inline uint32_t Unmask(uint32_t masked_crc) {$/;"	f	namespace:leveldb::crc32c
Unref	leveldb/db/memtable.h	/^  void Unref() {$/;"	f	class:leveldb::MemTable
Unref	leveldb/db/version_set.cc	/^void Version::Unref() {$/;"	f	class:leveldb::Version
Unref	leveldb/helpers/memenv/memenv.cc	/^  void Unref() {$/;"	f	class:leveldb::__anon26::FileState
Unref	leveldb/util/cache.cc	/^void LRUCache::Unref(LRUHandle* e) {$/;"	f	class:leveldb::__anon39::LRUCache
UnrefEntry	leveldb/db/table_cache.cc	/^static void UnrefEntry(void* arg1, void* arg2) {$/;"	f	namespace:leveldb
UnregisterAllValidationInterfaces	validationinterface.cpp	/^void UnregisterAllValidationInterfaces() {$/;"	f
UnregisterNodeSignals	main.cpp	/^void UnregisterNodeSignals(CNodeSignals& nodeSignals)$/;"	f
UnregisterValidationInterface	validationinterface.cpp	/^void UnregisterValidationInterface(CValidationInterface* pwalletIn) {$/;"	f
Unserialize	addrman.h	/^    void Unserialize(Stream& s, int nType, int nVersionDummy)$/;"	f	class:CAddrMan
Unserialize	coins.h	/^    void Unserialize(Stream &s, int nType, int nVersion)$/;"	f	class:CCoins
Unserialize	compressor.h	/^    void Unserialize(Stream &s, int nType, int nVersion) {$/;"	f	class:CScriptCompressor
Unserialize	pubkey.h	/^    void Unserialize(Stream& s, int nType, int nVersion)$/;"	f	class:CPubKey
Unserialize	pubkey.h	/^    void Unserialize(Stream& s, int nType, int nVersion)$/;"	f	struct:CExtPubKey
Unserialize	serialize.h	/^    void Unserialize(Stream& s, int, int)$/;"	f	class:CVarInt
Unserialize	serialize.h	/^    void Unserialize(Stream& s, int, int=0)$/;"	f	class:CFlatData
Unserialize	serialize.h	/^    void Unserialize(Stream& s, int, int=0)$/;"	f	class:LimitedString
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, T& a, long nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f=ser_readdata8(s); a=f; }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a,      int, int=0) { a = ser_readdata8(s); } \/\/ TODO Get rid of bare char$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a,    int, int=0) { a = ser_uint64_to_double(ser_readdata64(s)); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a,     int, int=0) { a = ser_uint32_to_float(ser_readdata32(s)); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int16_t& a,   int, int=0) { a = ser_readdata16(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int32_t& a,   int, int=0) { a = ser_readdata32(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64_t& a,   int, int=0) { a = ser_readdata64(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int8_t& a,    int, int=0) { a = ser_readdata8(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a,  int, int=0) { a = ser_readdata16(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a,  int, int=0) { a = ser_readdata32(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a,  int, int=0) { a = ser_readdata64(s); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a,   int, int=0) { a = ser_readdata8(s); }$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, CScript& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str, int, int)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::list<T, A>& l, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	uint256.h	/^    void Unserialize(Stream& s, int nType, int nVersion)$/;"	f	class:base_blob
Unserialize	undo.h	/^    void Unserialize(Stream &s, int nType, int nVersion) {$/;"	f	class:CTxInUndo
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)$/;"	f
Update	leveldb/table/iterator_wrapper.h	/^  void Update() {$/;"	f	class:leveldb::IteratorWrapper
UpdateBlockAvailability	main.cpp	/^void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash)$/;"	f	namespace:__anon47
UpdateCoins	main.cpp	/^void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight)$/;"	f
UpdateCoins	main.cpp	/^void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, int nHeight)$/;"	f
UpdateEmptyFull	bloom.cpp	/^void CBloomFilter::UpdateEmptyFull()$/;"	f	class:CBloomFilter
UpdateHash	primitives/transaction.cpp	/^void CTransaction::UpdateHash() const$/;"	f	class:CTransaction
UpdateList	main.cpp	/^bool UpdateList(const CBlockIndex *pindex)$/;"	f
UpdateMovingAverages	policy/fees.cpp	/^void TxConfirmStats::UpdateMovingAverages()$/;"	f	class:TxConfirmStats
UpdatePreferredDownload	main.cpp	/^void UpdatePreferredDownload(CNode* node, CNodeState* state)$/;"	f	namespace:__anon47
UpdateStats	leveldb/db/version_set.cc	/^bool Version::UpdateStats(const GetStats& stats) {$/;"	f	class:leveldb::Version
UpdateTime	miner.cpp	/^void UpdateTime(CBlock* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)$/;"	f
UpdateTip	main.cpp	/^void static UpdateTip(CBlockIndex *pindexNew) {$/;"	f	file:
UpdatedTransaction	validationinterface.h	/^    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;$/;"	m	struct:CMainSignals
UpdatedTransaction	validationinterface.h	/^    virtual void UpdatedTransaction(const uint256 &hash) {}$/;"	f	class:CValidationInterface
UpdatedTransaction	wallet/wallet.cpp	/^void CWallet::UpdatedTransaction(const uint256 &hashTx)$/;"	f	class:CWallet
Usage	leveldb/db/leveldb_main.cc	/^static void Usage() {$/;"	f	file:
VARINT	serialize.h	377;"	d
VARR	univalue/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VBOOL	univalue/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VERIFY_BITS	secp256k1/src/field_10x26_impl.h	433;"	d
VERIFY_BITS	secp256k1/src/field_10x26_impl.h	435;"	d
VERIFY_BITS	secp256k1/src/field_5x52_int128_impl.h	13;"	d
VERIFY_BITS	secp256k1/src/field_5x52_int128_impl.h	15;"	d
VERIFY_CHECK	secp256k1/src/util.h	59;"	d
VERIFY_CHECK	secp256k1/src/util.h	61;"	d
VERIFY_OK	wallet/db.h	/^    enum VerifyResult { VERIFY_OK,$/;"	e	enum:CDBEnv::VerifyResult
VERSION	Makefile	/^VERSION = 1.1.2$/;"	m
VERSION	secp256k1/Makefile	/^VERSION = 0.1$/;"	m
VERSION	secp256k1/src/libsecp256k1-config.h	121;"	d
VNULL	univalue/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VNUM	univalue/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VOBJ	univalue/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VOTE	primitives/transaction.h	/^    VOTE,$/;"	e	enum:TransactionType
VSTR	univalue/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	e	enum:UniValue::VType
VType	univalue/univalue.h	/^    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };$/;"	g	class:UniValue
Valid	leveldb/db/db_iter.cc	/^  virtual bool Valid() const { return valid_; }$/;"	f	class:leveldb::__anon22::DBIter
Valid	leveldb/db/db_test.cc	/^    virtual bool Valid() const { return iter_ != map_->end(); }$/;"	f	class:leveldb::ModelDB::ModelIter
Valid	leveldb/db/memtable.cc	/^  virtual bool Valid() const { return iter_.Valid(); }$/;"	f	class:leveldb::MemTableIterator
Valid	leveldb/db/skiplist.h	/^inline bool SkipList<Key,Comparator>::Iterator::Valid() const {$/;"	f	class:leveldb::SkipList::Iterator
Valid	leveldb/db/version_set.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
Valid	leveldb/table/block.cc	/^  virtual bool Valid() const { return current_ < restarts_; }$/;"	f	class:leveldb::Block::Iter
Valid	leveldb/table/iterator.cc	/^  virtual bool Valid() const { return false; }$/;"	f	class:leveldb::__anon29::EmptyIterator
Valid	leveldb/table/iterator_wrapper.h	/^  bool Valid() const        { return valid_; }$/;"	f	class:leveldb::IteratorWrapper
Valid	leveldb/table/merger.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon28::MergingIterator
Valid	leveldb/table/table_test.cc	/^  virtual bool Valid() const { return iter_->Valid(); }$/;"	f	class:leveldb::KeyConvertingIterator
Valid	leveldb/table/two_level_iterator.cc	/^  virtual bool Valid() const {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
Value	json/json_spirit_value.h	/^    typedef Config::Value_type  Value;$/;"	t	namespace:json_spirit
Value	leveldb/db/corruption_test.cc	/^  Slice Value(int k, std::string* storage) {$/;"	f	class:leveldb::CorruptionTest
Value	leveldb/util/cache.cc	/^  virtual void* Value(Handle* handle) {$/;"	f	class:leveldb::__anon39::ShardedLRUCache
Value	leveldb/util/crc32c.h	/^inline uint32_t Value(const char* data, size_t n) {$/;"	f	namespace:leveldb::crc32c
ValueFromAmount	rpcserver.cpp	/^Value ValueFromAmount(const CAmount& amount)$/;"	f
ValueFromAmount	rpcserver.cpp	/^Value ValueFromAmount(const map<type_Color, CAmount>& origin)$/;"	f
ValueFromString	test/rpc_tests.cpp	/^static Value ValueFromString(const std::string &str)$/;"	f	file:
ValueString	script/script.cpp	/^inline std::string ValueString(const std::vector<unsigned char>& vch)$/;"	f	namespace:__anon85
ValueType	leveldb/db/dbformat.h	/^enum ValueType {$/;"	g	namespace:leveldb
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( bool value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Array& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Const_str_ptr value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Object& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const String_type& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Value_impl< Config >& other )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( double value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( int value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( int64_t value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( uint64_t value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl()$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    class Value_impl$/;"	c	namespace:json_spirit
Value_type	json/json_spirit_value.h	/^        typedef Value_impl< Config_map > Value_type;$/;"	t	struct:json_spirit::Config_map
Value_type	json/json_spirit_value.h	/^        typedef Value_impl< Config_vector > Value_type;$/;"	t	struct:json_spirit::Config_vector
Value_type	json/json_spirit_value.h	/^        typedef typename Config::Value_type Value_type;$/;"	t	struct:json_spirit::Pair_impl
Value_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	g	namespace:json_spirit
Value_type_name	json/json_spirit_value.h	/^    static const char* Value_type_name[]={"obj", "array", "str", "bool", "int", "real", "null"};$/;"	m	namespace:json_spirit
Variant	json/json_spirit_value.h	/^                                bool, int64_t, double > Variant;$/;"	t	class:json_spirit::Value_impl
VarintLength	leveldb/util/coding.cc	/^int VarintLength(uint64_t v) {$/;"	f	namespace:leveldb
Verify	ecwrapper.cpp	/^bool CECKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) {$/;"	f	class:CECKey
Verify	pubkey.cpp	/^bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {$/;"	f	class:CPubKey
Verify	test/script_P2SH_tests.cpp	/^Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, ScriptError& err)$/;"	f	file:
Verify	wallet/db.cpp	/^CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, bool (*recoverFunc)(CDBEnv& dbenv, const std::string& strFile))$/;"	f	class:CDBEnv
Verify	wallet/wallet.cpp	/^bool CWallet::Verify(const string& walletFile, string& warningString, string& errorString)$/;"	f	class:CWallet
VerifyDB	main.cpp	/^bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)$/;"	f	class:CVerifyDB
VerifyPubKey	key.cpp	/^bool CKey::VerifyPubKey(const CPubKey& pubkey) const {$/;"	f	class:CKey
VerifyResult	wallet/db.h	/^    enum VerifyResult { VERIFY_OK,$/;"	g	class:CDBEnv
VerifyScript	script/interpreter.cpp	/^bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)$/;"	f
VerifySignature	script/interpreter.cpp	/^bool BlockHeaderSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:BlockHeaderSignatureChecker
VerifySignature	script/interpreter.cpp	/^bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:TransactionSignatureChecker
VerifySignature	script/sigcache.cpp	/^bool CachingTransactionSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const$/;"	f	class:CachingTransactionSignatureChecker
Version	leveldb/db/version_set.h	/^  explicit Version(VersionSet* vset)$/;"	f	class:leveldb::Version
Version	leveldb/db/version_set.h	/^class Version {$/;"	c	namespace:leveldb
VersionEdit	leveldb/db/version_edit.h	/^  VersionEdit() { Clear(); }$/;"	f	class:leveldb::VersionEdit
VersionEdit	leveldb/db/version_edit.h	/^class VersionEdit {$/;"	c	namespace:leveldb
VersionEditPrinter	leveldb/db/dumpfile.cc	/^static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon23
VersionEditTest	leveldb/db/version_edit_test.cc	/^class VersionEditTest { };$/;"	c	namespace:leveldb	file:
VersionSet	leveldb/db/version_set.cc	/^VersionSet::VersionSet(const std::string& dbname,$/;"	f	class:leveldb::VersionSet
VersionSet	leveldb/db/version_set.h	/^class VersionSet {$/;"	c	namespace:leveldb
ViewKeyPool	wallet/wallet.cpp	/^void CWallet::ViewKeyPool(std::vector<CPubKey>& keys)$/;"	f	class:CWallet
VoteList	main.cpp	/^map<string, vector<map<string, bool> > > VoteList;$/;"	v
WALLET_CRYPTO_KEY_SIZE	wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	wallet/crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WIDTH	arith_uint256.h	/^    enum { WIDTH=BITS\/32 };$/;"	e	enum:base_uint::__anon4
WIDTH	uint256.h	/^    enum { WIDTH=BITS\/8 };$/;"	e	enum:base_blob::__anon52
WIN32_LEAN_AND_MEAN	compat.h	19;"	d
WIN32_LEAN_AND_MEAN	support/pagelocker.cpp	16;"	d	file:
WIN32_LEAN_AND_MEAN	util.cpp	63;"	d	file:
WINDOWS_BITS	Makefile	/^WINDOWS_BITS = $/;"	m
WINDOW_A	secp256k1/src/ecmult_impl.h	15;"	d
WINDOW_G	secp256k1/src/ecmult_impl.h	21;"	d
WINDOW_G	secp256k1/src/ecmult_impl.h	24;"	d
WINDRES	Makefile	/^WINDRES = $/;"	m
WORDS_BIGENDIAN	config/bitcoin-config.h	325;"	d
WORDS_BIGENDIAN	secp256k1/src/libsecp256k1-config.h	127;"	d
WSAEADDRINUSE	compat.h	60;"	d
WSAEALREADY	compat.h	55;"	d
WSAEINPROGRESS	compat.h	59;"	d
WSAEINTR	compat.h	58;"	d
WSAEINVAL	compat.h	54;"	d
WSAEMSGSIZE	compat.h	57;"	d
WSAENOTSOCK	compat.h	61;"	d
WSAEWOULDBLOCK	compat.h	56;"	d
WSAGetLastError	compat.h	53;"	d
Wait	checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueue
Wait	checkqueue.h	/^    bool Wait()$/;"	f	class:CCheckQueueControl
Wait	leveldb/db/skiplist_test.cc	/^  void Wait(ReaderState s) {$/;"	f	class:leveldb::TestState
Wait	leveldb/port/port_posix.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
Wait	leveldb/port/port_win.cc	/^void CondVar::Wait() {$/;"	f	class:leveldb::port::CondVar
WaitForShutdown	bitcoind.cpp	/^void WaitForShutdown(boost::thread_group* threadGroup)$/;"	f
WalCheckpoint	leveldb/doc/bench/db_bench_sqlite3.cc	/^static void WalCheckpoint(sqlite3* db_) {$/;"	f	file:
WalletFeature	wallet/wallet.h	/^enum WalletFeature$/;"	g
WalletSetupFixture	test/test_bitcoin.h	/^    WalletSetupFixture()$/;"	f	struct:WalletSetupFixture
WalletSetupFixture	test/test_bitcoin.h	/^struct WalletSetupFixture$/;"	s
WalletTxToJSON	wallet/rpcwallet.cpp	/^void WalletTxToJSON(const CWalletTx& wtx, Object& entry)$/;"	f
WasClearAtEntry	txmempool.h	/^    bool WasClearAtEntry() const { return hadNoDependencies; }$/;"	f	class:CTxMemPoolEntry
WatchOnlySet	keystore.h	/^typedef std::set<CScript> WatchOnlySet;$/;"	t
Win32	leveldb/util/env_win.cc	/^namespace Win32$/;"	n	namespace:leveldb	file:
Win32Env	leveldb/util/env_win.cc	/^Win32Env::Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
Win32Env	leveldb/util/env_win.cc	/^class Win32Env : public Env$/;"	c	namespace:leveldb::Win32	file:
Win32FileLock	leveldb/util/env_win.cc	/^Win32FileLock::Win32FileLock( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32FileLock
Win32FileLock	leveldb/util/env_win.cc	/^class Win32FileLock : public FileLock$/;"	c	namespace:leveldb::Win32	file:
Win32Logger	leveldb/util/env_win.cc	/^Win32Logger::Win32Logger(WritableFile* pFile) : _pFileProxy(pFile)$/;"	f	class:leveldb::Win32::Win32Logger
Win32Logger	leveldb/util/env_win.cc	/^class Win32Logger : public Logger$/;"	c	namespace:leveldb::Win32	file:
Win32MapFile	leveldb/util/env_win.cc	/^Win32MapFile::Win32MapFile( const std::string& fname) :$/;"	f	class:leveldb::Win32::Win32MapFile
Win32MapFile	leveldb/util/env_win.cc	/^class Win32MapFile : public WritableFile$/;"	c	namespace:leveldb::Win32	file:
Win32RandomAccessFile	leveldb/util/env_win.cc	/^Win32RandomAccessFile::Win32RandomAccessFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
Win32RandomAccessFile	leveldb/util/env_win.cc	/^class Win32RandomAccessFile : public RandomAccessFile$/;"	c	namespace:leveldb::Win32	file:
Win32SequentialFile	leveldb/util/env_win.cc	/^Win32SequentialFile::Win32SequentialFile( const std::string& fname ) :$/;"	f	class:leveldb::Win32::Win32SequentialFile
Win32SequentialFile	leveldb/util/env_win.cc	/^class Win32SequentialFile : public SequentialFile$/;"	c	namespace:leveldb::Win32	file:
WorkItemWrapper	leveldb/util/env_win.cc	/^WorkItemWrapper::WorkItemWrapper( ScheduleProc proc_,void* content_ ) :$/;"	f	class:leveldb::Win32::WorkItemWrapper
WorkItemWrapper	leveldb/util/env_win.cc	/^struct WorkItemWrapper$/;"	s	namespace:leveldb::Win32	file:
WorkItemWrapperProc	leveldb/util/env_win.cc	/^DWORD WINAPI WorkItemWrapperProc(LPVOID pContent)$/;"	f	namespace:leveldb::Win32
WrapVarInt	serialize.h	/^CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }$/;"	f
WritableFile	leveldb/include/leveldb/env.h	/^  WritableFile() { }$/;"	f	class:leveldb::WritableFile
WritableFile	leveldb/include/leveldb/env.h	/^class WritableFile {$/;"	c	namespace:leveldb
WritableFileImpl	leveldb/helpers/memenv/memenv.cc	/^  WritableFileImpl(FileState* file) : file_(file) {$/;"	f	class:leveldb::__anon26::WritableFileImpl
WritableFileImpl	leveldb/helpers/memenv/memenv.cc	/^class WritableFileImpl : public WritableFile {$/;"	c	namespace:leveldb::__anon26	file:
Write	crypto/hmac_sha256.h	/^    CHMAC_SHA256& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA256
Write	crypto/hmac_sha512.h	/^    CHMAC_SHA512& Write(const unsigned char* data, size_t len)$/;"	f	class:CHMAC_SHA512
Write	crypto/ripemd160.cpp	/^CRIPEMD160& CRIPEMD160::Write(const unsigned char* data, size_t len)$/;"	f	class:CRIPEMD160
Write	crypto/sha1.cpp	/^CSHA1& CSHA1::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA1
Write	crypto/sha256.cpp	/^CSHA256& CSHA256::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA256
Write	crypto/sha512.cpp	/^CSHA512& CSHA512::Write(const unsigned char* data, size_t len)$/;"	f	class:CSHA512
Write	hash.h	/^    CHash160& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash160
Write	hash.h	/^    CHash256& Write(const unsigned char *data, size_t len) {$/;"	f	class:CHash256
Write	leveldb/db/db_impl.cc	/^Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {$/;"	f	class:leveldb::DBImpl
Write	leveldb/db/db_test.cc	/^  virtual Status Write(const WriteOptions& options, WriteBatch* batch) {$/;"	f	class:leveldb::ModelDB
Write	leveldb/db/log_test.cc	/^  void Write(const std::string& msg) {$/;"	f	class:leveldb::log::LogTest
Write	leveldb/doc/bench/db_bench_sqlite3.cc	/^  void Write(bool write_sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark
Write	leveldb/doc/bench/db_bench_tree_db.cc	/^  void Write(bool sync, Order order, DBState state,$/;"	f	class:leveldb::Benchmark	file:
Write	leveldbwrapper.h	/^    bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)$/;"	f	class:CLevelDBWrapper
Write	leveldbwrapper.h	/^    void Write(const K& key, const V& value)$/;"	f	class:CLevelDBBatch
Write	net.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
Write	net.cpp	/^void CNetRecorder::CFileWriter::Write(CNetRecorder::CRecord const* rec)$/;"	f	class:CNetRecorder::CFileWriter
Write	policy/fees.cpp	/^void CBlockPolicyEstimator::Write(CAutoFile& fileout)$/;"	f	class:CBlockPolicyEstimator
Write	policy/fees.cpp	/^void TxConfirmStats::Write(CAutoFile& fileout)$/;"	f	class:TxConfirmStats
Write	wallet/db.h	/^    bool Write(const K& key, const T& value, bool fOverwrite = true)$/;"	f	class:CDB
WriteAccount	wallet/walletdb.cpp	/^bool CWalletDB::WriteAccount(const std::string& strAccount, const CAccount& account)$/;"	f	class:CWalletDB
WriteAccountingEntry	wallet/walletdb.cpp	/^bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteAccountingEntry	wallet/walletdb.cpp	/^bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteBE32	crypto/common.h	/^void static inline WriteBE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteBE32	secp256k1/src/hash_impl.h	291;"	d
WriteBE64	crypto/common.h	/^void static inline WriteBE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteBatch	leveldb/db/write_batch.cc	/^WriteBatch::WriteBatch() {$/;"	f	class:leveldb::WriteBatch
WriteBatch	leveldb/include/leveldb/write_batch.h	/^class WriteBatch {$/;"	c	namespace:leveldb
WriteBatch	leveldbwrapper.cpp	/^bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb_error)$/;"	f	class:CLevelDBWrapper
WriteBatchInternal	leveldb/db/write_batch_internal.h	/^class WriteBatchInternal {$/;"	c	namespace:leveldb
WriteBatchItemPrinter	leveldb/db/dumpfile.cc	/^class WriteBatchItemPrinter : public WriteBatch::Handler {$/;"	c	namespace:leveldb::__anon23	file:
WriteBatchPrinter	leveldb/db/dumpfile.cc	/^static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {$/;"	f	namespace:leveldb::__anon23
WriteBatchSync	txdb.cpp	/^bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {$/;"	f	class:CBlockTreeDB
WriteBatchTest	leveldb/db/write_batch_test.cc	/^class WriteBatchTest { };$/;"	c	namespace:leveldb	file:
WriteBestBlock	wallet/walletdb.cpp	/^bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:CWalletDB
WriteBlock	leveldb/table/table_builder.cc	/^void TableBuilder::WriteBlock(BlockBuilder* block, BlockHandle* handle) {$/;"	f	class:leveldb::TableBuilder
WriteBlockToDisk	main.cpp	/^bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)$/;"	f
WriteCScript	wallet/walletdb.cpp	/^bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:CWalletDB
WriteCacheToDisk	main.cpp	/^bool WriteCacheToDisk(const int nHeight)$/;"	f
WriteCompactSize	serialize.h	/^void WriteCompactSize(Stream& os, uint64_t nSize)$/;"	f
WriteCryptedKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,$/;"	f	class:CWalletDB
WriteDefaultKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)$/;"	f	class:CWalletDB
WriteDescriptor	leveldb/db/repair.cc	/^  Status WriteDescriptor() {$/;"	f	class:leveldb::__anon17::Repairer	file:
WriteDestData	wallet/walletdb.cpp	/^bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)$/;"	f	class:CWalletDB
WriteDisk	cache.h	/^    bool WriteDisk(const int height)$/;"	f	class:CacheInterface
WriteFeeEstimates	txmempool.cpp	/^CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const$/;"	f	class:CTxMemPool
WriteFlag	txdb.cpp	/^bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {$/;"	f	class:CBlockTreeDB
WriteHDAchiveChain	wallet/walletdb.cpp	/^bool CWalletDB::WriteHDAchiveChain(const uint256& hash)$/;"	f	class:CWalletDB
WriteHDChain	wallet/walletdb.cpp	/^bool CWalletDB::WriteHDChain(const CHDChain &chain)$/;"	f	class:CWalletDB
WriteHDCryptedMasterSeed	wallet/walletdb.cpp	/^bool CWalletDB::WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret)$/;"	f	class:CWalletDB
WriteHDMasterSeed	wallet/walletdb.cpp	/^bool CWalletDB::WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed)$/;"	f	class:CWalletDB
WriteHDPubKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta)$/;"	f	class:CWalletDB
WriteInitialOffsetLog	leveldb/db/log_test.cc	/^  void WriteInitialOffsetLog() {$/;"	f	class:leveldb::log::LogTest
WriteKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)$/;"	f	class:CWalletDB
WriteLE16	crypto/common.h	/^void static inline WriteLE16(unsigned char* ptr, uint16_t x)$/;"	f
WriteLE32	crypto/common.h	/^void static inline WriteLE32(unsigned char* ptr, uint32_t x)$/;"	f
WriteLE64	crypto/common.h	/^void static inline WriteLE64(unsigned char* ptr, uint64_t x)$/;"	f
WriteLevel0Table	leveldb/db/db_impl.cc	/^Status DBImpl::WriteLevel0Table(MemTable* mem, VersionEdit* edit,$/;"	f	class:leveldb::DBImpl
WriteMasterKey	wallet/walletdb.cpp	/^bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:CWalletDB
WriteMinVersion	wallet/walletdb.cpp	/^bool CWalletDB::WriteMinVersion(int nVersion)$/;"	f	class:CWalletDB
WriteName	wallet/walletdb.cpp	/^bool CWalletDB::WriteName(const std::string& strAddress, const std::string& strName)$/;"	f	class:CWalletDB
WriteOptions	leveldb/include/leveldb/options.h	/^  WriteOptions()$/;"	f	struct:leveldb::WriteOptions
WriteOptions	leveldb/include/leveldb/options.h	/^struct WriteOptions {$/;"	s	namespace:leveldb
WriteOrderPos	wallet/wallet.h	/^static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)$/;"	f
WriteOrderPosNext	wallet/walletdb.cpp	/^bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)$/;"	f	class:CWalletDB
WritePool	wallet/walletdb.cpp	/^bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)$/;"	f	class:CWalletDB
WritePurpose	wallet/walletdb.cpp	/^bool CWalletDB::WritePurpose(const std::string& strAddress, const std::string& strPurpose)$/;"	f	class:CWalletDB
WriteRandom	leveldb/db/db_bench.cc	/^  void WriteRandom(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteRawBlock	leveldb/table/table_builder.cc	/^void TableBuilder::WriteRawBlock(const Slice& block_contents,$/;"	f	class:leveldb::TableBuilder
WriteReindexing	txdb.cpp	/^bool CBlockTreeDB::WriteReindexing(bool fReindexing)$/;"	f	class:CBlockTreeDB
WriteSeq	leveldb/db/db_bench.cc	/^  void WriteSeq(ThreadState* thread) {$/;"	f	class:leveldb::Benchmark	file:
WriteSnapshot	leveldb/db/version_set.cc	/^Status VersionSet::WriteSnapshot(log::Writer* log) {$/;"	f	class:leveldb::VersionSet
WriteStep	leveldb/db/skiplist_test.cc	/^  void WriteStep(Random* rnd) {$/;"	f	class:leveldb::ConcurrentTest
WriteStringToFile	leveldb/util/env.cc	/^Status WriteStringToFile(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteStringToFileSync	leveldb/util/env.cc	/^Status WriteStringToFileSync(Env* env, const Slice& data,$/;"	f	namespace:leveldb
WriteToBuffer	net.cpp	/^void CNetRecorder::CBandwidthRecord::WriteToBuffer(char* buffer) const$/;"	f	class:CNetRecorder::CBandwidthRecord
WriteToBuffer	net.cpp	/^void CNetRecorder::CRTTRecord::WriteToBuffer(char* buffer) const$/;"	f	class:CNetRecorder::CRTTRecord
WriteToDisk	wallet/wallet.cpp	/^bool CWalletTx::WriteToDisk(CWalletDB *pwalletdb)$/;"	f	class:CWalletTx
WriteToFile	leveldb/db/db_bench.cc	/^  static void WriteToFile(void* arg, const char* buf, int n) {$/;"	f	class:leveldb::Benchmark	file:
WriteTx	wallet/walletdb.cpp	/^bool CWalletDB::WriteTx(uint256 hash, const CWalletTx& wtx)$/;"	f	class:CWalletDB
WriteTxIndex	txdb.cpp	/^bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect)$/;"	f	class:CBlockTreeDB
WriteVarInt	serialize.h	/^void WriteVarInt(Stream& os, I n)$/;"	f
WriteVersion	streams.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CAutoFile
WriteVersion	streams.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CDataStream
WriteVersion	wallet/db.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:CDB
WriteWatchOnly	wallet/walletdb.cpp	/^bool CWalletDB::WriteWatchOnly(const CScript &dest)$/;"	f	class:CWalletDB
Writer	leveldb/db/db_impl.cc	/^  explicit Writer(port::Mutex* mu) : cv(mu) { }$/;"	f	struct:leveldb::DBImpl::Writer
Writer	leveldb/db/db_impl.cc	/^struct DBImpl::Writer {$/;"	s	class:leveldb::DBImpl	file:
Writer	leveldb/db/log_writer.cc	/^Writer::Writer(WritableFile* dest)$/;"	f	class:leveldb::log::Writer
Writer	leveldb/db/log_writer.h	/^class Writer {$/;"	c	namespace:leveldb::log
WrittenBytes	leveldb/db/log_test.cc	/^  size_t WrittenBytes() const {$/;"	f	class:leveldb::log::LogTest
X	net.cpp	499;"	d	file:
X	net.cpp	500;"	d	file:
X	net.cpp	536;"	d	file:
XGETTEXT	Makefile	/^XGETTEXT = \/usr\/bin\/xgettext$/;"	m
ZapWalletTx	wallet/wallet.cpp	/^DBErrors CWallet::ZapWalletTx(vector<CWalletTx>& vWtx)$/;"	f	class:CWallet
ZapWalletTx	wallet/walletdb.cpp	/^DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx)$/;"	f	class:CWalletDB
ZeroArray	test/arith_uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroArray	test/uint256_tests.cpp	/^const unsigned char ZeroArray[] =$/;"	v
ZeroL	test/arith_uint256_tests.cpp	/^const arith_uint256 ZeroL = arith_uint256V(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroL	test/uint256_tests.cpp	/^const uint256 ZeroL = uint256(std::vector<unsigned char>(ZeroArray,ZeroArray+32));$/;"	v
ZeroS	test/uint256_tests.cpp	/^const uint160 ZeroS = uint160(std::vector<unsigned char>(ZeroArray,ZeroArray+20));$/;"	v
_	util.h	/^inline std::string _(const char* psz)$/;"	f
_CleanUp	leveldb/util/env_win.cc	/^void Win32FileLock::_CleanUp()$/;"	f	class:leveldb::Win32::Win32FileLock
_CleanUp	leveldb/util/env_win.cc	/^void Win32RandomAccessFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_CleanUp	leveldb/util/env_win.cc	/^void Win32SequentialFile::_CleanUp()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_DARWIN_USE_64_BIT_INODE	config/bitcoin-config.h	335;"	d
_Included_org_bitcoin_NativeSecp256k1	secp256k1/src/java/org_bitcoin_NativeSecp256k1.h	6;"	d
_Init	leveldb/util/env_win.cc	/^BOOL Win32FileLock::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32FileLock
_Init	leveldb/util/env_win.cc	/^BOOL Win32MapFile::_Init( LPCWSTR Path )$/;"	f	class:leveldb::Win32::Win32MapFile
_Init	leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::_Init( LPCWSTR path )$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
_Init	leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::_Init()$/;"	f	class:leveldb::Win32::Win32SequentialFile
_MapNewRegion	leveldb/util/env_win.cc	/^bool Win32MapFile::_MapNewRegion()$/;"	f	class:leveldb::Win32::Win32MapFile
_POSIX_C_SOURCE	util.cpp	32;"	d	file:
_POSIX_C_SOURCE	util.cpp	35;"	d	file:
_Roundup	leveldb/util/env_win.cc	/^size_t Win32MapFile::_Roundup( size_t x, size_t y )$/;"	f	class:leveldb::Win32::Win32MapFile
_SECP256K1_	secp256k1/include/secp256k1.h	2;"	d
_SECP256K1_BENCH_H_	secp256k1/src/bench.h	8;"	d
_SECP256K1_ECDSA_	secp256k1/src/ecdsa.h	8;"	d
_SECP256K1_ECDSA_IMPL_H_	secp256k1/src/ecdsa_impl.h	9;"	d
_SECP256K1_ECKEY_	secp256k1/src/eckey.h	8;"	d
_SECP256K1_ECKEY_IMPL_H_	secp256k1/src/eckey_impl.h	8;"	d
_SECP256K1_ECMULT_	secp256k1/src/ecmult.h	8;"	d
_SECP256K1_ECMULT_GEN_	secp256k1/src/ecmult_gen.h	8;"	d
_SECP256K1_ECMULT_GEN_IMPL_H_	secp256k1/src/ecmult_gen_impl.h	8;"	d
_SECP256K1_ECMULT_IMPL_H_	secp256k1/src/ecmult_impl.h	8;"	d
_SECP256K1_ECMULT_STATIC_CONTEXT_	secp256k1/src/ecmult_static_context.h	2;"	d
_SECP256K1_FIELD_	secp256k1/src/field.h	8;"	d
_SECP256K1_FIELD_IMPL_H_	secp256k1/src/field_impl.h	8;"	d
_SECP256K1_FIELD_INNER5X52_IMPL_H_	secp256k1/src/field_5x52_asm_impl.h	15;"	d
_SECP256K1_FIELD_INNER5X52_IMPL_H_	secp256k1/src/field_5x52_int128_impl.h	8;"	d
_SECP256K1_FIELD_REPR_	secp256k1/src/field_10x26.h	8;"	d
_SECP256K1_FIELD_REPR_	secp256k1/src/field_5x52.h	8;"	d
_SECP256K1_FIELD_REPR_IMPL_H_	secp256k1/src/field_10x26_impl.h	8;"	d
_SECP256K1_FIELD_REPR_IMPL_H_	secp256k1/src/field_5x52_impl.h	8;"	d
_SECP256K1_GROUP_	secp256k1/src/group.h	8;"	d
_SECP256K1_GROUP_IMPL_H_	secp256k1/src/group_impl.h	8;"	d
_SECP256K1_HASH_	secp256k1/src/hash.h	8;"	d
_SECP256K1_HASH_IMPL_H_	secp256k1/src/hash_impl.h	8;"	d
_SECP256K1_NUM_	secp256k1/src/num.h	8;"	d
_SECP256K1_NUM_IMPL_H_	secp256k1/src/num_impl.h	8;"	d
_SECP256K1_NUM_REPR_	secp256k1/src/num_gmp.h	8;"	d
_SECP256K1_NUM_REPR_IMPL_H_	secp256k1/src/num_gmp_impl.h	8;"	d
_SECP256K1_SCALAR_	secp256k1/src/scalar.h	8;"	d
_SECP256K1_SCALAR_IMPL_H_	secp256k1/src/scalar_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_	secp256k1/src/scalar_4x64.h	8;"	d
_SECP256K1_SCALAR_REPR_	secp256k1/src/scalar_8x32.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	secp256k1/src/scalar_4x64_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	secp256k1/src/scalar_8x32_impl.h	8;"	d
_SECP256K1_TESTRAND_H_	secp256k1/src/testrand.h	8;"	d
_SECP256K1_TESTRAND_IMPL_H_	secp256k1/src/testrand_impl.h	8;"	d
_SECP256K1_UTIL_H_	secp256k1/src/util.h	8;"	d
_TruncateToPageBoundary	leveldb/util/env_win.cc	/^size_t Win32MapFile::_TruncateToPageBoundary( size_t s )$/;"	f	class:leveldb::Win32::Win32MapFile
_UnmapCurrentRegion	leveldb/util/env_win.cc	/^bool Win32MapFile::_UnmapCurrentRegion()$/;"	f	class:leveldb::Win32::Win32MapFile
_WIN32_IE	util.cpp	59;"	d	file:
_WIN32_IE	util.cpp	61;"	d	file:
_WIN32_WINNT	compat.h	15;"	d
_WIN32_WINNT	compat.h	17;"	d
_WIN32_WINNT	support/pagelocker.cpp	13;"	d	file:
_WIN32_WINNT	support/pagelocker.cpp	15;"	d	file:
_WIN32_WINNT	util.cpp	54;"	d	file:
_WIN32_WINNT	util.cpp	56;"	d	file:
__fdelt_warn	compat/glibc_compat.cpp	/^extern "C" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)$/;"	f
__javasecp256k1_attach	secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^static void __javasecp256k1_attach(void) {$/;"	f	file:
__javasecp256k1_detach	secp256k1/src/java/org_bitcoin_NativeSecp256k1.c	/^static void __javasecp256k1_detach(void) {$/;"	f	file:
_base	leveldb/util/env_win.cc	/^    char* _base;            \/\/ The mapped region$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_base_handle	leveldb/util/env_win.cc	/^    HANDLE _base_handle;	$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_createmultisig_redeemScript	rpcmisc.cpp	/^CScript _createmultisig_redeemScript(const Array& params)$/;"	f
_d	rpcserver.cpp	/^    SSLIOStreamDevice<Protocol> _d;$/;"	m	class:AcceptedConnectionImpl	file:
_dst	leveldb/util/env_win.cc	/^    char* _dst;             \/\/ Where to write next  (in range [base_,limit_])$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_file_offset	leveldb/util/env_win.cc	/^    uint64_t _file_offset;  \/\/ Offset of base_ in file$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_filename	leveldb/util/env_win.cc	/^    const std::string _filename;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_filename	leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_filename	leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_filename	leveldb/util/env_win.cc	/^    std::string _filename;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_hFile	leveldb/util/env_win.cc	/^    ::HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32SequentialFile	file:
_hFile	leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32FileLock	file:
_hFile	leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_hFile	leveldb/util/env_win.cc	/^    HANDLE _hFile;$/;"	m	class:leveldb::Win32::Win32RandomAccessFile	file:
_instance	support/pagelocker.cpp	/^LockedPageManager* LockedPageManager::_instance = NULL;$/;"	m	class:LockedPageManager	file:
_instance	support/pagelocker.h	/^    static LockedPageManager* _instance;$/;"	m	class:LockedPageManager
_last_sync	leveldb/util/env_win.cc	/^    char* _last_sync;       \/\/ Where have we synced up to$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_limit	leveldb/util/env_win.cc	/^    char* _limit;           \/\/ Limit of the mapped region$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_map_size	leveldb/util/env_win.cc	/^    size_t _map_size;       \/\/ How much extra memory to map at a time$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_pFileProxy	leveldb/util/env_win.cc	/^    WritableFile* _pFileProxy;$/;"	m	class:leveldb::Win32::Win32Logger	file:
_page_size	leveldb/util/env_win.cc	/^    size_t _page_size;$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_pending_sync	leveldb/util/env_win.cc	/^    bool _pending_sync;$/;"	m	class:leveldb::Win32::Win32MapFile	file:
_ssExtra	wallet/wallet.h	/^    std::vector<char> _ssExtra;$/;"	m	class:CAccountingEntry
_stream	rpcserver.cpp	/^    boost::iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;$/;"	m	class:AcceptedConnectionImpl	file:
abs64	timedata.cpp	/^static int64_t abs64(int64_t n)$/;"	f	file:
abs_builddir	Makefile	/^abs_builddir = \/home\/adrian\/gcoin-community-develop\/src$/;"	m
abs_builddir	secp256k1/Makefile	/^abs_builddir = \/home\/adrian\/gcoin-community-develop\/src\/secp256k1$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/adrian\/gcoin-community-develop\/src$/;"	m
abs_srcdir	secp256k1/Makefile	/^abs_srcdir = \/home\/adrian\/gcoin-community-develop\/src\/secp256k1$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/adrian\/gcoin-community-develop$/;"	m
abs_top_builddir	secp256k1/Makefile	/^abs_top_builddir = \/home\/adrian\/gcoin-community-develop\/src\/secp256k1$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/adrian\/gcoin-community-develop$/;"	m
abs_top_srcdir	secp256k1/Makefile	/^abs_top_srcdir = \/home\/adrian\/gcoin-community-develop\/src\/secp256k1$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_AR	secp256k1/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	secp256k1/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = $/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	secp256k1/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_OBJCXX	Makefile	/^ac_ct_OBJCXX = g++$/;"	m
ac_fn_c_check_func	secp256k1/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	secp256k1/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	secp256k1/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	secp256k1/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	secp256k1/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	secp256k1/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	secp256k1/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	secp256k1/configure	/^ac_fn_c_try_run ()$/;"	f
accept	tinyformat.h	/^void FormatIterator::accept(const T& value)$/;"	f	class:tinyformat::detail::FormatIterator
actions_	json/json_spirit_reader_template.h	/^        Semantic_actions_t& actions_;$/;"	m	class:json_spirit::Json_grammer
activate_addr	cache.cpp	/^namespace activate_addr$/;"	n	file:
activate_addr	cache.h	/^namespace activate_addr$/;"	n
activeHDChain	wallet/wallet.h	/^    HDChainID activeHDChain;$/;"	m	class:CWallet
activeTxn	wallet/db.h	/^    DbTxn* activeTxn;$/;"	m	class:CDB
actor	rpcserver.h	/^    rpcfn_type actor;$/;"	m	class:CRPCCommand
add	json/json_spirit_value.h	/^        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )$/;"	f	struct:json_spirit::Config_map
add	json/json_spirit_value.h	/^        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )$/;"	f	struct:json_spirit::Config_vector
addUnchecked	txmempool.cpp	/^bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)$/;"	f	class:CTxMemPool
add_coin	wallet/test/wallet_tests.cpp	/^static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)$/;"	f	file:
add_esc_char	json/json_spirit_writer_template.h	/^    bool add_esc_char( Char_type c, String_type& s )$/;"	f	namespace:json_spirit
add_esc_chars	json/json_spirit_writer_template.h	/^    String_type add_esc_chars( const String_type& s )$/;"	f	namespace:json_spirit
add_first	json/json_spirit_reader_template.h	/^        Value_type* add_first( const Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
add_posn_iter_and_read_range_or_throw	json/json_spirit_reader_template.h	/^    void add_posn_iter_and_read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
add_to_current	json/json_spirit_reader_template.h	/^        Value_type* add_to_current( const Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
added_files	leveldb/db/version_set.cc	/^    FileSet* added_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
addmultisigaddress	wallet/rpcwallet.cpp	/^Value addmultisigaddress(const Array& params, bool fHelp)$/;"	f
addnode	rpcnet.cpp	/^Value addnode(const Array& params, bool fHelp)$/;"	f
addr	base58.cpp	/^    CBitcoinAddress* addr;$/;"	m	class:__anon63::CBitcoinAddressVisitor	file:
addr	chainparams.h	/^    uint8_t addr[16];$/;"	m	struct:SeedSpec6
addr	net.h	/^    CAddress addr;$/;"	m	class:CNode
addrKnown	net.h	/^    CRollingBloomFilter addrKnown;$/;"	m	class:CNode
addrLocal	net.h	/^    CService addrLocal;$/;"	m	class:CNode
addrLocal	net.h	/^    std::string addrLocal;$/;"	m	class:CNodeStats
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNode
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
address	cache.h	/^    std::string address;$/;"	m	struct:order_list::order_info_
address	main.cpp	/^    CService address;$/;"	m	struct:__anon47::CNodeState	file:
address	main.cpp	/^    string address;$/;"	m	struct:__anon49::CCachedAddress	file:
address	net.h	/^        std::string address() const { return address_; }$/;"	f	class:CNetRecorder::CBandwidthRecord
address	net.h	/^        std::string address() const { return address_; }$/;"	f	class:CNetRecorder::CRTTRecord
address	test/test_bitcoin.h	/^    inline CTxDestination address() const$/;"	f	class:CWallet_UnitTest
address 	leveldb/doc/doc.css	/^address {$/;"	s
address_	cache.h	/^    std::string address_;$/;"	m	struct:color_license::Owner_
address_	net.h	/^        std::string address_;$/;"	m	class:CNetRecorder::CBandwidthRecord
address_	net.h	/^        std::string address_;$/;"	m	class:CNetRecorder::CRTTRecord
address_	test/test_bitcoin.h	/^    CTxDestination address_;$/;"	m	class:CWallet_UnitTest
addrman	net.cpp	/^CAddrMan addrman;$/;"	v
aix_post_process_depfile	secp256k1/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
alerts	test/alert_tests.cpp	/^    std::vector<CAlert> alerts;$/;"	m	struct:ReadAlerts	file:
alliance_member	cache.h	/^namespace alliance_member$/;"	n
alliance_member	init.h	/^namespace alliance_member$/;"	n
alloc_bytes_remaining_	leveldb/util/arena.h	/^  size_t alloc_bytes_remaining_;$/;"	m	class:leveldb::Arena
alloc_ptr_	leveldb/util/arena.h	/^  char* alloc_ptr_;$/;"	m	class:leveldb::Arena
allocate	support/allocators/secure.h	/^    T* allocate(std::size_t n, const void* hint = 0)$/;"	f	struct:secure_allocator
allocator_type	streams.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
allowed_	leveldb/util/env_posix.cc	/^  port::AtomicPointer allowed_;$/;"	m	class:leveldb::__anon42::MmapLimiter	file:
allowed_seeks	leveldb/db/version_edit.h	/^  int allowed_seeks;          \/\/ Seeks allowed until compaction$/;"	m	struct:leveldb::FileMetaData
almostEqual	test/arith_uint256_tests.cpp	/^bool almostEqual(double d1, double d2)$/;"	f
altstacktop	script/interpreter.cpp	60;"	d	file:
am__CONFIG_DISTCLEAN_FILES	secp256k1/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	secp256k1/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_2	Makefile	/^am__DEPENDENCIES_2 = $(am__append_11)$/;"	m
am__DEPENDENCIES_3	Makefile	/^am__DEPENDENCIES_3 = $(am__append_12)$/;"	m
am__EXEEXT_1	Makefile	/^am__EXEEXT_1 = gcoind$(EXEEXT)$/;"	m
am__EXEEXT_2	Makefile	/^am__EXEEXT_2 = gcoin-cli$(EXEEXT)$/;"	m
am__EXEEXT_2	secp256k1/Makefile	/^am__EXEEXT_2 = tests$(EXEEXT)$/;"	m
am__EXEEXT_3	Makefile	/^am__EXEEXT_3 = test\/test_bitcoin$(EXEEXT)$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/ax_boost_base.m4 \\$/;"	m
am__aclocal_m4_deps	secp256k1/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/build-aux\/m4\/bitcoin_secp.m4 \\$/;"	m
am__append_1	Makefile	/^am__append_1 = $(BDB_CPPFLAGS)$/;"	m
am__append_10	Makefile	/^am__append_10 = $(LIBLEVELDB_INT) \\$/;"	m
am__append_11	Makefile	/^am__append_11 = $(LIBLEVELDB_INT)$/;"	m
am__append_12	Makefile	/^am__append_12 = $(LIBMEMENV_INT)$/;"	m
am__append_13	Makefile	/^am__append_13 = -I$(srcdir)\/leveldb\/include \\$/;"	m
am__append_15	Makefile	/^am__append_15 = -DLEVELDB_PLATFORM_POSIX$/;"	m
am__append_17	Makefile	/^am__append_17 = leveldb\/port\/port_posix.cc$/;"	m
am__append_18	Makefile	/^am__append_18 = test\/test_bitcoin$/;"	m
am__append_19	Makefile	/^am__append_19 = test\/test_bitcoin$/;"	m
am__append_2	Makefile	/^am__append_2 = libbitcoin_wallet.a$/;"	m
am__append_2	secp256k1/Makefile	/^am__append_2 = tests$/;"	m
am__append_20	Makefile	/^am__append_20 = \\$/;"	m
am__append_21	Makefile	/^am__append_21 = \\$/;"	m
am__append_22	Makefile	/^am__append_22 = $(LIBBITCOIN_WALLET)$/;"	m
am__append_23	Makefile	/^am__append_23 = $(CLEAN_BITCOIN_TEST)$/;"	m
am__append_3	Makefile	/^am__append_3 = gcoind$/;"	m
am__append_4	Makefile	/^am__append_4 = gcoin-cli$/;"	m
am__append_7	Makefile	/^am__append_7 = libbitcoin_wallet.a$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__base_list	secp256k1/Makefile	/^am__base_list = \\$/;"	m
am__bench_internal_SOURCES_DIST	secp256k1/Makefile	/^am__bench_internal_SOURCES_DIST = src\/bench_internal.c$/;"	m
am__bench_recover_SOURCES_DIST	secp256k1/Makefile	/^am__bench_recover_SOURCES_DIST = src\/bench_recover.c$/;"	m
am__bench_sign_SOURCES_DIST	secp256k1/Makefile	/^am__bench_sign_SOURCES_DIST = src\/bench_sign.c$/;"	m
am__bench_verify_SOURCES_DIST	secp256k1/Makefile	/^am__bench_verify_SOURCES_DIST = src\/bench_verify.c$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	secp256k1/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	secp256k1/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__check_pre	Makefile	/^am__check_pre = \\$/;"	m
am__check_pre	secp256k1/Makefile	/^am__check_pre = \\$/;"	m
am__common_driver_flags	Makefile	/^am__common_driver_flags = \\$/;"	m
am__common_driver_flags	secp256k1/Makefile	/^am__common_driver_flags = \\$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	secp256k1/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__copy_in_global_log_rx	Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__copy_in_global_log_rx	secp256k1/Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__create_global_log	Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__create_global_log	secp256k1/Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	secp256k1/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	secp256k1/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	secp256k1/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	secp256k1/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__gcoin_cli_SOURCES_DIST	Makefile	/^am__gcoin_cli_SOURCES_DIST = bitcoin-cli.cpp bitcoin-cli-res.rc$/;"	m
am__gcoind_SOURCES_DIST	Makefile	/^am__gcoind_SOURCES_DIST = bitcoind.cpp bitcoind-res.rc$/;"	m
am__global_test_result_rx	Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__global_test_result_rx	secp256k1/Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__include	secp256k1/Makefile	/^am__include = include$/;"	m
am__include_HEADERS_DIST	Makefile	/^am__include_HEADERS_DIST = script\/bitcoinconsensus.h$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__install_max	secp256k1/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \\$/;"	m
am__installdirs	secp256k1/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \\$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__is_gnu_make	secp256k1/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	secp256k1/Makefile	/^am__leading_dot = .$/;"	m
am__leveldb_libleveldb_a_SOURCES_DIST	Makefile	/^am__leveldb_libleveldb_a_SOURCES_DIST = leveldb\/port\/atomic_pointer.h \\$/;"	m
am__leveldb_libmemenv_a_SOURCES_DIST	Makefile	/^am__leveldb_libmemenv_a_SOURCES_DIST =  \\$/;"	m
am__libbitcoin_util_a_SOURCES_DIST	Makefile	/^am__libbitcoin_util_a_SOURCES_DIST = support\/pagelocker.cpp \\$/;"	m
am__libbitcoinconsensus_la_SOURCES_DIST	Makefile	/^am__libbitcoinconsensus_la_SOURCES_DIST = crypto\/hmac_sha512.cpp \\$/;"	m
am__list_recheck_tests	Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__list_recheck_tests	secp256k1/Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	secp256k1/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	secp256k1/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	secp256k1/Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__mv	secp256k1/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	secp256k1/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	secp256k1/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	secp256k1/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_10	Makefile	/^am__objects_10 = $(am__objects_3) $(am__objects_3)$/;"	m
am__objects_2	Makefile	/^am__objects_2 = leveldb\/port\/leveldb_libleveldb_a-port_posix.$(OBJEXT)$/;"	m
am__objects_3	Makefile	/^am__objects_3 =$/;"	m
am__objects_8	Makefile	/^am__objects_8 = test\/test_test_bitcoin-accounting_tests.$(OBJEXT) \\$/;"	m
am__objects_9	Makefile	/^am__objects_9 = test\/test_test_bitcoin-arith_uint256_tests.$(OBJEXT) \\$/;"	m
am__post_remove_distdir	secp256k1/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__quote	secp256k1/Makefile	/^am__quote = $/;"	m
am__recheck_rx	Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recheck_rx	secp256k1/Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recursive_targets	Makefile	/^am__recursive_targets = \\$/;"	m
am__relativize	Makefile	/^am__relativize = \\$/;"	m
am__remove_distdir	secp256k1/Makefile	/^am__remove_distdir = \\$/;"	m
am__rst_title	Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__rst_title	secp256k1/Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__set_TESTS_bases	Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_TESTS_bases	secp256k1/Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_b	Makefile	/^am__set_b = \\$/;"	m
am__set_b	secp256k1/Makefile	/^am__set_b = \\$/;"	m
am__sh_e_setup	Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__sh_e_setup	secp256k1/Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	secp256k1/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	secp256k1/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	secp256k1/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__test_logs1	Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs1	secp256k1/Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs2	Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_logs2	secp256k1/Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__test_test_bitcoin_SOURCES_DIST	Makefile	/^am__test_test_bitcoin_SOURCES_DIST = test\/arith_uint256_tests.cpp \\$/;"	m
am__tests_SOURCES_DIST	secp256k1/Makefile	/^am__tests_SOURCES_DIST = src\/tests.c$/;"	m
am__tty_colors	Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors	secp256k1/Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__tty_colors_dummy	secp256k1/Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	secp256k1/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	secp256k1/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	secp256k1/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_	secp256k1/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	secp256k1/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	secp256k1/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_	secp256k1/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	secp256k1/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_CC_1	secp256k1/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	secp256k1/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	secp256k1/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	secp256k1/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	secp256k1/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	secp256k1/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	secp256k1/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	secp256k1/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	secp256k1/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	secp256k1/Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_	secp256k1/Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_0	secp256k1/Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am__v_lt_1	secp256k1/Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	secp256k1/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	secp256k1/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_crypto_libbitcoin_crypto_a_OBJECTS	Makefile	/^am_crypto_libbitcoin_crypto_a_OBJECTS =  \\$/;"	m
am_gcoin_cli_OBJECTS	Makefile	/^am_gcoin_cli_OBJECTS = gcoin_cli-bitcoin-cli.$(OBJEXT) \\$/;"	m
am_gcoind_OBJECTS	Makefile	/^am_gcoind_OBJECTS = gcoind-bitcoind.$(OBJEXT) $(am__objects_7)$/;"	m
am_leveldb_libleveldb_a_OBJECTS	Makefile	/^am_leveldb_libleveldb_a_OBJECTS = leveldb\/db\/leveldb_libleveldb_a-builder.$(OBJEXT) \\$/;"	m
am_leveldb_libmemenv_a_OBJECTS	Makefile	/^am_leveldb_libmemenv_a_OBJECTS = leveldb\/helpers\/memenv\/leveldb_libmemenv_a-memenv.$(OBJEXT)$/;"	m
am_libbitcoin_cli_a_OBJECTS	Makefile	/^am_libbitcoin_cli_a_OBJECTS = libbitcoin_cli_a-rpcclient.$(OBJEXT) \\$/;"	m
am_libbitcoin_common_a_OBJECTS	Makefile	/^am_libbitcoin_common_a_OBJECTS = libbitcoin_common_a-amount.$(OBJEXT) \\$/;"	m
am_libbitcoin_server_a_OBJECTS	Makefile	/^am_libbitcoin_server_a_OBJECTS =  \\$/;"	m
am_libbitcoin_util_a_OBJECTS	Makefile	/^am_libbitcoin_util_a_OBJECTS =  \\$/;"	m
am_libbitcoin_wallet_a_OBJECTS	Makefile	/^am_libbitcoin_wallet_a_OBJECTS =  \\$/;"	m
am_libbitcoinconsensus_la_OBJECTS	Makefile	/^am_libbitcoinconsensus_la_OBJECTS = crypto\/libbitcoinconsensus_la-hmac_sha512.lo \\$/;"	m
am_libbitcoinconsensus_la_rpath	Makefile	/^am_libbitcoinconsensus_la_rpath = -rpath \\$/;"	m
am_libsecp256k1_la_OBJECTS	secp256k1/Makefile	/^am_libsecp256k1_la_OBJECTS = src\/libsecp256k1_la-secp256k1.lo$/;"	m
am_test_test_bitcoin_OBJECTS	Makefile	/^am_test_test_bitcoin_OBJECTS = $(am__objects_9) \\$/;"	m
am_tests_OBJECTS	secp256k1/Makefile	/^am_tests_OBJECTS = src\/tests-tests.$(OBJEXT)$/;"	m
am_univalue_libbitcoin_univalue_a_OBJECTS	Makefile	/^am_univalue_libbitcoin_univalue_a_OBJECTS =  \\$/;"	m
amount	wallet/wallet.h	/^    CAmount amount;$/;"	m	struct:COutputEntry
amp	leveldb/doc/doc.css	/^code,samp,var {$/;"	s
append_esc_char_and_incr_iter	json/json_spirit_reader_template.h	/^    void append_esc_char_and_incr_iter( String_type& s, $/;"	f	namespace:json_spirit
ar 	leveldb/doc/doc.css	/^code,samp,var {$/;"	s
arena_	leveldb/db/memtable.h	/^  Arena arena_;$/;"	m	class:leveldb::MemTable
arena_	leveldb/db/skiplist.h	/^  Arena* const arena_;    \/\/ Arena used for allocations of nodes$/;"	m	class:leveldb::SkipList
arena_	leveldb/db/skiplist_test.cc	/^  Arena arena_;$/;"	m	class:leveldb::ConcurrentTest	file:
arg	leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon42::PosixEnv::BGItem	file:
arg	leveldb/util/env_posix.cc	/^  void* arg;$/;"	m	struct:leveldb::__anon42::__anon43::StartThreadState	file:
arg1	leveldb/include/leveldb/iterator.h	/^    void* arg1;$/;"	m	struct:leveldb::Iterator::Cleanup
arg2	leveldb/include/leveldb/iterator.h	/^    void* arg2;$/;"	m	struct:leveldb::Iterator::Cleanup
arg_	leveldb/table/two_level_iterator.cc	/^  void* arg_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
arith_uint256	arith_uint256.h	/^    arith_uint256() {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    arith_uint256(uint64_t b) : base_uint<256>(b) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^    explicit arith_uint256(const std::string& str) : base_uint<256>(str) {}$/;"	f	class:arith_uint256
arith_uint256	arith_uint256.h	/^class arith_uint256 : public base_uint<256> {$/;"	c
arith_uint256V	test/arith_uint256_tests.cpp	/^inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch)$/;"	f
array_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
array_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
as_fn_append	secp256k1/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	secp256k1/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	secp256k1/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	secp256k1/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	secp256k1/config.status	/^as_fn_error ()$/;"	f
as_fn_error	secp256k1/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	secp256k1/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	secp256k1/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	secp256k1/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	secp256k1/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	secp256k1/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	secp256k1/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	secp256k1/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	secp256k1/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	secp256k1/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	secp256k1/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	secp256k1/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	secp256k1/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	secp256k1/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	secp256k1/configure	/^as_fn_unset ()$/;"	f
atoi	utilstrencodings.cpp	/^int atoi(const std::string& str)$/;"	f
atoi64	utilstrencodings.cpp	/^int64_t atoi64(const char* psz)$/;"	f
atoi64	utilstrencodings.cpp	/^int64_t atoi64(const std::string& str)$/;"	f
avg	policy/fees.h	/^    std::vector<double> avg;$/;"	m	class:TxConfirmStats
ax_pthread_config	Makefile	/^ax_pthread_config = $/;"	m
b1	bloom.h	/^    CBloomFilter b1, b2;$/;"	m	class:CRollingBloomFilter
b2	bloom.h	/^    CBloomFilter b1, b2;$/;"	m	class:CRollingBloomFilter
bSpendZeroConfChange	wallet/wallet.cpp	/^bool bSpendZeroConfChange = true;$/;"	v
backing_store_	leveldb/db/log_reader.h	/^  char* const backing_store_;$/;"	m	class:leveldb::log::Reader
backupheight_	cache.h	/^    int backupheight_;$/;"	m	class:CacheInterface
backupwallet	wallet/rpcwallet.cpp	/^Value backupwallet(const Array& params, bool fHelp)$/;"	f
bandwidth	net.h	/^        int64_t bandwidth() const { return bandwidth_; }$/;"	f	class:CNetRecorder::CBandwidthRecord
bandwidth_	net.h	/^        int64_t bandwidth_;$/;"	m	class:CNetRecorder::CBandwidthRecord
bannode	rpcnet.cpp	/^Value bannode(const Array& params, bool fHelp)$/;"	f
base	coins.h	/^    CCoinsView *base;$/;"	m	class:CCoinsViewBacked
base	leveldb/util/testharness.cc	/^  const char* base;$/;"	m	struct:leveldb::test::__anon41::Test	file:
base	support/allocators/secure.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base	support/allocators/zeroafterfree.h	/^    typedef std::allocator<T> base;$/;"	t	struct:zero_after_free_allocator
base58Prefixes	chainparams.h	/^    std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];$/;"	m	class:CChainParams
base_	leveldb/db/version_set.cc	/^  Version* base_;$/;"	m	class:leveldb::VersionSet::Builder	file:
base_blob	uint256.cpp	/^base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)$/;"	f	class:base_blob
base_blob	uint256.h	/^    base_blob()$/;"	f	class:base_blob
base_blob	uint256.h	/^class base_blob$/;"	c
base_lg_	leveldb/table/filter_block.h	/^  size_t base_lg_;      \/\/ Encoding parameter (see kFilterBaseLg in .cc file)$/;"	m	class:leveldb::FilterBlockReader
base_uint	arith_uint256.cpp	/^base_uint<BITS>::base_uint(const std::string& str)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint()$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint(const base_uint& b)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^    base_uint(uint64_t b)$/;"	f	class:base_uint
base_uint	arith_uint256.h	/^class base_uint$/;"	c
batch	leveldb/db/db_impl.cc	/^  WriteBatch* batch;$/;"	m	struct:leveldb::DBImpl::Writer	file:
batch	leveldbwrapper.h	/^    leveldb::WriteBatch batch;$/;"	m	class:CLevelDBBatch
bctest	test/bctest.py	/^def bctest(testDir, testObj, exeext):$/;"	f
bctester	test/bctest.py	/^def bctester(testDir, input_basename, buildenv):$/;"	f
be16toh	compat/endian.h	/^inline uint16_t be16toh(uint16_t big_endian_16bits)$/;"	f
be32toh	compat/endian.h	/^inline uint32_t be32toh(uint32_t big_endian_32bits)$/;"	f
be64toh	compat/endian.h	/^inline uint64_t be64toh(uint64_t big_endian_64bits)$/;"	f
begin	key.h	/^    const unsigned char* begin() const { return vch; }$/;"	f	class:CKey
begin	leveldb/db/db_impl.h	/^    const InternalKey* begin;   \/\/ NULL means beginning of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
begin	limitedmap.h	/^    const_iterator begin() const { return map.begin(); }$/;"	f	class:limitedmap
begin	mruset.h	/^    iterator begin() const { return set.begin(); }$/;"	f	class:mruset
begin	pubkey.h	/^    const unsigned char* begin() const { return vch; }$/;"	f	class:CPubKey
begin	serialize.h	/^    char* begin() { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const char* begin() const { return pbegin; }$/;"	f	class:CFlatData
begin	streams.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	streams.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	uint256.h	/^    const unsigned char* begin() const$/;"	f	class:base_blob
begin	uint256.h	/^    unsigned char* begin()$/;"	f	class:base_blob
begin_	json/json_spirit_reader_template.h	/^        Mp_iter begin_;$/;"	m	struct:json_spirit::Multi_pass_iters
begin_array	json/json_spirit_reader_template.h	/^        void begin_array( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
begin_compound	json/json_spirit_reader_template.h	/^        void begin_compound()$/;"	f	class:json_spirit::Semantic_actions
begin_obj	json/json_spirit_reader_template.h	/^        void begin_obj( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
begin_ptr	serialize.h	/^inline T* begin_ptr(std::vector<T,TAl>& v)$/;"	f
begin_ptr	serialize.h	/^inline const T* begin_ptr(const std::vector<T,TAl>& v)$/;"	f
bench_ecmult_wnaf	secp256k1/src/bench_internal.c	/^void bench_ecmult_wnaf(void* arg) {$/;"	f
bench_field_inverse	secp256k1/src/bench_internal.c	/^void bench_field_inverse(void* arg) {$/;"	f
bench_field_inverse_var	secp256k1/src/bench_internal.c	/^void bench_field_inverse_var(void* arg) {$/;"	f
bench_field_mul	secp256k1/src/bench_internal.c	/^void bench_field_mul(void* arg) {$/;"	f
bench_field_normalize	secp256k1/src/bench_internal.c	/^void bench_field_normalize(void* arg) {$/;"	f
bench_field_normalize_weak	secp256k1/src/bench_internal.c	/^void bench_field_normalize_weak(void* arg) {$/;"	f
bench_field_sqr	secp256k1/src/bench_internal.c	/^void bench_field_sqr(void* arg) {$/;"	f
bench_field_sqrt_var	secp256k1/src/bench_internal.c	/^void bench_field_sqrt_var(void* arg) {$/;"	f
bench_group_add_affine	secp256k1/src/bench_internal.c	/^void bench_group_add_affine(void* arg) {$/;"	f
bench_group_add_affine_var	secp256k1/src/bench_internal.c	/^void bench_group_add_affine_var(void* arg) {$/;"	f
bench_group_add_var	secp256k1/src/bench_internal.c	/^void bench_group_add_var(void* arg) {$/;"	f
bench_group_double_var	secp256k1/src/bench_internal.c	/^void bench_group_double_var(void* arg) {$/;"	f
bench_hmac_sha256	secp256k1/src/bench_internal.c	/^void bench_hmac_sha256(void* arg) {$/;"	f
bench_internal_LINK	secp256k1/Makefile	/^bench_internal_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\$/;"	m
bench_internal_OBJECTS	secp256k1/Makefile	/^bench_internal_OBJECTS = $(am_bench_internal_OBJECTS)$/;"	m
bench_inv_t	secp256k1/src/bench_internal.c	/^} bench_inv_t;$/;"	t	typeref:struct:__anon79	file:
bench_recover	secp256k1/src/bench_recover.c	/^void bench_recover(void* arg) {$/;"	f
bench_recover_LINK	secp256k1/Makefile	/^bench_recover_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
bench_recover_OBJECTS	secp256k1/Makefile	/^bench_recover_OBJECTS = $(am_bench_recover_OBJECTS)$/;"	m
bench_recover_setup	secp256k1/src/bench_recover.c	/^void bench_recover_setup(void* arg) {$/;"	f
bench_recover_t	secp256k1/src/bench_recover.c	/^} bench_recover_t;$/;"	t	typeref:struct:__anon83	file:
bench_rfc6979_hmac_sha256	secp256k1/src/bench_internal.c	/^void bench_rfc6979_hmac_sha256(void* arg) {$/;"	f
bench_scalar_add	secp256k1/src/bench_internal.c	/^void bench_scalar_add(void* arg) {$/;"	f
bench_scalar_inverse	secp256k1/src/bench_internal.c	/^void bench_scalar_inverse(void* arg) {$/;"	f
bench_scalar_inverse_var	secp256k1/src/bench_internal.c	/^void bench_scalar_inverse_var(void* arg) {$/;"	f
bench_scalar_mul	secp256k1/src/bench_internal.c	/^void bench_scalar_mul(void* arg) {$/;"	f
bench_scalar_negate	secp256k1/src/bench_internal.c	/^void bench_scalar_negate(void* arg) {$/;"	f
bench_scalar_split	secp256k1/src/bench_internal.c	/^void bench_scalar_split(void* arg) {$/;"	f
bench_scalar_sqr	secp256k1/src/bench_internal.c	/^void bench_scalar_sqr(void* arg) {$/;"	f
bench_setup	secp256k1/src/bench_internal.c	/^void bench_setup(void* arg) {$/;"	f
bench_sha256	secp256k1/src/bench_internal.c	/^void bench_sha256(void* arg) {$/;"	f
bench_sign	secp256k1/src/bench_sign.c	/^static void bench_sign(void* arg) {$/;"	f	file:
bench_sign_LINK	secp256k1/Makefile	/^bench_sign_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
bench_sign_OBJECTS	secp256k1/Makefile	/^bench_sign_OBJECTS = $(am_bench_sign_OBJECTS)$/;"	m
bench_sign_setup	secp256k1/src/bench_sign.c	/^static void bench_sign_setup(void* arg) {$/;"	f	file:
bench_sign_t	secp256k1/src/bench_sign.c	/^} bench_sign_t;$/;"	t	typeref:struct:__anon67	file:
bench_verify_LINK	secp256k1/Makefile	/^bench_verify_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
bench_verify_OBJECTS	secp256k1/Makefile	/^bench_verify_OBJECTS = $(am_bench_verify_OBJECTS)$/;"	m
benchmark_verify	secp256k1/src/bench_verify.c	/^static void benchmark_verify(void* arg) {$/;"	f	file:
benchmark_verify_t	secp256k1/src/bench_verify.c	/^} benchmark_verify_t;$/;"	t	typeref:struct:__anon66	file:
bg_compaction_scheduled_	leveldb/db/db_impl.h	/^  bool bg_compaction_scheduled_;$/;"	m	class:leveldb::DBImpl
bg_cv_	leveldb/db/db_impl.h	/^  port::CondVar bg_cv_;          \/\/ Signalled when background work finishes$/;"	m	class:leveldb::DBImpl
bg_error_	leveldb/db/db_impl.h	/^  Status bg_error_;$/;"	m	class:leveldb::DBImpl
bgsignal_	leveldb/util/env_posix.cc	/^  pthread_cond_t bgsignal_;$/;"	m	class:leveldb::__anon42::PosixEnv	file:
bgthread_	leveldb/util/env_posix.cc	/^  pthread_t bgthread_;$/;"	m	class:leveldb::__anon42::PosixEnv	file:
bignum_error	test/bignum.h	/^    explicit bignum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:bignum_error
bignum_error	test/bignum.h	/^class bignum_error : public std::runtime_error$/;"	c
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3)$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	secp256k1/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bitcoinconsensus_ERR_OK	script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_OK = 0,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_DESERIALIZE	script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_DESERIALIZE,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_INDEX	script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_INDEX,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_ERR_TX_SIZE_MISMATCH	script/bitcoinconsensus.h	/^    bitcoinconsensus_ERR_TX_SIZE_MISMATCH,$/;"	e	enum:bitcoinconsensus_error_t
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG	script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), \/\/ enforce strict DER (BIP66) compliance$/;"	e	enum:__anon89
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE	script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,$/;"	e	enum:__anon89
bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH	script/bitcoinconsensus.h	/^    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), \/\/ evaluate P2SH (BIP16) subscripts$/;"	e	enum:__anon89
bitcoinconsensus_error	script/bitcoinconsensus.h	/^} bitcoinconsensus_error;$/;"	t	typeref:enum:bitcoinconsensus_error_t
bitcoinconsensus_error_t	script/bitcoinconsensus.h	/^typedef enum bitcoinconsensus_error_t$/;"	g
bitcoinconsensus_verify_script	script/bitcoinconsensus.cpp	/^int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,$/;"	f
bitcoinconsensus_version	script/bitcoinconsensus.cpp	/^unsigned int bitcoinconsensus_version()$/;"	f
bitdb	wallet/db.cpp	/^CDBEnv bitdb;$/;"	v
bits	arith_uint256.cpp	/^unsigned int base_uint<BITS>::bits() const$/;"	f	class:base_uint
bits_per_key_	leveldb/util/bloom.cc	/^  size_t bits_per_key_;$/;"	m	class:leveldb::__anon40::BloomFilterPolicy	file:
blind	secp256k1/src/ecmult_gen.h	/^    secp256k1_scalar_t blind;$/;"	m	struct:__anon68
block	miner.h	/^    CBlock block;$/;"	m	struct:CBlockTemplate
block	script/interpreter.h	/^    const CBlock block;$/;"	m	class:MutableBlockHeaderSignatureChecker
block	script/interpreter.h	/^    const CBlock* block;$/;"	m	class:BlockHeaderSignatureChecker
block	script/sign.h	/^    const CBlock* block;$/;"	m	class:BlockHeaderSignatureCreator
blockHeight	policy/fees.h	/^        unsigned int blockHeight;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
blockToJSON	rpcblockchain.cpp	/^Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false)$/;"	f
block_	leveldb/table/table_test.cc	/^  Block* block_;$/;"	m	class:leveldb::BlockConstructor	file:
block_cache	leveldb/include/leveldb/options.h	/^  Cache* block_cache;$/;"	m	struct:leveldb::Options
block_function_	leveldb/table/two_level_iterator.cc	/^  BlockFunction block_function_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
block_miner	cache.cpp	/^namespace block_miner$/;"	n	file:
block_miner	cache.h	/^namespace block_miner$/;"	n
block_offset_	leveldb/db/log_writer.h	/^  int block_offset_;       \/\/ Current offset in block$/;"	m	class:leveldb::log::Writer
block_restart_interval	leveldb/include/leveldb/options.h	/^  int block_restart_interval;$/;"	m	struct:leveldb::Options
block_size	leveldb/include/leveldb/options.h	/^  size_t block_size;$/;"	m	struct:leveldb::Options
blockinfo	test/miner_tests.cpp	/^} blockinfo[] = {$/;"	v	typeref:struct:__anon95	file:
blocks_	leveldb/helpers/memenv/memenv.cc	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::__anon26::FileState	file:
blocks_	leveldb/util/arena.h	/^  std::vector<char*> blocks_;$/;"	m	class:leveldb::Arena
blocks_memory_	leveldb/util/arena.h	/^  size_t blocks_memory_;$/;"	m	class:leveldb::Arena
bloomflags	bloom.h	/^enum bloomflags$/;"	g
bm	leveldb/db/db_bench.cc	/^    Benchmark* bm;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
body 	leveldb/doc/doc.css	/^body {$/;"	s
bool_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
boost	init.h	/^namespace boost$/;"	n
boost	net.h	/^namespace boost$/;"	n
boost	util.cpp	/^namespace boost$/;"	n	file:
boost_unordered_node	memusage.h	/^struct boost_unordered_node : private X$/;"	s	namespace:memusage
bswap_16	compat/byteswap.h	/^inline uint16_t bswap_16(uint16_t x)$/;"	f
bswap_32	compat/byteswap.h	/^inline uint32_t bswap_32(uint32_t x)$/;"	f
bswap_64	compat/byteswap.h	/^inline uint64_t bswap_64(uint64_t x)$/;"	f
bucketIndex	policy/fees.h	/^        unsigned int bucketIndex;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
bucketMap	policy/fees.h	/^    std::map<double, unsigned int> bucketMap; \/\/ Map of bucket upper-bound to index into all vectors by bucket$/;"	m	class:TxConfirmStats
buckets	policy/fees.h	/^    std::vector<double> buckets;              \/\/ The upper-bound of the range for the bucket (inclusive)$/;"	m	class:TxConfirmStats
buckets_	leveldb/util/histogram.h	/^  double buckets_[kNumBuckets];$/;"	m	class:leveldb::Histogram
buf	crypto/ripemd160.h	/^    unsigned char buf[64];$/;"	m	class:CRIPEMD160
buf	crypto/sha1.h	/^    unsigned char buf[64];$/;"	m	class:CSHA1
buf	crypto/sha256.h	/^    unsigned char buf[64];$/;"	m	class:CSHA256
buf	crypto/sha512.h	/^    unsigned char buf[128];$/;"	m	class:CSHA512
buf	secp256k1/src/hash.h	/^    uint32_t buf[16]; \/* In big endian *\/$/;"	m	struct:__anon80
buffer	leveldb/db/version_set.h	/^    char buffer[100];$/;"	m	struct:leveldb::VersionSet::LevelSummaryStorage
buffer_	leveldb/db/log_reader.h	/^  Slice buffer_;$/;"	m	class:leveldb::log::Reader
buffer_	leveldb/table/block_builder.h	/^  std::string           buffer_;      \/\/ Destination buffer$/;"	m	class:leveldb::BlockBuilder
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build	secp256k1/Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_alias	secp256k1/Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_cpu	secp256k1/Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_os	secp256k1/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_triplet	secp256k1/Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
build_vendor	secp256k1/Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
builddir	secp256k1/Makefile	/^builddir = .$/;"	m
builder	leveldb/db/db_impl.cc	/^  TableBuilder* builder;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
buy_amount	cache.h	/^    int64_t buy_amount, sell_amount;$/;"	m	struct:order_list::order_info_
byFee	miner.cpp	/^    bool byFee;$/;"	m	class:TxPriorityCompare	file:
bytes	crypto/ripemd160.h	/^    size_t bytes;$/;"	m	class:CRIPEMD160
bytes	crypto/sha1.h	/^    size_t bytes;$/;"	m	class:CSHA1
bytes	crypto/sha256.h	/^    size_t bytes;$/;"	m	class:CSHA256
bytes	crypto/sha512.h	/^    size_t bytes;$/;"	m	class:CSHA512
bytes	secp256k1/src/hash.h	/^    size_t bytes;$/;"	m	struct:__anon80
bytes_	leveldb/db/db_bench.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::__anon15::Stats	file:
bytes_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int64_t bytes_;$/;"	m	class:leveldb::Benchmark	file:
bytes_counter_	leveldb/db/db_iter.cc	/^  ssize_t bytes_counter_;$/;"	m	class:leveldb::__anon22::DBIter	file:
bytes_read	leveldb/db/db_impl.h	/^    int64_t bytes_read;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytes_written	leveldb/db/db_impl.h	/^    int64_t bytes_written;$/;"	m	struct:leveldb::DBImpl::CompactionStats
bytewise	leveldb/util/comparator.cc	/^static const Comparator* bytewise;$/;"	m	namespace:leveldb	file:
cachable	leveldb/table/format.h	/^  bool cachable;        \/\/ True iff data can be cached$/;"	m	struct:leveldb::BlockContents
cache	coins.h	/^    CCoinsViewCache& cache;$/;"	m	class:CCoinsModifier
cacheCoins	coins.h	/^    mutable CCoinsMap cacheCoins;$/;"	m	class:CCoinsViewCache
cacheStore	main.h	/^    bool cacheStore;$/;"	m	class:CScriptCheck
cache_	leveldb/db/db_bench.cc	/^  Cache* cache_;$/;"	m	class:leveldb::Benchmark	file:
cache_	leveldb/db/table_cache.h	/^  Cache* cache_;$/;"	m	class:leveldb::TableCache
cache_	leveldb/util/cache_test.cc	/^  Cache* cache_;$/;"	m	class:leveldb::CacheTest	file:
cache_id	leveldb/table/table.cc	/^  uint64_t cache_id;$/;"	m	struct:leveldb::Table::Rep	file:
cachedCoinUsage	coins.h	/^    size_t cachedCoinUsage; \/\/ Cached memory usage of the CCoins object before modification$/;"	m	class:CCoinsModifier
cachedCoinsUsage	coins.h	/^    mutable size_t cachedCoinsUsage;$/;"	m	class:CCoinsViewCache
cancelorder	wallet/rpcwallet.cpp	/^Value cancelorder(const Array& params, bool fHelp)$/;"	f
capacity_	leveldb/util/cache.cc	/^  size_t capacity_;$/;"	m	class:leveldb::__anon39::LRUCache	file:
category	rpcserver.h	/^    std::string category;$/;"	m	class:CRPCCommand
chIV	wallet/crypter.h	/^    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chKey	wallet/crypter.h	/^    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chRejectCode	consensus/validation.h	/^    unsigned char chRejectCode;$/;"	m	class:CValidationState
chRejectCode	main.cpp	/^    unsigned char chRejectCode;$/;"	m	struct:__anon47::CBlockReject	file:
chainActive	main.cpp	/^CChain chainActive;$/;"	v
chainHash	wallet/hdkeystore.h	/^    HDChainID chainHash; \/\/hash of the chains master pubkey$/;"	m	class:CHDPubKey
chainHash	wallet/hdkeystore.h	/^    HDChainID chainHash; \/\/hash() of the masterpubkey$/;"	m	class:CHDChain
chainPath	wallet/hdkeystore.h	/^    std::string chainPath; \/\/individual key chainpath like m\/44'\/0'\/0'\/0\/1$/;"	m	class:CHDPubKey
chainPath	wallet/hdkeystore.h	/^    std::string chainPath; \/\/something like "m'\/44'\/0'\/0'\/c"$/;"	m	class:CHDChain
chaincode	key.h	/^    ChainCode chaincode;$/;"	m	struct:CExtKey
chaincode	pubkey.h	/^    ChainCode chaincode;$/;"	m	struct:CExtPubKey
charge	leveldb/util/cache.cc	/^  size_t charge;      \/\/ TODO(opt): Only allow uint32_t?$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
check	txmempool.cpp	/^void CTxMemPool::check(const CCoinsViewCache *pcoins) const$/;"	f	class:CTxMemPool
checkObject	univalue/univalue.cpp	/^bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)$/;"	f	class:UniValue
check_fe_equal	secp256k1/src/tests.c	/^int check_fe_equal(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {$/;"	f
check_fe_inverse	secp256k1/src/tests.c	/^int check_fe_inverse(const secp256k1_fe_t *a, const secp256k1_fe_t *ai) {$/;"	f
check_type	json/json_spirit_value.h	/^    void Value_impl< Config >::check_type( const Value_type vtype ) const$/;"	f	class:json_spirit::Value_impl
checked_malloc	secp256k1/src/util.h	/^static SECP256K1_INLINE void *checked_malloc(size_t size) {$/;"	f
checker	script/sign.h	/^    const BlockHeaderSignatureChecker checker;$/;"	m	class:BlockHeaderSignatureCreator
checker	script/sign.h	/^    const TransactionSignatureChecker checker;$/;"	m	class:TransactionSignatureCreator
checkpointData	chainparams.h	/^    Checkpoints::CCheckpointData checkpointData;$/;"	m	class:CChainParams
checksum_	leveldb/db/log_reader.h	/^  bool const checksum_;$/;"	m	class:leveldb::log::Reader
children_	leveldb/table/merger.cc	/^  IteratorWrapper* children_;$/;"	m	class:leveldb::__anon28::MergingIterator	file:
cleanSubVer	net.h	/^    std::string cleanSubVer;$/;"	m	class:CNodeStats
cleanSubVer	net.h	/^    std::string strSubVer, cleanSubVer;$/;"	m	class:CNode
cleanup_	leveldb/include/leveldb/iterator.h	/^  Cleanup cleanup_;$/;"	m	class:leveldb::Iterator
clear	bloom.cpp	/^void CBloomFilter::clear()$/;"	f	class:CBloomFilter
clear	bloom.cpp	/^void CRollingBloomFilter::clear()$/;"	f	class:CRollingBloomFilter
clear	leveldb/include/leveldb/slice.h	/^  void clear() { data_ = ""; size_ = 0; }$/;"	f	class:leveldb::Slice
clear	mruset.h	/^    void clear()$/;"	f	class:mruset
clear	script/script.h	/^    void clear()$/;"	f	class:CScript
clear	streams.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	txmempool.cpp	/^void CTxMemPool::clear()$/;"	f	class:CTxMemPool
clear	univalue/univalue.cpp	/^void UniValue::clear()$/;"	f	class:UniValue
close	leveldb/port/port_win.h	36;"	d
close	rpcserver.cpp	/^    virtual void close()$/;"	f	class:AcceptedConnectionImpl
closed	leveldb/table/table_builder.cc	/^  bool closed;          \/\/ Either Finish() or Abandon() has been called.$/;"	m	struct:leveldb::TableBuilder::Rep	file:
cmp	leveldb/table/table_test.cc	/^  const Comparator* cmp;$/;"	m	struct:leveldb::__anon34::STLLessThan	file:
code	leveldb/doc/doc.css	/^code,samp,var {$/;"	s
code	leveldb/include/leveldb/status.h	/^  Code code() const {$/;"	f	class:leveldb::Status
coins	coins.h	/^    CCoins coins; \/\/ The actual cached data.$/;"	m	struct:CCoinsCacheEntry
color	main.h	/^    const type_Color color;$/;"	m	class:Fee
color	memusage.h	/^    int color;$/;"	m	struct:memusage::stl_tree_node
color	primitives/transaction.h	/^    type_Color color;$/;"	m	class:CTxOut
color	test/handler_license.cpp	/^    type_Color color;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
color	test/handler_license.cpp	/^    type_Color color;$/;"	m	struct:TransferLicenseHandlerCheckValidFixture	file:
color	test/handler_normal.cpp	/^    type_Color color;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
color	test/test_bitcoin.h	/^    inline type_Color color() const$/;"	f	class:CWallet_UnitTest
color	undo.h	/^    type_Color color;     \/\/ its color$/;"	m	class:CTxInUndo
color	wallet/wallet.h	/^    type_Color color;$/;"	m	struct:COutputEntry
color_	test/test_bitcoin.h	/^    type_Color color_;$/;"	m	class:CWallet_UnitTest
color_admin_amount_	test/test_bitcoin.h	/^    int64_t color_admin_amount_, license_amount_;$/;"	m	class:CWallet_UnitTest
color_license	cache.cpp	/^namespace color_license$/;"	n	file:
color_license	cache.h	/^namespace color_license$/;"	n
column_	json/json_spirit_error_position.h	/^        unsigned int column_;$/;"	m	struct:json_spirit::Error_position
comment	test/script_tests.cpp	/^    std::string comment;$/;"	m	class:__anon94::TestBuilder	file:
comp_	leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::LZOCompressor<kyotocabinet::LZO::RAW> comp_;$/;"	m	class:leveldb::Benchmark	file:
compact_pointer_	leveldb/db/version_set.h	/^  std::string compact_pointer_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet
compact_pointers_	leveldb/db/version_edit.h	/^  std::vector< std::pair<int, InternalKey> > compact_pointers_;$/;"	m	class:leveldb::VersionEdit
compaction	leveldb/db/db_impl.cc	/^  Compaction* const compaction;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
compaction_level_	leveldb/db/version_set.h	/^  int compaction_level_;$/;"	m	class:leveldb::Version
compaction_score_	leveldb/db/version_set.h	/^  double compaction_score_;$/;"	m	class:leveldb::Version
comparator	leveldb/db/memtable.h	/^    const InternalKeyComparator comparator;$/;"	m	struct:leveldb::MemTable::KeyComparator
comparator	leveldb/include/leveldb/options.h	/^  const Comparator* comparator;$/;"	m	struct:leveldb::Options
comparator_	leveldb/db/memtable.h	/^  KeyComparator comparator_;$/;"	m	class:leveldb::MemTable
comparator_	leveldb/db/version_edit.h	/^  std::string comparator_;$/;"	m	class:leveldb::VersionEdit
comparator_	leveldb/table/block.cc	/^  const Comparator* const comparator_;$/;"	m	class:leveldb::Block::Iter	file:
comparator_	leveldb/table/merger.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::__anon28::MergingIterator	file:
comparator_	leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::BlockConstructor	file:
comparator_	leveldb/table/table_test.cc	/^  const Comparator* comparator_;$/;"	m	class:leveldb::DBConstructor	file:
compare	leveldb/include/leveldb/slice.h	/^inline int Slice::compare(const Slice& b) const {$/;"	f	class:leveldb::Slice
compare_	leveldb/db/c.cc	/^  int (*compare_)($/;"	m	struct:leveldb_comparator_t	file:
compare_	leveldb/db/skiplist.h	/^  Comparator const compare_;$/;"	m	class:leveldb::SkipList
complete	net.h	/^    bool complete() const$/;"	f	class:CNetMessage
compressed_output	leveldb/table/table_builder.cc	/^  std::string compressed_output;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
compression	leveldb/include/leveldb/options.h	/^  CompressionType compression;$/;"	m	struct:leveldb::Options
condMaster	checkqueue.h	/^    boost::condition_variable condMaster;$/;"	m	class:CCheckQueue
condWorker	checkqueue.h	/^    boost::condition_variable condWorker;$/;"	m	class:CCheckQueue
condition	sync.h	/^    boost::condition_variable condition;$/;"	m	class:CSemaphore
confAvg	policy/fees.h	/^    std::vector<std::vector<double> > confAvg; \/\/ confAvg[Y][X]$/;"	m	class:TxConfirmStats
config	leveldb/db/dbformat.h	/^namespace config {$/;"	n	namespace:leveldb
connect	rpcprotocol.h	/^    bool connect(const std::string& server, const std::string& port)$/;"	f	class:SSLIOStreamDevice
consensus	chainparams.h	/^    Consensus::Params consensus;$/;"	m	class:CChainParams
const_iterator	limitedmap.h	/^    typedef typename std::map<K, V>::const_iterator const_iterator;$/;"	t	class:limitedmap
const_iterator	mruset.h	/^    typedef typename std::set<T>::const_iterator const_iterator;$/;"	t	class:mruset
const_iterator	streams.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	support/allocators/secure.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_pointer	support/allocators/zeroafterfree.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:zero_after_free_allocator
const_reference	streams.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
const_reference	support/allocators/secure.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	support/allocators/zeroafterfree.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:zero_after_free_allocator
constructor_	leveldb/table/table_test.cc	/^  Constructor* constructor_;$/;"	m	class:leveldb::Harness	file:
contains	bloom.cpp	/^bool CBloomFilter::contains(const COutPoint& outpoint) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const uint256& hash) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const$/;"	f	class:CRollingBloomFilter
contents	leveldb/table/table_test.cc	/^  const std::string& contents() const { return contents_; }$/;"	f	class:leveldb::StringSink
contents_	leveldb/db/log_test.cc	/^    Slice contents_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
contents_	leveldb/db/log_test.cc	/^    std::string contents_;$/;"	m	class:leveldb::log::LogTest::StringDest	file:
contents_	leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSink	file:
contents_	leveldb/table/table_test.cc	/^  std::string contents_;$/;"	m	class:leveldb::StringSource	file:
convert	rpcclient.cpp	/^    bool convert(const std::string& method, int idx) {$/;"	f	class:CRPCConvertTable
convertSeed6	net.cpp	/^static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn)$/;"	f	file:
convertToInt	tinyformat.h	/^struct convertToInt$/;"	s	namespace:tinyformat::detail
convertToInt	tinyformat.h	/^struct convertToInt<T,true>$/;"	s	namespace:tinyformat::detail
copyStats	net.cpp	/^void CNode::copyStats(CNodeStats &stats)$/;"	f	class:CNode
corruptionPossible	consensus/validation.h	/^    bool corruptionPossible;$/;"	m	class:CValidationState
count	limitedmap.h	/^    size_type count(const key_type& k) const { return map.count(k); }$/;"	f	class:limitedmap
count	mruset.h	/^    size_type count(const key_type& k) const { return set.count(k); }$/;"	f	class:mruset
count	secp256k1/src/tests.c	/^static int count = 64;$/;"	v	file:
count	univalue/univalue.h	/^    size_t count() const { return values.size(); }$/;"	f	class:UniValue
count_	leveldb/db/db_test.cc	/^  int count_;$/;"	m	class:leveldb::__anon18::AtomicCounter	file:
count_random_reads_	leveldb/db/db_test.cc	/^  bool count_random_reads_;$/;"	m	class:leveldb::SpecialEnv	file:
counter	leveldb/db/db_test.cc	/^  port::AtomicPointer counter[kNumThreads];$/;"	m	struct:leveldb::__anon19::MTState	file:
counter_	leveldb/table/block_builder.h	/^  int                   counter_;     \/\/ Number of entries emitted since restart$/;"	m	class:leveldb::BlockBuilder
crc32c	leveldb/util/crc32c.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
crc32c	leveldb/util/crc32c.h	/^namespace crc32c {$/;"	n	namespace:leveldb
crc32c	leveldb/util/crc32c_test.cc	/^namespace crc32c {$/;"	n	namespace:leveldb	file:
createArgs	test/test_bitcoin.cpp	/^Array createArgs(int nRequired, const char* address1, const char* address2)$/;"	f
create_	leveldb/db/c.cc	/^  char* (*create_)($/;"	m	struct:leveldb_filterpolicy_t	file:
create_if_missing	leveldb/include/leveldb/options.h	/^  bool create_if_missing;$/;"	m	struct:leveldb::Options
createmultisig	rpcmisc.cpp	/^Value createmultisig(const Array& params, bool fHelp)$/;"	f
createrawtransaction	rpcrawtransaction.cpp	/^Value createrawtransaction(const Array& params, bool fHelp)$/;"	f
creditTx	test/script_tests.cpp	/^    CTransaction creditTx;$/;"	m	class:__anon94::TestBuilder	file:
crypto_libbitcoin_crypto_a_AR	Makefile	/^crypto_libbitcoin_crypto_a_AR = $(AR) $(ARFLAGS)$/;"	m
crypto_libbitcoin_crypto_a_CPPFLAGS	Makefile	/^crypto_libbitcoin_crypto_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)$/;"	m
crypto_libbitcoin_crypto_a_LIBADD	Makefile	/^crypto_libbitcoin_crypto_a_LIBADD =$/;"	m
crypto_libbitcoin_crypto_a_OBJECTS	Makefile	/^crypto_libbitcoin_crypto_a_OBJECTS =  \\$/;"	m
crypto_libbitcoin_crypto_a_SOURCES	Makefile	/^crypto_libbitcoin_crypto_a_SOURCES = \\$/;"	m
cs	addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
cs	txmempool.h	/^    mutable CCriticalSection cs;$/;"	m	class:CTxMemPool
csBestBlock	main.cpp	/^CWaitableCriticalSection csBestBlock;$/;"	v
csPathCached	util.cpp	/^static CCriticalSection csPathCached;$/;"	v	file:
cs_	leveldb/port/port_win.h	/^  void * cs_;$/;"	m	class:leveldb::port::Mutex
cs_KeyStore	keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_LastBlockFile	main.cpp	/^    CCriticalSection cs_LastBlockFile;$/;"	m	namespace:__anon46	file:
cs_db	wallet/db.h	/^    mutable CCriticalSection cs_db;$/;"	m	class:CDBEnv
cs_filter	net.h	/^    CCriticalSection cs_filter;$/;"	m	class:CNode
cs_inventory	net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_mapAlerts	alert.cpp	/^CCriticalSection cs_mapAlerts;$/;"	v
cs_mapLocalHost	net.cpp	/^CCriticalSection cs_mapLocalHost;$/;"	v
cs_mapRelay	net.cpp	/^CCriticalSection cs_mapRelay;$/;"	v
cs_nBlockSequenceId	main.cpp	/^    CCriticalSection cs_nBlockSequenceId;$/;"	m	namespace:__anon46	file:
cs_nLastNodeId	net.cpp	/^CCriticalSection cs_nLastNodeId;$/;"	v
cs_nTimeOffset	timedata.cpp	/^static CCriticalSection cs_nTimeOffset;$/;"	v	file:
cs_nWalletUnlockTime	wallet/rpcwallet.cpp	/^static CCriticalSection cs_nWalletUnlockTime;$/;"	v	file:
cs_proxyInfos	netbase.cpp	/^static CCriticalSection cs_proxyInfos;$/;"	v	file:
cs_rpcWarmup	rpcserver.cpp	/^static CCriticalSection cs_rpcWarmup;$/;"	v	file:
cs_setBanned	net.cpp	/^CCriticalSection CNode::cs_setBanned;$/;"	m	class:CNode	file:
cs_setBanned	net.h	/^    static CCriticalSection cs_setBanned;$/;"	m	class:CNode
cs_setservAddNodeAddresses	net.cpp	/^CCriticalSection cs_setservAddNodeAddresses;$/;"	v
cs_sigcache	script/sigcache.cpp	/^    boost::shared_mutex cs_sigcache;$/;"	m	class:__anon86::CSignatureCache	file:
cs_totalBytesRecv	net.cpp	/^CCriticalSection CNode::cs_totalBytesRecv;$/;"	m	class:CNode	file:
cs_totalBytesRecv	net.h	/^    static CCriticalSection cs_totalBytesRecv;$/;"	m	class:CNode
cs_totalBytesSent	net.cpp	/^CCriticalSection CNode::cs_totalBytesSent;$/;"	m	class:CNode	file:
cs_totalBytesSent	net.h	/^    static CCriticalSection cs_totalBytesSent;$/;"	m	class:CNode
cs_vAddedNodes	net.cpp	/^CCriticalSection cs_vAddedNodes;$/;"	v
cs_vNodes	net.cpp	/^CCriticalSection cs_vNodes;$/;"	v
cs_vOneShots	net.cpp	/^CCriticalSection cs_vOneShots;$/;"	v
cs_vRecvMsg	net.h	/^    CCriticalSection cs_vRecvMsg;$/;"	m	class:CNode
cs_vSend	net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_vWhitelistedRange	net.cpp	/^CCriticalSection CNode::cs_vWhitelistedRange;$/;"	m	class:CNode	file:
cs_vWhitelistedRange	net.h	/^    static CCriticalSection cs_vWhitelistedRange;$/;"	m	class:CNode
cs_wallet	wallet/wallet.h	/^    mutable CCriticalSection cs_wallet;$/;"	m	class:CWallet
ctx	hash.h	/^    CHash256 ctx;$/;"	m	class:CHashWriter
ctx	secp256k1/src/bench_recover.c	/^    secp256k1_context_t *ctx;$/;"	m	struct:__anon83	file:
ctx	secp256k1/src/bench_sign.c	/^    secp256k1_context_t* ctx;$/;"	m	struct:__anon67	file:
ctx	secp256k1/src/bench_verify.c	/^    secp256k1_context_t *ctx;$/;"	m	struct:__anon66	file:
ctx	secp256k1/src/tests.c	/^static secp256k1_context_t *ctx = NULL;$/;"	v	file:
curBlockConf	policy/fees.h	/^    std::vector<std::vector<int> > curBlockConf; \/\/ curBlockConf[Y][X]$/;"	m	class:TxConfirmStats
curBlockTxCt	policy/fees.h	/^    std::vector<int> curBlockTxCt;$/;"	m	class:TxConfirmStats
curBlockVal	policy/fees.h	/^    std::vector<double> curBlockVal;$/;"	m	class:TxConfirmStats
current	leveldb/db/version_set.h	/^  Version* current() const { return current_; }$/;"	f	class:leveldb::VersionSet
current_	leveldb/db/skiplist_test.cc	/^  State current_;$/;"	m	class:leveldb::ConcurrentTest	file:
current_	leveldb/db/version_set.h	/^  Version* current_;        \/\/ == dummy_versions_.prev_$/;"	m	class:leveldb::VersionSet
current_	leveldb/table/block.cc	/^  uint32_t current_;$/;"	m	class:leveldb::Block::Iter	file:
current_	leveldb/table/merger.cc	/^  IteratorWrapper* current_;$/;"	m	class:leveldb::__anon28::MergingIterator	file:
current_	leveldb/util/cache_test.cc	/^  static CacheTest* current_;$/;"	m	class:leveldb::CacheTest	file:
current_	leveldb/util/cache_test.cc	/^CacheTest* CacheTest::current_;$/;"	m	class:leveldb::CacheTest	file:
current_output	leveldb/db/db_impl.cc	/^  Output* current_output() { return &outputs[outputs.size()-1]; }$/;"	f	struct:leveldb::DBImpl::CompactionState
current_p_	json/json_spirit_reader_template.h	/^        Value_type* current_p_;         \/\/ the child object or array that is currently being constructed$/;"	m	class:json_spirit::Semantic_actions
cv	leveldb/db/db_bench.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::__anon15::SharedState	file:
cv	leveldb/db/db_impl.cc	/^  port::CondVar cv;$/;"	m	struct:leveldb::DBImpl::Writer	file:
cvBlockChange	main.cpp	/^CConditionVariable cvBlockChange;$/;"	v
cv_	leveldb/port/port_posix.h	/^  pthread_cond_t cv_;$/;"	m	class:leveldb::port::CondVar
d	secp256k1/src/scalar_4x64.h	/^    uint64_t d[4];$/;"	m	struct:__anon77
d	secp256k1/src/scalar_8x32.h	/^    uint32_t d[8];$/;"	m	struct:__anon73
dPingTime	net.h	/^    double dPingTime;$/;"	m	class:CNodeStats
dPingWait	net.h	/^    double dPingWait;$/;"	m	class:CNodeStats
dPriority	miner.cpp	/^    double dPriority;$/;"	m	class:COrphan	file:
dPriority	txmempool.h	/^    double dPriority; \/\/! Priority when entering the mempool$/;"	m	class:CTxMemPoolEntry
data	leveldb/include/leveldb/slice.h	/^  const char* data() const { return data_; }$/;"	f	class:leveldb::Slice
data	leveldb/table/format.h	/^  Slice data;           \/\/ Actual contents of data$/;"	m	struct:leveldb::BlockContents
data	leveldb/table/table_test.cc	/^  virtual const KVMap& data() { return data_; }$/;"	f	class:leveldb::Constructor
data	secp256k1/src/bench_internal.c	/^    unsigned char data[32];$/;"	m	struct:__anon79	file:
data	secp256k1/src/num_gmp.h	/^    mp_limb_t data[2*NUM_LIMBS];$/;"	m	struct:__anon74
data	uint256.h	/^    uint8_t data[WIDTH];$/;"	m	class:base_blob
dataTypeString	policy/fees.h	/^    std::string dataTypeString;$/;"	m	class:TxConfirmStats
data_	leveldb/db/db_bench.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon15::RandomGenerator	file:
data_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon35::RandomGenerator	file:
data_	leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string data_;$/;"	m	class:leveldb::__anon36::RandomGenerator	file:
data_	leveldb/include/leveldb/slice.h	/^  const char* data_;$/;"	m	class:leveldb::Slice
data_	leveldb/table/block.cc	/^  const char* const data_;      \/\/ underlying block contents$/;"	m	class:leveldb::Block::Iter	file:
data_	leveldb/table/block.h	/^  const char* data_;$/;"	m	class:leveldb::Block
data_	leveldb/table/filter_block.h	/^  const char* data_;    \/\/ Pointer to filter data (at block-start)$/;"	m	class:leveldb::FilterBlockReader
data_	leveldb/table/table_test.cc	/^  KVMap data_;$/;"	m	class:leveldb::Constructor	file:
data_	leveldb/table/table_test.cc	/^  std::string data_;$/;"	m	class:leveldb::BlockConstructor	file:
data_block	leveldb/table/table_builder.cc	/^  BlockBuilder data_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
data_block_handle_	leveldb/table/two_level_iterator.cc	/^  std::string data_block_handle_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
data_iter_	leveldb/table/two_level_iterator.cc	/^  IteratorWrapper data_iter_; \/\/ May be NULL$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
data_sync_error_	leveldb/db/db_test.cc	/^  port::AtomicPointer data_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	secp256k1/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	secp256k1/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
db	leveldb/table/table_test.cc	/^  DB* db() const { return constructor_->db(); }$/;"	f	class:leveldb::Harness
db	leveldb/table/table_test.cc	/^  virtual DB* db() const { return NULL; }  \/\/ Overridden in DBConstructor$/;"	f	class:leveldb::Constructor
db	leveldb/table/table_test.cc	/^  virtual DB* db() const { return db_; }$/;"	f	class:leveldb::DBConstructor
db	txdb.h	/^    CLevelDBWrapper db;$/;"	m	class:CCoinsViewDB
db_	leveldb/db/autocompact_test.cc	/^  DB* db_;$/;"	m	class:leveldb::AutoCompactTest	file:
db_	leveldb/db/corruption_test.cc	/^  DB* db_;$/;"	m	class:leveldb::CorruptionTest	file:
db_	leveldb/db/db_bench.cc	/^  DB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	leveldb/db/db_iter.cc	/^  DBImpl* db_;$/;"	m	class:leveldb::__anon22::DBIter	file:
db_	leveldb/db/db_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBTest	file:
db_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  sqlite3* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	leveldb/doc/bench/db_bench_tree_db.cc	/^  kyotocabinet::TreeDB* db_;$/;"	m	class:leveldb::Benchmark	file:
db_	leveldb/table/table_test.cc	/^  DB* db_;$/;"	m	class:leveldb::DBConstructor	file:
db_lock_	leveldb/db/db_impl.h	/^  FileLock* db_lock_;$/;"	m	class:leveldb::DBImpl
db_num_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
db_num_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int db_num_;$/;"	m	class:leveldb::Benchmark	file:
dbenv	wallet/db.h	/^    DbEnv *dbenv;$/;"	m	class:CDBEnv
dbfull	leveldb/db/db_test.cc	/^  DBImpl* dbfull() {$/;"	f	class:leveldb::DBTest
dbname	leveldb/db/c_test.c	/^static char dbname[200];$/;"	v	file:
dbname_	leveldb/db/autocompact_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::AutoCompactTest	file:
dbname_	leveldb/db/corruption_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::CorruptionTest	file:
dbname_	leveldb/db/db_impl.h	/^  const std::string dbname_;$/;"	m	class:leveldb::DBImpl
dbname_	leveldb/db/db_test.cc	/^  std::string dbname_;$/;"	m	class:leveldb::DBTest	file:
dbname_	leveldb/db/repair.cc	/^  std::string const dbname_;$/;"	m	class:leveldb::__anon17::Repairer::std	file:
dbname_	leveldb/db/table_cache.h	/^  const std::string dbname_;$/;"	m	class:leveldb::TableCache
dbname_	leveldb/db/version_set.h	/^  const std::string dbname_;$/;"	m	class:leveldb::VersionSet
dd_mutex	sync.cpp	/^static boost::mutex dd_mutex;$/;"	v	file:
deadlineTimers	rpcserver.cpp	/^static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;$/;"	v	file:
deallocate	support/allocators/secure.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:secure_allocator
deallocate	support/allocators/zeroafterfree.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:zero_after_free_allocator
debugPrintInitFlag	util.cpp	/^static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;$/;"	v	file:
decay	policy/fees.h	/^    double decay;$/;"	m	class:TxConfirmStats
decodelicenseinfo	wallet/rpcwallet.cpp	/^Value decodelicenseinfo(const Array& params, bool fHelp)$/;"	f
decoderawtransaction	rpcrawtransaction.cpp	/^Value decoderawtransaction(const Array& params, bool fHelp)$/;"	f
decodescript	rpcrawtransaction.cpp	/^Value decodescript(const Array& params, bool fHelp)$/;"	f
default_env	leveldb/util/env_posix.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
default_env	leveldb/util/env_win.cc	/^static Env* default_env;$/;"	m	namespace:leveldb	file:
definition	json/json_spirit_reader_template.h	/^            definition( const Json_grammer& self )$/;"	f	class:json_spirit::Json_grammer::definition
definition	json/json_spirit_reader_template.h	/^        class definition$/;"	c	class:json_spirit::Json_grammer
delay_data_sync_	leveldb/db/db_test.cc	/^  port::AtomicPointer delay_data_sync_;$/;"	m	class:leveldb::SpecialEnv	file:
deleted_files	leveldb/db/version_set.cc	/^    std::set<uint64_t> deleted_files;$/;"	m	struct:leveldb::VersionSet::Builder::LevelState	file:
deleted_files_	leveldb/db/version_edit.h	/^  DeletedFileSet deleted_files_;$/;"	m	class:leveldb::VersionEdit
deleted_keys_	leveldb/util/cache_test.cc	/^  std::vector<int> deleted_keys_;$/;"	m	class:leveldb::CacheTest	file:
deleted_values_	leveldb/util/cache_test.cc	/^  std::vector<int> deleted_values_;$/;"	m	class:leveldb::CacheTest	file:
deleter	leveldb/util/cache.cc	/^  void (*deleter)(const Slice&, void* value);$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	secp256k1/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
description	policy/licenseinfo.h	/^    string description;$/;"	m	class:CLicenseInfo
descriptor_file_	leveldb/db/version_set.h	/^  WritableFile* descriptor_file_;$/;"	m	class:leveldb::VersionSet
descriptor_log_	leveldb/db/version_set.h	/^  log::Writer* descriptor_log_;$/;"	m	class:leveldb::VersionSet
destChange	coincontrol.h	/^    CTxDestination destChange;$/;"	m	class:CCoinControl
dest_	leveldb/db/log_test.cc	/^  StringDest dest_;$/;"	m	class:leveldb::log::LogTest	file:
dest_	leveldb/db/log_writer.h	/^  WritableFile* dest_;$/;"	m	class:leveldb::log::Writer
destdata	wallet/wallet.h	/^    StringMap destdata;$/;"	m	class:CAddressBookData
destination	wallet/wallet.h	/^    CTxDestination destination;$/;"	m	struct:COutputEntry
destructor_	leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
destructor_	leveldb/db/c.cc	/^  void (*destructor_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
detail	tinyformat.h	/^namespace detail {$/;"	n	namespace:tinyformat
difference_type	streams.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
difference_type	support/allocators/secure.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:secure_allocator
difference_type	support/allocators/zeroafterfree.h	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:zero_after_free_allocator
direction_	leveldb/db/db_iter.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon22::DBIter	file:
direction_	leveldb/table/merger.cc	/^  Direction direction_;$/;"	m	class:leveldb::__anon28::MergingIterator	file:
disconnectnode	rpcnet.cpp	/^Value disconnectnode(const Array& params, bool fHelp)$/;"	f
disjoint_sorted_files_	leveldb/db/version_set_test.cc	/^  bool disjoint_sorted_files_;$/;"	m	class:leveldb::FindFileTest	file:
distcleancheck_listfiles	secp256k1/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	secp256k1/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	secp256k1/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
div.note p 	leveldb/doc/doc.css	/^div.note p {$/;"	s
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	secp256k1/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
done	leveldb/db/db_impl.cc	/^  bool done;$/;"	m	struct:leveldb::DBImpl::Writer	file:
done	leveldb/db/db_impl.h	/^    bool done;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
done_	leveldb/db/db_bench.cc	/^  int done_;$/;"	m	class:leveldb::__anon15::Stats	file:
done_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
done_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int done_;$/;"	m	class:leveldb::Benchmark	file:
dropped_bytes_	leveldb/db/log_test.cc	/^    size_t dropped_bytes_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
dst_	leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon23::CorruptionReporter	file:
dst_	leveldb/db/dumpfile.cc	/^  WritableFile* dst_;$/;"	m	class:leveldb::__anon23::WriteBatchItemPrinter	file:
dt 	leveldb/doc/doc.css	/^dt {$/;"	s
dummy	tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	m	struct:tinyformat::detail::is_convertible::fail
dummy	tinyformat.h	/^        struct succeed { char dummy; };$/;"	m	struct:tinyformat::detail::is_convertible::succeed
dummy_versions_	leveldb/db/version_set.h	/^  Version dummy_versions_;  \/\/ Head of circular doubly-linked list of versions.$/;"	m	class:leveldb::VersionSet
dumpKeyInfo	test/key_tests.cpp	/^void dumpKeyInfo(uint256 privkey)$/;"	f
dumpprivkey	wallet/rpcdump.cpp	/^Value dumpprivkey(const Array& params, bool fHelp)$/;"	f
dumpwallet	wallet/rpcdump.cpp	/^Value dumpwallet(const Array& params, bool fHelp)$/;"	f
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	secp256k1/Makefile	/^dvidir = ${docdir}$/;"	m
eccrypto	eccryptoverify.cpp	/^namespace eccrypto {$/;"	n	file:
eccrypto	eccryptoverify.h	/^namespace eccrypto {$/;"	n
ecmult_ctx	secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_context_t ecmult_ctx;$/;"	m	struct:secp256k1_context_struct	file:
ecmult_gen_ctx	secp256k1/src/secp256k1.c	/^    secp256k1_ecmult_gen_context_t ecmult_gen_ctx;$/;"	m	struct:secp256k1_context_struct	file:
edit	leveldb/db/version_set.h	/^  VersionEdit* edit() { return &edit_; }$/;"	f	class:leveldb::Compaction
edit_	leveldb/db/repair.cc	/^  VersionEdit edit_;$/;"	m	class:leveldb::__anon17::Repairer	file:
edit_	leveldb/db/version_set.h	/^  VersionEdit edit_;$/;"	m	class:leveldb::Compaction
elements_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
elems_	leveldb/util/cache.cc	/^  uint32_t elems_;$/;"	m	class:leveldb::__anon39::HandleTable	file:
empty	leveldb/db/snapshot.h	/^  bool empty() const { return list_.next_ == &list_; }$/;"	f	class:leveldb::SnapshotList
empty	leveldb/include/leveldb/slice.h	/^  bool empty() const { return size_ == 0; }$/;"	f	class:leveldb::Slice
empty	leveldb/table/block_builder.h	/^  bool empty() const {$/;"	f	class:leveldb::BlockBuilder
empty	limitedmap.h	/^    bool empty() const { return map.empty(); }$/;"	f	class:limitedmap
empty	mruset.h	/^    bool empty() const { return set.empty(); }$/;"	f	class:mruset
empty	streams.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
empty	univalue/univalue.h	/^    bool empty() const { return (values.size() == 0); }$/;"	f	class:UniValue
empty_wallet	wallet/test/wallet_tests.cpp	/^static void empty_wallet(void)$/;"	f	file:
enabled	secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static final boolean enabled;$/;"	f	class:NativeSecp256k1
encodelicenseinfo	wallet/rpcwallet.cpp	/^Value encodelicenseinfo(const Array& params, bool fHelp)$/;"	f
encryptwallet	wallet/rpcwallet.cpp	/^Value encryptwallet(const Array& params, bool fHelp)$/;"	f
end	key.h	/^    const unsigned char* end() const { return vch + size(); }$/;"	f	class:CKey
end	leveldb/db/db_impl.h	/^    const InternalKey* end;     \/\/ NULL means end of key range$/;"	m	struct:leveldb::DBImpl::ManualCompaction
end	limitedmap.h	/^    const_iterator end() const { return map.end(); }$/;"	f	class:limitedmap
end	mruset.h	/^    iterator end() const { return set.end(); }$/;"	f	class:mruset
end	pubkey.h	/^    const unsigned char* end() const { return vch + size(); }$/;"	f	class:CPubKey
end	serialize.h	/^    char* end() { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const char* end() const { return pend; }$/;"	f	class:CFlatData
end	streams.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	streams.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	uint256.h	/^    const unsigned char* end() const$/;"	f	class:base_blob
end	uint256.h	/^    unsigned char* end()$/;"	f	class:base_blob
end_	json/json_spirit_reader_template.h	/^        Mp_iter end_;$/;"	m	struct:json_spirit::Multi_pass_iters
end_	leveldb/db/dbformat.h	/^  const char* end_;$/;"	m	class:leveldb::LookupKey
end_array	json/json_spirit_reader_template.h	/^        void end_array( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
end_compound	json/json_spirit_reader_template.h	/^        void end_compound()$/;"	f	class:json_spirit::Semantic_actions
end_obj	json/json_spirit_reader_template.h	/^        void end_obj( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
end_of_buffer_offset_	leveldb/db/log_reader.h	/^  uint64_t end_of_buffer_offset_;$/;"	m	class:leveldb::log::Reader
end_ptr	serialize.h	/^inline T* end_ptr(std::vector<T,TAl>& v)$/;"	f
end_ptr	serialize.h	/^inline const T* end_ptr(const std::vector<T,TAl>& v)$/;"	f
entries_per_batch_	leveldb/db/db_bench.cc	/^  int entries_per_batch_;$/;"	m	class:leveldb::Benchmark	file:
env	leveldb/include/leveldb/options.h	/^  Env* env;$/;"	m	struct:leveldb::Options
env_	leveldb/db/corruption_test.cc	/^  test::ErrorEnv env_;$/;"	m	class:leveldb::CorruptionTest	file:
env_	leveldb/db/db_impl.h	/^  Env* const env_;$/;"	m	class:leveldb::DBImpl
env_	leveldb/db/db_test.cc	/^  SpecialEnv* env_;$/;"	m	class:leveldb::DBTest	file:
env_	leveldb/db/repair.cc	/^  Env* const env_;$/;"	m	class:leveldb::__anon17::Repairer	file:
env_	leveldb/db/table_cache.h	/^  Env* const env_;$/;"	m	class:leveldb::TableCache
env_	leveldb/db/version_set.h	/^  Env* const env_;$/;"	m	class:leveldb::VersionSet
env_	leveldb/helpers/memenv/memenv_test.cc	/^  Env* env_;$/;"	m	class:leveldb::MemEnvTest	file:
env_	leveldb/util/env_test.cc	/^  Env* env_;$/;"	m	class:leveldb::EnvPosixTest	file:
eof	streams.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
eof	streams.h	/^    bool eof() const {$/;"	f	class:CBufferedFile
eof_	leveldb/db/log_reader.h	/^  bool eof_;   \/\/ Last Read() indicated EOF by returning < kBlockSize$/;"	m	class:leveldb::log::Reader
equal_sets	wallet/test/wallet_tests.cpp	/^static bool equal_sets(CoinSet a, CoinSet b)$/;"	f	file:
erase	limitedmap.h	/^    void erase(const key_type& k)$/;"	f	class:limitedmap
erase	streams.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	streams.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
error	main.h	/^    ScriptError error;$/;"	m	class:CScriptCheck
error	utilerror.h	3;"	d
errorWithLocation	util.h	/^static inline bool errorWithLocation(const char* file, const char* line,$/;"	f
error_if_exists	leveldb/include/leveldb/options.h	/^  bool error_if_exists;$/;"	m	struct:leveldb::Options
escapes	univalue/gen.cpp	/^static const char *escapes[256];$/;"	v	file:
escapes	univalue/univalue_escapes.h	/^static const char *escapes[256] = {$/;"	v
estimateFee	policy/fees.cpp	/^CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)$/;"	f	class:CBlockPolicyEstimator
estimateFee	txmempool.cpp	/^CFeeRate CTxMemPool::estimateFee(int nBlocks) const$/;"	f	class:CTxMemPool
estimatePriority	policy/fees.cpp	/^double CBlockPolicyEstimator::estimatePriority(int confTarget)$/;"	f	class:CBlockPolicyEstimator
estimatePriority	txmempool.cpp	/^double CTxMemPool::estimatePriority(int nBlocks) const$/;"	f	class:CTxMemPool
estimatefee	rpcmining.cpp	/^Value estimatefee(const Array& params, bool fHelp)$/;"	f
estimatepriority	rpcmining.cpp	/^Value estimatepriority(const Array& params, bool fHelp)$/;"	f
events_	leveldb/util/env_test.cc	/^  std::string events_;$/;"	m	class:leveldb::EnvPosixTest	file:
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	secp256k1/Makefile	/^exec_prefix = ${prefix}$/;"	m
execute	rpcserver.cpp	/^json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const$/;"	f	class:CRPCTable
exeext	test/buildenv.py	/^exeext=""$/;"	v
exists	txmempool.h	/^    bool exists(uint256 hash) const$/;"	f	class:CTxMemPool
exists	univalue/univalue.h	/^    bool exists(const std::string& key) const { return (findKey(key) >= 0); }$/;"	f	class:UniValue
exp_addrType	test/base58_tests.cpp	/^    std::string exp_addrType;$/;"	m	class:TestAddrTypeVisitor	file:
exp_payload	test/base58_tests.cpp	/^    std::vector<unsigned char> exp_payload;$/;"	m	class:TestPayloadVisitor	file:
expected_map_values	test/test_bitcoin.h	/^    mapValue_t expected_map_values;$/;"	m	struct:WalletSetupFixture
expected_map_values_	test/test_bitcoin.h	/^    mapValue_t expected_map_values_;$/;"	m	class:CWallet_UnitTest
externalPubKey	wallet/hdkeystore.h	/^    CExtPubKey externalPubKey;$/;"	m	class:CHDChain
extract	secp256k1/src/scalar_4x64_impl.h	238;"	d
extract	secp256k1/src/scalar_4x64_impl.h	871;"	d
extract	secp256k1/src/scalar_8x32_impl.h	308;"	d
extract	secp256k1/src/scalar_8x32_impl.h	618;"	d
extract_fast	secp256k1/src/scalar_4x64_impl.h	246;"	d
extract_fast	secp256k1/src/scalar_4x64_impl.h	872;"	d
extract_fast	secp256k1/src/scalar_8x32_impl.h	316;"	d
extract_fast	secp256k1/src/scalar_8x32_impl.h	619;"	d
extranonce	test/miner_tests.cpp	/^    unsigned char extranonce;$/;"	m	struct:__anon95	file:
f1	crypto/ripemd160.cpp	/^uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }$/;"	f	namespace:__anon5::ripemd160
f1	crypto/sha1.cpp	/^uint32_t inline f1(uint32_t b, uint32_t c, uint32_t d) { return d ^ (b & (c ^ d)); }$/;"	f	namespace:__anon7::sha1
f2	crypto/ripemd160.cpp	/^uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }$/;"	f	namespace:__anon5::ripemd160
f2	crypto/sha1.cpp	/^uint32_t inline f2(uint32_t b, uint32_t c, uint32_t d) { return b ^ c ^ d; }$/;"	f	namespace:__anon7::sha1
f3	crypto/ripemd160.cpp	/^uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }$/;"	f	namespace:__anon5::ripemd160
f3	crypto/sha1.cpp	/^uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (b | c)); }$/;"	f	namespace:__anon7::sha1
f4	crypto/ripemd160.cpp	/^uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }$/;"	f	namespace:__anon5::ripemd160
f5	crypto/ripemd160.cpp	/^uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }$/;"	f	namespace:__anon5::ripemd160
fAddressesInitialized	net.cpp	/^bool fAddressesInitialized = false;$/;"	v
fAlerts	main.cpp	/^bool fAlerts = DEFAULT_ALERTS;$/;"	v
fAllOk	checkqueue.h	/^    bool fAllOk;$/;"	m	class:CCheckQueue
fAnyUnordered	wallet/walletdb.cpp	/^    bool fAnyUnordered;$/;"	m	class:CWalletScanState	file:
fAnyoneCanPay	script/interpreter.cpp	/^    const bool fAnyoneCanPay;  \/\/ whether the hashtype has the SIGHASH_ANYONECANPAY flag set$/;"	m	class:__anon88::CBlockHeaderSignatureSerializer	file:
fAnyoneCanPay	script/interpreter.cpp	/^    const bool fAnyoneCanPay;  \/\/! whether the hashtype has the SIGHASH_ANYONECANPAY flag set$/;"	m	class:__anon88::CTransactionSignatureSerializer	file:
fAvailableCreditCached	wallet/wallet.h	/^    mutable bool fAvailableCreditCached;$/;"	m	class:CWalletTx
fAvailableWatchCreditCached	wallet/wallet.h	/^    mutable bool fAvailableWatchCreditCached;$/;"	m	class:CWalletTx
fBad	merkleblock.h	/^    bool fBad;$/;"	m	class:CPartialMerkleTree
fBroadcastTransactions	wallet/wallet.h	/^    bool fBroadcastTransactions;$/;"	m	class:CWallet
fChangeCached	wallet/wallet.h	/^    mutable bool fChangeCached;$/;"	m	class:CWalletTx
fCheckBlockIndex	main.cpp	/^bool fCheckBlockIndex = false;$/;"	v
fCheckForPruning	main.cpp	/^    bool fCheckForPruning = false;$/;"	m	namespace:__anon46	file:
fCheckpointsEnabled	main.cpp	/^bool fCheckpointsEnabled = true;$/;"	v
fClient	net.h	/^    bool fClient;$/;"	m	class:CNode
fCoinBase	coins.h	/^    bool fCoinBase;$/;"	m	class:CCoins
fCoinBase	undo.h	/^    bool fCoinBase;       \/\/ if the outpoint was the last unspent: whether it belonged to a coinbase$/;"	m	class:CTxInUndo
fCompressed	key.h	/^    bool fCompressed;$/;"	m	class:CKey
fCreditCached	wallet/wallet.h	/^    mutable bool fCreditCached;$/;"	m	class:CWalletTx
fCurrentlyConnected	main.cpp	/^    bool fCurrentlyConnected;$/;"	m	struct:__anon47::CNodeState	file:
fDaemon	bitcoind.cpp	/^static bool fDaemon;$/;"	v	file:
fDaemon	util.cpp	/^bool fDaemon = false;$/;"	v
fDbEnvInit	wallet/db.h	/^    bool fDbEnvInit;$/;"	m	class:CDBEnv
fDebitCached	wallet/wallet.h	/^    mutable bool fDebitCached;$/;"	m	class:CWalletTx
fDebug	util.cpp	/^bool fDebug = false;$/;"	v
fDecryptionThoroughlyChecked	wallet/crypter.h	/^    bool fDecryptionThoroughlyChecked;$/;"	m	class:CCryptoKeyStore
fDefaultConsistencyChecks	chainparams.h	/^    bool fDefaultConsistencyChecks;$/;"	m	class:CChainParams
fDisconnect	net.h	/^    bool fDisconnect;$/;"	m	class:CNode
fDivisibility	policy/licenseinfo.h	/^    bool fDivisibility;$/;"	m	class:CLicenseInfo
fDone	checkqueue.h	/^    bool fDone;$/;"	m	class:CCheckQueueControl
fEnabled	checkpoints.cpp	/^    bool fEnabled = false;$/;"	m	namespace:Checkpoints	file:
fFeeEstimatesInitialized	init.cpp	/^bool fFeeEstimatesInitialized = false;$/;"	v
fFileBacked	wallet/wallet.h	/^    bool fFileBacked;$/;"	m	class:CWallet
fFlushOnClose	wallet/db.h	/^    bool fFlushOnClose;$/;"	m	class:CDB
fFromMe	wallet/wallet.h	/^    char fFromMe;$/;"	m	class:CWalletTx
fGetAddr	net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fHashNone	script/interpreter.cpp	/^    const bool fHashNone;      \/\/ whether the hashtype is SIGHASH_NONE$/;"	m	class:__anon88::CBlockHeaderSignatureSerializer	file:
fHashNone	script/interpreter.cpp	/^    const bool fHashNone;      \/\/! whether the hashtype is SIGHASH_NONE$/;"	m	class:__anon88::CTransactionSignatureSerializer	file:
fHashSingle	script/interpreter.cpp	/^    const bool fHashSingle;    \/\/ whether the hashtype is SIGHASH_SINGLE$/;"	m	class:__anon88::CBlockHeaderSignatureSerializer	file:
fHashSingle	script/interpreter.cpp	/^    const bool fHashSingle;    \/\/! whether the hashtype is SIGHASH_SINGLE$/;"	m	class:__anon88::CTransactionSignatureSerializer	file:
fHaveGrant	sync.h	/^    bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fHavePruned	main.cpp	/^bool fHavePruned = false;$/;"	v
fImmatureCreditCached	wallet/wallet.h	/^    mutable bool fImmatureCreditCached;$/;"	m	class:CWalletTx
fImmatureWatchCreditCached	wallet/wallet.h	/^    mutable bool fImmatureWatchCreditCached;$/;"	m	class:CWalletTx
fImporting	main.cpp	/^bool fImporting = false;$/;"	v
fInTried	addrman.h	/^    bool fInTried;$/;"	m	class:CAddrInfo
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNode
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fIsBareMultisigStd	main.cpp	/^bool fIsBareMultisigStd = true;$/;"	v
fIsEncrypted	wallet/walletdb.cpp	/^    bool fIsEncrypted;$/;"	m	class:CWalletScanState	file:
fIsWatchonly	wallet/rpcwallet.cpp	/^    bool fIsWatchonly;$/;"	m	struct:tallyitem	file:
fJustStart	main.cpp	/^static bool fJustStart = false;$/;"	v	file:
fKeySet	wallet/crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fLargeWorkForkFound	main.cpp	/^bool fLargeWorkForkFound = false;$/;"	v
fLargeWorkInvalidChainFound	main.cpp	/^bool fLargeWorkInvalidChainFound = false;$/;"	v
fListen	net.cpp	/^bool fListen = true;$/;"	v
fLogIPs	util.cpp	/^bool fLogIPs = false;$/;"	v
fLogTimestamps	util.cpp	/^bool fLogTimestamps = false;$/;"	v
fMemberControl	policy/licenseinfo.h	/^    bool fMemberControl;$/;"	m	class:CLicenseInfo
fMempoolSync	main.cpp	/^bool fMempoolSync = false;$/;"	v
fMerkleVerified	wallet/wallet.h	/^    mutable bool fMerkleVerified;$/;"	m	class:CMerkleTx
fMineBlocksOnDemand	chainparams.h	/^    bool fMineBlocksOnDemand;$/;"	m	class:CChainParams
fMiningRequiresPeers	chainparams.h	/^    bool fMiningRequiresPeers;$/;"	m	class:CChainParams
fMockDb	wallet/db.h	/^    bool fMockDb;$/;"	m	class:CDBEnv
fNameLookup	netbase.cpp	/^bool fNameLookup = false;$/;"	v
fNeedHandshake	rpcprotocol.h	/^    bool fNeedHandshake;$/;"	m	class:SSLIOStreamDevice
fNetworkNode	net.h	/^    bool fNetworkNode;$/;"	m	class:CNode
fOneShot	net.h	/^    bool fOneShot;$/;"	m	class:CNode
fPayAtLeastCustomFee	wallet/wallet.cpp	/^bool fPayAtLeastCustomFee = true;$/;"	v
fPingQueued	net.h	/^    bool fPingQueued;$/;"	m	class:CNode
fPowAllowMinDifficultyBlocks	consensus/params.h	/^    bool fPowAllowMinDifficultyBlocks;$/;"	m	struct:Consensus::Params
fPreferredDownload	main.cpp	/^    bool fPreferredDownload;$/;"	m	struct:__anon47::CNodeState	file:
fPrintToConsole	util.cpp	/^bool fPrintToConsole = false;$/;"	v
fPrintToDebugLog	util.cpp	/^bool fPrintToDebugLog = true;$/;"	v
fPruneMode	main.cpp	/^bool fPruneMode = false;$/;"	v
fQuit	checkqueue.h	/^    bool fQuit;$/;"	m	class:CCheckQueue
fRPCInWarmup	rpcserver.cpp	/^static bool fRPCInWarmup = true;$/;"	v	file:
fRPCRunning	rpcserver.cpp	/^static bool fRPCRunning = false;$/;"	v	file:
fReadOnly	wallet/db.h	/^    bool fReadOnly;$/;"	m	class:CDB
fReindex	main.cpp	/^bool fReindex = false;$/;"	v
fRelayTxes	net.h	/^    bool fRelayTxes;$/;"	m	class:CNode
fReopenDebugLog	util.cpp	/^volatile bool fReopenDebugLog = false;$/;"	v
fRequestShutdown	init.cpp	/^volatile bool fRequestShutdown = false;$/;"	v
fRequireRPCPassword	chainparams.h	/^    bool fRequireRPCPassword;$/;"	m	class:CChainParams
fRequireStandard	chainparams.h	/^    bool fRequireStandard;$/;"	m	class:CChainParams
fSanityCheck	txmempool.h	/^    bool fSanityCheck; \/\/! Normally false, true if -checkmempool or -regtest$/;"	m	class:CTxMemPool
fSendFreeTransactions	wallet/wallet.cpp	/^bool fSendFreeTransactions = false;$/;"	v
fServer	util.cpp	/^bool fServer = false;$/;"	v
fShouldBan	main.cpp	/^    bool fShouldBan;$/;"	m	struct:__anon47::CNodeState	file:
fSpendable	wallet/wallet.h	/^    bool fSpendable;$/;"	m	class:COutput
fSubtractFeeFromAmount	wallet/wallet.h	/^    bool fSubtractFeeFromAmount;$/;"	m	struct:CRecipient
fSuccessfullyConnected	net.h	/^    bool fSuccessfullyConnected;$/;"	m	class:CNode
fSyncMempoolStarted	main.cpp	/^    bool fSyncMempoolStarted;$/;"	m	struct:__anon47::CNodeState	file:
fSyncStarted	main.cpp	/^    bool fSyncStarted;$/;"	m	struct:__anon47::CNodeState	file:
fSystemdJournal	util.cpp	/^bool fSystemdJournal = false;$/;"	v
fTestnetToBeDeprecatedFieldRPC	chainparams.h	/^    bool fTestnetToBeDeprecatedFieldRPC;$/;"	m	class:CChainParams
fTimeReceivedIsTxTime	wallet/wallet.h	/^    unsigned int fTimeReceivedIsTxTime;$/;"	m	class:CWalletTx
fTransactionsPerDay	checkpoints.h	/^    double fTransactionsPerDay;$/;"	m	struct:Checkpoints::CCheckpointData
fTxIndex	main.cpp	/^bool fTxIndex = false;$/;"	v
fUseCrypto	wallet/crypter.h	/^    bool fUseCrypto;$/;"	m	class:CCryptoKeyStore
fUseSSL	rpcprotocol.h	/^    bool fUseSSL;$/;"	m	class:SSLIOStreamDevice
fValid	key.h	/^    bool fValid;$/;"	m	class:CKey
fValidatedHeaders	main.cpp	/^        bool fValidatedHeaders;  \/\/! Whether this block has validated headers at the time of request.$/;"	m	struct:__anon46::QueuedBlock	file:
fWatchCreditCached	wallet/wallet.h	/^    mutable bool fWatchCreditCached;$/;"	m	class:CWalletTx
fWatchDebitCached	wallet/wallet.h	/^    mutable bool fWatchDebitCached;$/;"	m	class:CWalletTx
fWhitelisted	net.h	/^    bool fWhitelisted; \/\/ This peer can bypass DoS banning.$/;"	m	class:CNode
fWhitelisted	net.h	/^    bool fWhitelisted;$/;"	m	class:CNodeStats
fail	tinyformat.h	/^        struct fail { char dummy[2]; };$/;"	s	struct:tinyformat::detail::is_convertible
fake_filter_result	leveldb/db/c_test.c	/^static unsigned char fake_filter_result = 1;$/;"	v	file:
falseFunc	test/alert_tests.cpp	/^static bool falseFunc() { return false; }$/;"	f	file:
fclose	streams.h	/^    void fclose()$/;"	f	class:CAutoFile
fclose	streams.h	/^    void fclose()$/;"	f	class:CBufferedFile
fd_	leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon42::PosixFileLock	file:
fd_	leveldb/util/env_posix.cc	/^  int fd_;$/;"	m	class:leveldb::__anon42::PosixRandomAccessFile	file:
fdatasync	leveldb/port/port_posix.h	65;"	d
fdatasync	leveldb/port/port_posix.h	69;"	d
fdatasync	leveldb/port/port_posix.h	75;"	d
fe_x	secp256k1/src/bench_internal.c	/^    secp256k1_fe_t fe_x, fe_y;$/;"	m	struct:__anon79	file:
fe_y	secp256k1/src/bench_internal.c	/^    secp256k1_fe_t fe_x, fe_y;$/;"	m	struct:__anon79	file:
feeCollectorAddr	policy/licenseinfo.h	/^    string feeCollectorAddr;$/;"	m	class:CLicenseInfo
feeLikely	policy/fees.h	/^    CFeeRate feeLikely, feeUnlikely;$/;"	m	class:CBlockPolicyEstimator
feeRate	miner.cpp	/^    CFeeRate feeRate;$/;"	m	class:COrphan	file:
feeStats	policy/fees.h	/^    TxConfirmStats feeStats, priStats;$/;"	m	class:CBlockPolicyEstimator
feeType	policy/licenseinfo.h	/^    int feeType;$/;"	m	class:CLicenseInfo
feeUnlikely	policy/fees.h	/^    CFeeRate feeLikely, feeUnlikely;$/;"	m	class:CBlockPolicyEstimator
fflush_unlocked	leveldb/port/port_posix.h	59;"	d
file	leveldb/db/table_cache.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::TableAndFile	file:
file	leveldb/table/table.cc	/^  RandomAccessFile* file;$/;"	m	struct:leveldb::Table::Rep	file:
file	leveldb/table/table_builder.cc	/^  WritableFile* file;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
file	streams.h	/^    FILE* file;	$/;"	m	class:CAutoFile
file_	leveldb/db/log_reader.h	/^  SequentialFile* const file_;$/;"	m	class:leveldb::log::Reader
file_	leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon26::RandomAccessFileImpl	file:
file_	leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon26::SequentialFileImpl	file:
file_	leveldb/helpers/memenv/memenv.cc	/^  FileState* file_;$/;"	m	class:leveldb::__anon26::WritableFileImpl	file:
file_	leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon42::PosixSequentialFile	file:
file_	leveldb/util/env_posix.cc	/^  FILE* file_;$/;"	m	class:leveldb::__anon42::PosixWritableFile	file:
file_	leveldb/util/posix_logger.h	/^  FILE* file_;$/;"	m	class:leveldb::PosixLogger
file_map_	leveldb/helpers/memenv/memenv.cc	/^  FileSystem file_map_;  \/\/ Protected by mutex_.$/;"	m	class:leveldb::__anon26::InMemoryEnv	file:
file_size	leveldb/db/db_impl.cc	/^    uint64_t file_size;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
file_size	leveldb/db/version_edit.h	/^  uint64_t file_size;         \/\/ File size in bytes$/;"	m	struct:leveldb::FileMetaData
file_to_compact_	leveldb/db/version_set.h	/^  FileMetaData* file_to_compact_;$/;"	m	class:leveldb::Version
file_to_compact_level_	leveldb/db/version_set.h	/^  int file_to_compact_level_;$/;"	m	class:leveldb::Version
filename_	cache.h	/^    std::string filename_;$/;"	m	class:CacheInterface
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon42::PosixMmapReadableFile	file:
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon42::PosixRandomAccessFile	file:
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon42::PosixSequentialFile	file:
filename_	leveldb/util/env_posix.cc	/^  std::string filename_;$/;"	m	class:leveldb::__anon42::PosixWritableFile	file:
fileout	util.cpp	/^static FILE* fileout = NULL;$/;"	v	file:
files_	leveldb/db/version_set.h	/^  std::vector<FileMetaData*> files_[config::kNumLevels];$/;"	m	class:leveldb::Version
files_	leveldb/db/version_set_test.cc	/^  std::vector<FileMetaData*> files_;$/;"	m	class:leveldb::FindFileTest	file:
fill_cache	leveldb/include/leveldb/options.h	/^  bool fill_cache;$/;"	m	struct:leveldb::ReadOptions
filter	leveldb/table/table.cc	/^  FilterBlockReader* filter;$/;"	m	struct:leveldb::Table::Rep	file:
filter_	leveldb/util/bloom_test.cc	/^  std::string filter_;$/;"	m	class:leveldb::BloomTest	file:
filter_block	leveldb/table/table_builder.cc	/^  FilterBlockBuilder* filter_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
filter_data	leveldb/table/table.cc	/^  const char* filter_data;$/;"	m	struct:leveldb::Table::Rep	file:
filter_offsets_	leveldb/table/filter_block.h	/^  std::vector<uint32_t> filter_offsets_;$/;"	m	class:leveldb::FilterBlockBuilder
filter_policy	leveldb/include/leveldb/options.h	/^  const FilterPolicy* filter_policy;$/;"	m	struct:leveldb::Options
filter_policy_	leveldb/db/db_bench.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::Benchmark	file:
filter_policy_	leveldb/db/db_test.cc	/^  const FilterPolicy* filter_policy_;$/;"	m	class:leveldb::DBTest	file:
find	limitedmap.h	/^    const_iterator find(const key_type& k) const { return map.find(k); }$/;"	f	class:limitedmap
find	mruset.h	/^    iterator find(const key_type& k) const { return set.find(k); }$/;"	f	class:mruset
findKey	univalue/univalue.cpp	/^int UniValue::findKey(const std::string& key) const$/;"	f	class:UniValue
find_value	json/json_spirit_utils.h	/^    const typename Object_type::value_type::Value_type& find_value( const Object_type& obj, const String_type& name )$/;"	f	namespace:json_spirit
finish	tinyformat.h	/^        void finish()$/;"	f	class:tinyformat::detail::FormatIterator
finish_	leveldb/db/db_bench.cc	/^  double finish_;$/;"	m	class:leveldb::__anon15::Stats	file:
finished_	leveldb/table/block_builder.h	/^  bool                  finished_;    \/\/ Has Finish() been called?$/;"	m	class:leveldb::BlockBuilder
first_unused	mruset.h	/^    size_type first_unused;$/;"	m	class:mruset
first_used	mruset.h	/^    size_type first_used;$/;"	m	class:mruset
flags	coins.h	/^    unsigned char flags;$/;"	m	struct:CCoinsCacheEntry
flags	test/script_tests.cpp	/^    int flags;$/;"	m	class:__anon94::TestBuilder	file:
flags	test/script_tests.cpp	/^static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;$/;"	v	file:
flist_	leveldb/db/version_set.cc	/^  const std::vector<FileMetaData*>* const flist_;$/;"	m	class:leveldb::Version::LevelFileNumIterator::std	file:
fname_	leveldb/util/testharness.h	/^  const char* fname_;$/;"	m	class:leveldb::test::Tester
force_error_	leveldb/db/log_test.cc	/^    bool force_error_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
format	tinyformat.h	/^inline void format(FormatIterator& fmtIter)$/;"	f	namespace:tinyformat::detail
format	tinyformat.h	/^std::string format(const char* fmt, const T1& v1, const Args&... args)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^std::string format(const std::string &fmt, const T1& v1, const Args&... args)$/;"	f	namespace:tinyformat
format	tinyformat.h	/^void format(FormatIterator& fmtIter, const T1& value1)$/;"	f	namespace:tinyformat::detail
format	tinyformat.h	/^void format(FormatIterator& fmtIter, const T1& value1, const Args&... args)$/;"	f	namespace:tinyformat::detail
format	tinyformat.h	/^void format(std::ostream& out, const char* fmt, const T1& v1, const Args&... args)$/;"	f	namespace:tinyformat
formatCStringTruncate	tinyformat.h	/^        static bool formatCStringTruncate(std::ostream& \/*out*\/, const T& \/*value*\/,$/;"	f	class:tinyformat::detail::FormatIterator
formatValue	tinyformat.h	/^inline void formatValue(std::ostream& out, const char* \/*fmtBegin*\/,$/;"	f	namespace:tinyformat
formatValueAsType	tinyformat.h	/^struct formatValueAsType$/;"	s	namespace:tinyformat::detail
formatValueAsType	tinyformat.h	/^struct formatValueAsType<T,fmtT,true>$/;"	s	namespace:tinyformat::detail
formatZeroIntegerWorkaround	tinyformat.h	/^struct formatZeroIntegerWorkaround$/;"	s	namespace:tinyformat::detail
formatZeroIntegerWorkaround	tinyformat.h	/^struct formatZeroIntegerWorkaround<T,true>$/;"	s	namespace:tinyformat::detail
found	rpcmining.cpp	/^    bool found;$/;"	m	class:submitblock_StateCatcher	file:
fp_	net.h	/^        FILE* fp_;$/;"	m	class:CNetRecorder::CFileReader
fp_	net.h	/^        FILE* fp_;$/;"	m	class:CNetRecorder::CFileWriter
fread_unlocked	leveldb/port/port_posix.h	57;"	d
fread_unlocked	leveldb/port/port_win.h	37;"	d
fromImport	wallet/walletdb.h	/^    bool fromImport;$/;"	m	class:CKeyMetadata
fromPeer	main.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
fromPeer	test/DoS_tests.cpp	/^    NodeId fromPeer;$/;"	m	struct:COrphanTx	file:
func	leveldb/util/testharness.cc	/^  void (*func)();$/;"	m	struct:leveldb::test::__anon41::Test	file:
func_append	secp256k1/build-aux/ltmain.sh	/^func_append ()$/;"	f
func_append	secp256k1/config.status	/^func_append ()\\$/;"	f
func_append	secp256k1/configure	/^func_append ()\\$/;"	f
func_append	secp256k1/libtool	/^func_append ()$/;"	f
func_append_quoted	secp256k1/build-aux/ltmain.sh	/^func_append_quoted ()$/;"	f
func_append_quoted	secp256k1/config.status	/^func_append_quoted ()\\$/;"	f
func_append_quoted	secp256k1/configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	secp256k1/libtool	/^func_append_quoted ()$/;"	f
func_arith	secp256k1/build-aux/ltmain.sh	/^func_arith ()$/;"	f
func_arith	secp256k1/config.status	/^func_arith ()\\$/;"	f
func_arith	secp256k1/configure	/^func_arith ()\\$/;"	f
func_arith	secp256k1/libtool	/^func_arith ()$/;"	f
func_basename	secp256k1/build-aux/ltmain.sh	/^func_basename ()$/;"	f
func_basename	secp256k1/config.status	/^func_basename ()\\$/;"	f
func_basename	secp256k1/configure	/^func_basename ()\\$/;"	f
func_basename	secp256k1/libtool	/^func_basename ()$/;"	f
func_check_version_match	secp256k1/build-aux/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	secp256k1/libtool	/^func_check_version_match ()$/;"	f
func_config	secp256k1/build-aux/ltmain.sh	/^func_config ()$/;"	f
func_config	secp256k1/libtool	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	secp256k1/libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	secp256k1/libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	secp256k1/libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	secp256k1/build-aux/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	secp256k1/libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	secp256k1/libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	secp256k1/libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	secp256k1/libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	secp256k1/libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	secp256k1/libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	secp256k1/build-aux/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	secp256k1/libtool	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	secp256k1/build-aux/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	secp256k1/libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	secp256k1/libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	secp256k1/build-aux/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	secp256k1/libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	secp256k1/libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	secp256k1/libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	secp256k1/libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	secp256k1/build-aux/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	secp256k1/libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	secp256k1/build-aux/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	secp256k1/libtool	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	secp256k1/libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	secp256k1/libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	secp256k1/build-aux/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	secp256k1/libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	secp256k1/build-aux/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	secp256k1/libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	secp256k1/build-aux/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	secp256k1/libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	secp256k1/build-aux/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	secp256k1/libtool	/^func_cygpath ()$/;"	f
func_dirname	secp256k1/build-aux/ltmain.sh	/^func_dirname ()$/;"	f
func_dirname	secp256k1/config.status	/^func_dirname ()\\$/;"	f
func_dirname	secp256k1/configure	/^func_dirname ()\\$/;"	f
func_dirname	secp256k1/libtool	/^func_dirname ()$/;"	f
func_dirname_and_basename	secp256k1/build-aux/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	secp256k1/config.status	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	secp256k1/configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	secp256k1/libtool	/^func_dirname_and_basename ()$/;"	f
func_echo	secp256k1/build-aux/ltmain.sh	/^func_echo ()$/;"	f
func_echo	secp256k1/libtool	/^func_echo ()$/;"	f
func_echo_all	secp256k1/build-aux/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	secp256k1/configure	/^func_echo_all ()$/;"	f
func_echo_all	secp256k1/libtool	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	secp256k1/build-aux/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	secp256k1/libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	secp256k1/build-aux/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	secp256k1/libtool	/^func_emit_wrapper ()$/;"	f
func_enable_tag	secp256k1/build-aux/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	secp256k1/libtool	/^func_enable_tag ()$/;"	f
func_error	secp256k1/build-aux/ltmain.sh	/^func_error ()$/;"	f
func_error	secp256k1/libtool	/^func_error ()$/;"	f
func_exec_program	secp256k1/build-aux/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	secp256k1/libtool	/^func_exec_program ()$/;"	f
func_exec_program_core	secp256k1/build-aux/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	secp256k1/libtool	/^func_exec_program_core ()$/;"	f
func_execute_cmds	secp256k1/build-aux/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	secp256k1/libtool	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	secp256k1/build-aux/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	secp256k1/libtool	/^func_extract_an_archive ()$/;"	f
func_extract_archives	secp256k1/build-aux/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	secp256k1/libtool	/^func_extract_archives ()$/;"	f
func_fallback_echo	secp256k1/build-aux/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	secp256k1/libtool	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	secp256k1/build-aux/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	secp256k1/libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_error	secp256k1/build-aux/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	secp256k1/libtool	/^func_fatal_error ()$/;"	f
func_fatal_help	secp256k1/build-aux/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	secp256k1/libtool	/^func_fatal_help ()$/;"	f
func_features	secp256k1/build-aux/ltmain.sh	/^func_features ()$/;"	f
func_features	secp256k1/libtool	/^func_features ()$/;"	f
func_generate_dlsyms	secp256k1/build-aux/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	secp256k1/libtool	/^func_generate_dlsyms ()$/;"	f
func_grep	secp256k1/build-aux/ltmain.sh	/^func_grep ()$/;"	f
func_grep	secp256k1/libtool	/^func_grep ()$/;"	f
func_help	secp256k1/build-aux/ltmain.sh	/^func_help ()$/;"	f
func_help	secp256k1/libtool	/^func_help ()$/;"	f
func_infer_tag	secp256k1/build-aux/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	secp256k1/libtool	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	secp256k1/build-aux/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	secp256k1/libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	secp256k1/build-aux/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	secp256k1/libtool	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	secp256k1/build-aux/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	secp256k1/libtool	/^func_lalib_unsafe_p ()$/;"	f
func_len	secp256k1/build-aux/ltmain.sh	/^func_len ()$/;"	f
func_len	secp256k1/config.status	/^func_len ()\\$/;"	f
func_len	secp256k1/configure	/^func_len ()\\$/;"	f
func_len	secp256k1/libtool	/^func_len ()$/;"	f
func_lo2o	secp256k1/build-aux/ltmain.sh	/^func_lo2o ()$/;"	f
func_lo2o	secp256k1/config.status	/^func_lo2o ()\\$/;"	f
func_lo2o	secp256k1/configure	/^func_lo2o ()\\$/;"	f
func_lo2o	secp256k1/libtool	/^func_lo2o ()$/;"	f
func_lt_dump_args	secp256k1/build-aux/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	secp256k1/libtool	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	secp256k1/libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	secp256k1/libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	secp256k1/libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	secp256k1/build-aux/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	secp256k1/libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	secp256k1/build-aux/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	secp256k1/libtool	/^func_missing_arg ()$/;"	f
func_mkdir_p	secp256k1/build-aux/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	secp256k1/libtool	/^func_mkdir_p ()$/;"	f
func_mktempdir	secp256k1/build-aux/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	secp256k1/libtool	/^func_mktempdir ()$/;"	f
func_mode_compile	secp256k1/build-aux/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	secp256k1/libtool	/^func_mode_compile ()$/;"	f
func_mode_execute	secp256k1/build-aux/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	secp256k1/libtool	/^func_mode_execute ()$/;"	f
func_mode_finish	secp256k1/build-aux/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	secp256k1/libtool	/^func_mode_finish ()$/;"	f
func_mode_help	secp256k1/build-aux/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	secp256k1/libtool	/^func_mode_help ()$/;"	f
func_mode_install	secp256k1/build-aux/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	secp256k1/libtool	/^func_mode_install ()$/;"	f
func_mode_link	secp256k1/build-aux/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	secp256k1/libtool	/^func_mode_link ()$/;"	f
func_mode_uninstall	secp256k1/build-aux/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	secp256k1/libtool	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	secp256k1/build-aux/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	secp256k1/libtool	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	secp256k1/build-aux/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	secp256k1/libtool	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	secp256k1/build-aux/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	secp256k1/libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	secp256k1/build-aux/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	secp256k1/libtool	/^func_quote_for_expand ()$/;"	f
func_relative_path	secp256k1/build-aux/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	secp256k1/libtool	/^func_relative_path ()$/;"	f
func_replace_sysroot	secp256k1/build-aux/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	secp256k1/libtool	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	secp256k1/build-aux/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	secp256k1/libtool	/^func_resolve_sysroot ()$/;"	f
func_show_eval	secp256k1/build-aux/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	secp256k1/libtool	/^func_show_eval ()$/;"	f
func_show_eval_locale	secp256k1/build-aux/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	secp256k1/libtool	/^func_show_eval_locale ()$/;"	f
func_source	secp256k1/build-aux/ltmain.sh	/^func_source ()$/;"	f
func_source	secp256k1/libtool	/^func_source ()$/;"	f
func_split_long_opt	secp256k1/build-aux/ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_long_opt	secp256k1/config.status	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	secp256k1/configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	secp256k1/libtool	/^func_split_long_opt ()$/;"	f
func_split_short_opt	secp256k1/build-aux/ltmain.sh	/^func_split_short_opt ()$/;"	f
func_split_short_opt	secp256k1/config.status	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	secp256k1/configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	secp256k1/libtool	/^func_split_short_opt ()$/;"	f
func_stripname	secp256k1/build-aux/ltmain.sh	/^func_stripname ()$/;"	f
func_stripname	secp256k1/config.status	/^func_stripname ()\\$/;"	f
func_stripname	secp256k1/configure	/^func_stripname ()\\$/;"	f
func_stripname	secp256k1/libtool	/^func_stripname ()$/;"	f
func_to_host_file	secp256k1/build-aux/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	secp256k1/libtool	/^func_to_host_file ()$/;"	f
func_to_host_path	secp256k1/build-aux/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	secp256k1/libtool	/^func_to_host_path ()$/;"	f
func_to_tool_file	secp256k1/build-aux/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	secp256k1/libtool	/^func_to_tool_file ()$/;"	f
func_tr_sh	secp256k1/build-aux/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	secp256k1/libtool	/^func_tr_sh ()$/;"	f
func_usage	secp256k1/build-aux/ltmain.sh	/^func_usage ()$/;"	f
func_usage	secp256k1/libtool	/^func_usage ()$/;"	f
func_verbose	secp256k1/build-aux/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	secp256k1/libtool	/^func_verbose ()$/;"	f
func_version	secp256k1/build-aux/ltmain.sh	/^func_version ()$/;"	f
func_version	secp256k1/libtool	/^func_version ()$/;"	f
func_warning	secp256k1/build-aux/ltmain.sh	/^func_warning ()$/;"	f
func_warning	secp256k1/libtool	/^func_warning ()$/;"	f
func_win32_import_lib_p	secp256k1/build-aux/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	secp256k1/libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	secp256k1/build-aux/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	secp256k1/libtool	/^func_win32_libid ()$/;"	f
func_write_libtool_object	secp256k1/build-aux/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	secp256k1/libtool	/^func_write_libtool_object ()$/;"	f
func_xform	secp256k1/build-aux/ltmain.sh	/^func_xform ()$/;"	f
func_xform	secp256k1/config.status	/^func_xform ()\\$/;"	f
func_xform	secp256k1/configure	/^func_xform ()\\$/;"	f
func_xform	secp256k1/libtool	/^func_xform ()$/;"	f
function	leveldb/include/leveldb/iterator.h	/^    CleanupFunction function;$/;"	m	struct:leveldb::Iterator::Cleanup
function	leveldb/util/env_posix.cc	/^  struct BGItem { void* arg; void (*function)(void*); };$/;"	m	struct:leveldb::__anon42::PosixEnv::BGItem	file:
fwrite_unlocked	leveldb/port/port_posix.h	58;"	d
g_PageSize	leveldb/util/env_win.cc	/^const size_t g_PageSize = GetPageSize();$/;"	m	namespace:leveldb::Win32	file:
g_rpcSignals	rpcserver.cpp	/^} g_rpcSignals;$/;"	v	typeref:struct:CRPCSignals	file:
g_signals	net.cpp	/^static CNodeSignals g_signals;$/;"	v	file:
g_signals	validationinterface.cpp	/^static CMainSignals g_signals;$/;"	v	file:
gcoin_cli_CPPFLAGS	Makefile	/^gcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)$/;"	m
gcoin_cli_DEPENDENCIES	Makefile	/^gcoin_cli_DEPENDENCIES = $(LIBBITCOIN_CLI) $(LIBBITCOIN_UTIL) \\$/;"	m
gcoin_cli_LDADD	Makefile	/^gcoin_cli_LDADD = \\$/;"	m
gcoin_cli_LDFLAGS	Makefile	/^gcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
gcoin_cli_LINK	Makefile	/^gcoin_cli_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
gcoin_cli_OBJECTS	Makefile	/^gcoin_cli_OBJECTS = $(am_gcoin_cli_OBJECTS)$/;"	m
gcoin_cli_SOURCES	Makefile	/^gcoin_cli_SOURCES = bitcoin-cli.cpp $(am__append_8)$/;"	m
gcoind_CPPFLAGS	Makefile	/^gcoind_CPPFLAGS = $(BITCOIN_INCLUDES)$/;"	m
gcoind_DEPENDENCIES	Makefile	/^gcoind_DEPENDENCIES = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_COMMON) \\$/;"	m
gcoind_LDADD	Makefile	/^gcoind_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_COMMON) \\$/;"	m
gcoind_LDFLAGS	Makefile	/^gcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)$/;"	m
gcoind_LINK	Makefile	/^gcoind_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
gcoind_OBJECTS	Makefile	/^gcoind_OBJECTS = $(am_gcoind_OBJECTS)$/;"	m
gcoind_SOURCES	Makefile	/^gcoind_SOURCES = bitcoind.cpp $(am__append_6)$/;"	m
ge_equals_ge	secp256k1/src/tests.c	/^void ge_equals_ge(const secp256k1_ge_t *a, const secp256k1_ge_t *b) {$/;"	f
ge_equals_gej	secp256k1/src/tests.c	/^void ge_equals_gej(const secp256k1_ge_t *a, const secp256k1_gej_t *b) {$/;"	f
ge_x	secp256k1/src/bench_internal.c	/^    secp256k1_ge_t ge_x, ge_y;$/;"	m	struct:__anon79	file:
ge_y	secp256k1/src/bench_internal.c	/^    secp256k1_ge_t ge_x, ge_y;$/;"	m	struct:__anon79	file:
gej_x	secp256k1/src/bench_internal.c	/^    secp256k1_gej_t gej_x, gej_y;$/;"	m	struct:__anon79	file:
gej_xyz_equals_gej	secp256k1/src/tests.c	/^int gej_xyz_equals_gej(const secp256k1_gej_t *a, const secp256k1_gej_t *b) {$/;"	f
gej_y	secp256k1/src/bench_internal.c	/^    secp256k1_gej_t gej_x, gej_y;$/;"	m	struct:__anon79	file:
gen	leveldb/db/skiplist_test.cc	/^  static uint64_t gen(Key key) { return (key >> 8) & 0xffffffffu; }$/;"	f	class:leveldb::ConcurrentTest	file:
gen_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
gen_	leveldb/doc/bench/db_bench_tree_db.cc	/^  RandomGenerator gen_;$/;"	m	class:leveldb::Benchmark	file:
generate	rpcmining.cpp	/^Value generate(const Array& params, bool fHelp)$/;"	f
generation	leveldb/db/skiplist_test.cc	/^    port::AtomicPointer generation[K];$/;"	m	struct:leveldb::ConcurrentTest::State	file:
genesis	chainparams.h	/^    CBlock genesis;$/;"	m	class:CChainParams
gennewaddress	wallet/rpcwallet.cpp	/^Value gennewaddress(const Array& params, bool fHelp)$/;"	f
getAlertByHash	alert.cpp	/^CAlert CAlert::getAlertByHash(const uint256 &hash)$/;"	f	class:CAlert
getBool	univalue/univalue.h	/^    bool getBool() const { return isTrue(); }$/;"	f	class:UniValue
getJsonToken	univalue/univalue_read.cpp	/^enum jtokentype getJsonToken(std::string& tokenVal, unsigned int& consumed,$/;"	f
getQueueInfo	scheduler.cpp	/^size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,$/;"	f	class:CScheduler
getType	univalue/univalue.h	/^    enum VType getType() const { return typ; }$/;"	f	class:UniValue
getValStr	univalue/univalue.h	/^    std::string getValStr() const { return val; }$/;"	f	class:UniValue
get_array	json/json_spirit_value.h	/^    const typename Value_impl< Config >::Array& Value_impl< Config >::get_array() const$/;"	f	class:json_spirit::Value_impl
get_array	json/json_spirit_value.h	/^    typename Value_impl< Config >::Array& Value_impl< Config >::get_array()$/;"	f	class:json_spirit::Value_impl
get_bool	json/json_spirit_value.h	/^    bool Value_impl< Config >::get_bool() const$/;"	f	class:json_spirit::Value_impl
get_int	json/json_spirit_value.h	/^    int Value_impl< Config >::get_int() const$/;"	f	class:json_spirit::Value_impl
get_int64	json/json_spirit_value.h	/^    int64_t Value_impl< Config >::get_int64() const$/;"	f	class:json_spirit::Value_impl
get_name	json/json_spirit_value.h	/^        static String_type get_name( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_map
get_name	json/json_spirit_value.h	/^        static String_type get_name( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_vector
get_obj	json/json_spirit_value.h	/^    const typename Value_impl< Config >::Object& Value_impl< Config >::get_obj() const$/;"	f	class:json_spirit::Value_impl
get_obj	json/json_spirit_value.h	/^    typename Value_impl< Config >::Object& Value_impl< Config >::get_obj()$/;"	f	class:json_spirit::Value_impl
get_openssl_key	secp256k1/src/tests.c	/^EC_KEY *get_openssl_key(const secp256k1_scalar_t *key) {$/;"	f
get_real	json/json_spirit_value.h	/^    double Value_impl< Config >::get_real() const$/;"	f	class:json_spirit::Value_impl
get_str	json/json_spirit_reader_template.h	/^    String_type get_str( Iter_type begin, Iter_type end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_reader_template.h	/^    inline std::string get_str( std::string::const_iterator begin, std::string::const_iterator end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_reader_template.h	/^    inline std::wstring get_str( std::wstring::const_iterator begin, std::wstring::const_iterator end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_value.h	/^    const typename Config::String_type& Value_impl< Config >::get_str() const$/;"	f	class:json_spirit::Value_impl
get_str_	json/json_spirit_reader_template.h	/^    String_type get_str_( typename String_type::const_iterator begin, $/;"	f	namespace:json_spirit
get_uint64	json/json_spirit_value.h	/^    uint64_t Value_impl< Config >::get_uint64() const$/;"	f	class:json_spirit::Value_impl
get_value	json/json_spirit_value.h	/^        bool get_value( const Value& value, Type_to_type< bool > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        double get_value( const Value& value, Type_to_type< double > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        int get_value( const Value& value, Type_to_type< int > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        int64_t get_value( const Value& value, Type_to_type< int64_t > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        static Value_type get_value( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_map
get_value	json/json_spirit_value.h	/^        static Value_type get_value( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_vector
get_value	json/json_spirit_value.h	/^        typename Value::Array get_value( const Value& value, Type_to_type< typename Value::Array > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        typename Value::Object get_value( const Value& value, Type_to_type< typename Value::Object > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        typename Value::String_type get_value( const Value& value, Type_to_type< typename Value::String_type > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        uint64_t get_value( const Value& value, Type_to_type< uint64_t > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^    T Value_impl< Config >::get_value() const$/;"	f	class:json_spirit::Value_impl
getaccount	wallet/rpcwallet.cpp	/^Value getaccount(const Array& params, bool fHelp)$/;"	f
getaccountaddress	wallet/rpcwallet.cpp	/^Value getaccountaddress(const Array& params, bool fHelp)$/;"	f
getaddednodeinfo	rpcnet.cpp	/^Value getaddednodeinfo(const Array& params, bool fHelp)$/;"	f
getaddressbalance	wallet/rpcwallet.cpp	/^Value getaddressbalance(const Array& params, bool fHelp)$/;"	f
getaddressesbyaccount	wallet/rpcwallet.cpp	/^Value getaddressesbyaccount(const Array& params, bool fHelp)$/;"	f
getaddrmempool	rpcblockchain.cpp	/^Value getaddrmempool(const Array& params, bool fHelp)$/;"	f
getbalance	wallet/rpcwallet.cpp	/^Value getbalance(const Array& params, bool fHelp)$/;"	f
getbanlist	rpcnet.cpp	/^Value getbanlist(const Array& params, bool fHelp)$/;"	f
getbestblockhash	rpcblockchain.cpp	/^Value getbestblockhash(const Array& params, bool fHelp)$/;"	f
getblock	rpcblockchain.cpp	/^Value getblock(const Array& params, bool fHelp)$/;"	f
getblockchaininfo	rpcblockchain.cpp	/^Value getblockchaininfo(const Array& params, bool fHelp)$/;"	f
getblockcount	rpcblockchain.cpp	/^Value getblockcount(const Array& params, bool fHelp)$/;"	f
getblockhash	rpcblockchain.cpp	/^Value getblockhash(const Array& params, bool fHelp)$/;"	f
getblocktemplate	rpcmining.cpp	/^Value getblocktemplate(const Array& params, bool fHelp)$/;"	f
getchaintips	rpcblockchain.cpp	/^Value getchaintips(const Array& params, bool fHelp)$/;"	f
getcolorbalance	wallet/rpcwallet.cpp	/^Value getcolorbalance(const Array& params, bool fHelp)$/;"	f
getconnectioncount	rpcnet.cpp	/^Value getconnectioncount(const Array& params, bool fHelp)$/;"	f
getdifficulty	rpcblockchain.cpp	/^Value getdifficulty(const Array& params, bool fHelp)$/;"	f
getdouble	arith_uint256.cpp	/^double base_uint<BITS>::getdouble() const$/;"	f	class:base_uint
getfixedaddress	wallet/rpcwallet.cpp	/^Value getfixedaddress(const Array& params, bool fHelp)$/;"	f
getgenerate	rpcmining.cpp	/^Value getgenerate(const Array& params, bool fHelp)$/;"	f
getinfo	rpcmisc.cpp	/^Value getinfo(const Array& params, bool fHelp)$/;"	f
getint	script/script.h	/^    int getint() const$/;"	f	class:CScriptNum
getint	test/bignum.h	/^    int getint() const$/;"	f	class:CBigNum
getlicenseinfo	wallet/rpcwallet.cpp	/^Value getlicenseinfo(const Array& params, bool fHelp)$/;"	f
getlicenselist	wallet/rpcwallet.cpp	/^Value getlicenselist(const Array& params, bool fHelp)$/;"	f
getmemberlist	rpcnet.cpp	/^Value getmemberlist(const Array& params, bool fHelp)$/;"	f
getmempoolinfo	rpcblockchain.cpp	/^Value getmempoolinfo(const Array& params, bool fHelp)$/;"	f
getmininginfo	rpcmining.cpp	/^Value getmininginfo(const Array& params, bool fHelp)$/;"	f
getnettotals	rpcnet.cpp	/^Value getnettotals(const Array& params, bool fHelp)$/;"	f
getnetworkhashps	rpcmining.cpp	/^Value getnetworkhashps(const Array& params, bool fHelp)$/;"	f
getnetworkinfo	rpcnet.cpp	/^Value getnetworkinfo(const Array& params, bool fHelp)$/;"	f
getnewaddress	wallet/rpcwallet.cpp	/^Value getnewaddress(const Array& params, bool fHelp)$/;"	f
getnewaddressamount	wallet/rpcwallet.cpp	/^Value getnewaddressamount(const Array& params, bool fHelp)$/;"	f
getorderlist	rpcnet.cpp	/^Value getorderlist(const Array& params, bool fHelp)$/;"	f
getpeerinfo	rpcnet.cpp	/^Value getpeerinfo(const Array& params, bool fHelp)$/;"	f
getrawchangeaddress	wallet/rpcwallet.cpp	/^Value getrawchangeaddress(const Array& params, bool fHelp)$/;"	f
getrawmempool	rpcblockchain.cpp	/^Value getrawmempool(const Array& params, bool fHelp)$/;"	f
getrawtransaction	rpcrawtransaction.cpp	/^Value getrawtransaction(const Array& params, bool fHelp)$/;"	f
getreceivedbyaccount	wallet/rpcwallet.cpp	/^Value getreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
getreceivedbyaddress	wallet/rpcwallet.cpp	/^Value getreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
getrtts	rpcnet.cpp	/^Value getrtts(const Array& params, bool fHelp)$/;"	f
gettid	leveldb/util/env_posix.cc	/^  static uint64_t gettid() {$/;"	f	class:leveldb::__anon42::PosixEnv
gettid_	leveldb/util/posix_logger.h	/^  uint64_t (*gettid_)();  \/\/ Return the thread id for the current thread$/;"	m	class:leveldb::PosixLogger
gettimedouble	secp256k1/src/bench.h	/^static double gettimedouble(void) {$/;"	f
gettotalbandwidth	rpcnet.cpp	/^Value gettotalbandwidth(const Array& params, bool fHelp)$/;"	f
gettransaction	wallet/rpcwallet.cpp	/^Value gettransaction(const Array& params, bool fHelp)$/;"	f
gettxout	rpcblockchain.cpp	/^Value gettxout(const Array& params, bool fHelp)$/;"	f
gettxoutsetinfo	rpcblockchain.cpp	/^Value gettxoutsetinfo(const Array& params, bool fHelp)$/;"	f
getunconfirmedbalance	wallet/rpcwallet.cpp	/^Value getunconfirmedbalance(const Array &params, bool fHelp)$/;"	f
getunconfirmedcolorbalance	wallet/rpcwallet.cpp	/^Value getunconfirmedcolorbalance(const Array &params, bool fHelp)$/;"	f
getvch	script/script.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum
getvch	test/bignum.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CBigNum
getwalletinfo	wallet/rpcwallet.cpp	/^Value getwalletinfo(const Array& params, bool fHelp)$/;"	f
give_advice	secp256k1/build-aux/missing	/^give_advice ()$/;"	f
glibc_sanity_test	compat/glibc_sanity.cpp	/^bool glibc_sanity_test()$/;"	f
glibcxx_sanity_test	compat/glibcxx_sanity.cpp	/^bool glibcxx_sanity_test()$/;"	f
grandparent_index_	leveldb/db/version_set.h	/^  size_t grandparent_index_;  \/\/ Index in grandparent_starts_$/;"	m	class:leveldb::Compaction
grandparents_	leveldb/db/version_set.h	/^  std::vector<FileMetaData*> grandparents_;$/;"	m	class:leveldb::Compaction
grantOutbound	net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
h 	leveldb/doc/doc.css	/^.datatable td,th {$/;"	s
h1 	leveldb/doc/doc.css	/^h1 {$/;"	s
h2 	leveldb/doc/doc.css	/^h2 {$/;"	s
h3 	leveldb/doc/doc.css	/^h3 {$/;"	s
h4 	leveldb/doc/doc.css	/^h4 {$/;"	s
hSocket	net.h	/^    SOCKET hSocket;$/;"	m	class:CNode
hadNoDependencies	txmempool.h	/^    bool hadNoDependencies; \/\/! Not dependent on any other txs when it entered the mempool$/;"	m	class:CTxMemPoolEntry
handler	rest.cpp	/^    bool (*handler)(AcceptedConnection* conn,$/;"	m	struct:__anon61	file:
handler	test/test_bitcoin.cpp	/^type_transaction_handler::HandlerInterface *handler;$/;"	v
handler_ban_vote_	main.cpp	/^Handler_BanVote_ handler_ban_vote_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_cancel_	main.cpp	/^Handler_Cancel_ handler_cancel_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_invalid_type_	main.cpp	/^Handler_InvalidType_ handler_invalid_type_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_license_	main.cpp	/^Handler_License_ handler_license_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_match_	main.cpp	/^Handler_Match_ handler_match_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_mint_	main.cpp	/^Handler_Mint_ handler_mint_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_normal_	main.cpp	/^Handler_Normal_ handler_normal_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_order_	main.cpp	/^Handler_Order_ handler_order_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handler_vote_	main.cpp	/^Handler_Vote_ handler_vote_;$/;"	m	namespace:type_transaction_handler::__anon48	file:
handshake	rpcprotocol.h	/^    void handshake(boost::asio::ssl::stream_base::handshake_type role)$/;"	f	class:SSLIOStreamDevice
hasModifier	coins.h	/^    bool hasModifier;$/;"	m	class:CCoinsViewCache
has_comparator_	leveldb/db/version_edit.h	/^  bool has_comparator_;$/;"	m	class:leveldb::VersionEdit
has_imm_	leveldb/db/db_impl.h	/^  port::AtomicPointer has_imm_;  \/\/ So bg thread can detect non-NULL imm_$/;"	m	class:leveldb::DBImpl
has_last_sequence_	leveldb/db/version_edit.h	/^  bool has_last_sequence_;$/;"	m	class:leveldb::VersionEdit
has_log_number_	leveldb/db/version_edit.h	/^  bool has_log_number_;$/;"	m	class:leveldb::VersionEdit
has_next_file_number_	leveldb/db/version_edit.h	/^  bool has_next_file_number_;$/;"	m	class:leveldb::VersionEdit
has_prev_log_number_	leveldb/db/version_edit.h	/^  bool has_prev_log_number_;$/;"	m	class:leveldb::VersionEdit
hash	cache.h	/^    uint256 hash;$/;"	m	struct:order_list::order_info_
hash	leveldb/db/skiplist_test.cc	/^  static uint64_t hash(Key key) { return key & 0xff; }$/;"	f	class:leveldb::ConcurrentTest	file:
hash	leveldb/util/cache.cc	/^  uint32_t hash;      \/\/ Hash of key(); used for fast sharding and comparisons$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
hash	main.cpp	/^        uint256 hash;$/;"	m	struct:__anon46::QueuedBlock	file:
hash	main.h	/^    uint256 hash;$/;"	m	class:TxInfo
hash	primitives/transaction.h	/^    const uint256 hash;$/;"	m	class:CTransaction
hash	primitives/transaction.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	protocol.h	/^    uint256 hash;$/;"	m	class:CInv
hash	rpcmining.cpp	/^    uint256 hash;$/;"	m	class:submitblock_StateCatcher	file:
hashBestBlock_	test/coins_tests.cpp	/^    uint256 hashBestBlock_;$/;"	m	class:__anon93::CCoinsViewTest	file:
hashBlock	coins.h	/^    mutable uint256 hashBlock;$/;"	m	class:CCoinsViewCache
hashBlock	coins.h	/^    uint256 hashBlock;$/;"	m	struct:CCoinsStats
hashBlock	main.cpp	/^    uint256 hashBlock;$/;"	m	struct:COrphanBlock	file:
hashBlock	main.cpp	/^    uint256 hashBlock;$/;"	m	struct:__anon47::CBlockReject	file:
hashBlock	wallet/wallet.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashGenesisBlock	consensus/params.h	/^    uint256 hashGenesisBlock;$/;"	m	struct:Consensus::Params
hashLastGetBlocksEnd	net.h	/^    uint256 hashLastGetBlocksEnd;$/;"	m	class:CNode
hashLastUnknownBlock	main.cpp	/^    uint256 hashLastUnknownBlock;$/;"	m	struct:__anon47::CNodeState	file:
hashMerkleRoot	chain.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashMerkleRoot	primitives/block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockHeader
hashPrev	chain.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrev	main.cpp	/^    uint256 hashPrev;$/;"	m	struct:COrphanBlock	file:
hashPrevBlock	primitives/block.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlockHeader
hashSerialized	coins.h	/^    uint256 hashSerialized;$/;"	m	struct:CCoinsStats
hatoui	univalue/univalue_read.cpp	/^static const char *hatoui(const char *first, const char *last,$/;"	f	file:
havePush	test/script_tests.cpp	/^    bool havePush;$/;"	m	class:__anon94::TestBuilder	file:
have_flag	secp256k1/src/bench_internal.c	/^int have_flag(int argc, char** argv, char *flag) {$/;"	f
hd_default_chainpath	wallet/rpcwallet.cpp	/^const std::string hd_default_chainpath = "m\/44'\/0'\/0'\/c";$/;"	v
hdaddchain	wallet/rpcwallet.cpp	/^Value hdaddchain(const Array& params, bool fHelp)$/;"	f
hdgetinfo	wallet/rpcwallet.cpp	/^Value hdgetinfo(const Array& params, bool fHelp)$/;"	f
hdkeypoolrefill	wallet/rpcwallet.cpp	/^Value hdkeypoolrefill(const Array& params, bool fHelp)$/;"	f
hdr	net.h	/^    CMessageHeader hdr;             \/\/ complete header$/;"	m	class:CNetMessage
hdrbuf	net.h	/^    CDataStream hdrbuf;             \/\/ partially received header$/;"	m	class:CNetMessage
hdsetchain	wallet/rpcwallet.cpp	/^Value hdsetchain(const Array& params, bool fHelp)$/;"	f
head_	leveldb/db/skiplist.h	/^  Node* const head_;$/;"	m	class:leveldb::SkipList
header	merkleblock.h	/^    CBlockHeader header;$/;"	m	class:CMerkleBlock
header	script/interpreter.cpp	/^    const CBlockHeader &header;  \/\/ reference to the spending transaction (the one being serialized)$/;"	m	class:__anon88::CBlockHeaderSignatureSerializer	file:
heap_allocated	leveldb/table/format.h	/^  bool heap_allocated;  \/\/ True iff caller should delete[] data.data()$/;"	m	struct:leveldb::BlockContents
heap_counter_	leveldb/db/db_bench.cc	/^  int heap_counter_;$/;"	m	class:leveldb::Benchmark	file:
help	rpcserver.cpp	/^Value help(const Array& params, bool fHelp)$/;"	f
help	rpcserver.cpp	/^string CRPCTable::help(string strCommand) const$/;"	f	class:CRPCTable
hex_str_to_char	json/json_spirit_reader_template.h	/^    Char_type hex_str_to_char( Iter_type& begin )$/;"	f	namespace:json_spirit
hex_to_num	json/json_spirit_reader_template.h	/^    Char_type hex_to_num( const Char_type c )$/;"	f	namespace:json_spirit
hist_	leveldb/db/db_bench.cc	/^  Histogram hist_;$/;"	m	class:leveldb::__anon15::Stats	file:
hist_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
hist_	leveldb/doc/bench/db_bench_tree_db.cc	/^  Histogram hist_;$/;"	m	class:leveldb::Benchmark	file:
histogram	support/pagelocker.h	/^    Histogram histogram;$/;"	m	class:LockedPageManagerBase
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	chainparams.h	/^    std::string name, host;$/;"	m	struct:CDNSSeedData
host	secp256k1/Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_alias	secp256k1/Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	secp256k1/Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_os	secp256k1/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_triplet	secp256k1/Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
host_vendor	secp256k1/Makefile	/^host_vendor = unknown$/;"	m
hr 	leveldb/doc/doc.css	/^hr {$/;"	s
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	secp256k1/Makefile	/^htmldir = ${docdir}$/;"	m
htobe16	compat/endian.h	/^inline uint16_t htobe16(uint16_t host_16bits)$/;"	f
htobe32	compat/endian.h	/^inline uint32_t htobe32(uint32_t host_32bits)$/;"	f
htobe64	compat/endian.h	/^inline uint64_t htobe64(uint64_t host_64bits)$/;"	f
htole16	compat/endian.h	/^inline uint16_t htole16(uint16_t host_16bits)$/;"	f
htole32	compat/endian.h	/^inline uint32_t htole32(uint32_t host_32bits)$/;"	f
htole64	compat/endian.h	/^inline uint64_t htole64(uint64_t host_64bits)$/;"	f
httpStatusDescription	rpcprotocol.cpp	/^static const char *httpStatusDescription(int nStatus)$/;"	f	file:
i	wallet/wallet.h	/^    int i;$/;"	m	class:COutput
i64tostr	utilstrencodings.cpp	/^std::string i64tostr(int64_t n)$/;"	f
icmp_	leveldb/db/repair.cc	/^  InternalKeyComparator const icmp_;$/;"	m	class:leveldb::__anon17::Repairer	file:
icmp_	leveldb/db/version_set.cc	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
icmp_	leveldb/db/version_set.h	/^  const InternalKeyComparator icmp_;$/;"	m	class:leveldb::VersionSet
id	leveldb/db/db_test.cc	/^  int id;$/;"	m	struct:leveldb::__anon19::MTThread	file:
id	net.h	/^    NodeId id;$/;"	m	class:CNode
id	rpcserver.cpp	/^    Value id;$/;"	m	class:JSONRequest	file:
id_mutex_	leveldb/util/cache.cc	/^  port::Mutex id_mutex_;$/;"	m	class:leveldb::__anon39::ShardedLRUCache	file:
ignore	streams.h	/^    CDataStream& ignore(int nSize)$/;"	f	class:CDataStream
imm	leveldb/db/db_impl.cc	/^  MemTable* imm;$/;"	m	struct:leveldb::__anon14::IterState	file:
imm_	leveldb/db/db_impl.h	/^  MemTable* imm_;                \/\/ Memtable being compacted$/;"	m	class:leveldb::DBImpl
importaddress	wallet/rpcdump.cpp	/^Value importaddress(const Array& params, bool fHelp)$/;"	f
importprivkey	wallet/rpcdump.cpp	/^Value importprivkey(const Array& params, bool fHelp)$/;"	f
importwallet	wallet/rpcdump.cpp	/^Value importwallet(const Array& params, bool fHelp)$/;"	f
in_avail	streams.h	/^    int in_avail()               { return size(); }$/;"	f	class:CDataStream
in_data	net.h	/^    bool in_data;                   \/\/ parsing header (false) or data (true)$/;"	m	class:CNetMessage
in_hash	test/handler_normal.cpp	/^    uint256 in_hash, member_hash, out_hash;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
include_HEADERS	Makefile	/^include_HEADERS = script\/bitcoinconsensus.h$/;"	m
include_HEADERS	secp256k1/Makefile	/^include_HEADERS = include\/secp256k1.h$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	secp256k1/Makefile	/^includedir = ${prefix}\/include$/;"	m
indent	json/json_spirit_writer_template.h	/^        void indent()$/;"	f	class:json_spirit::Generator
indentStr	univalue/univalue_write.cpp	/^static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)$/;"	f	file:
indentation_level_	json/json_spirit_writer_template.h	/^        int indentation_level_;$/;"	m	class:json_spirit::Generator
index	main.cpp	/^    size_t index;$/;"	m	struct:__anon49::CCachedOutputAddress	file:
index_	leveldb/db/version_set.cc	/^  uint32_t index_;$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
index_block	leveldb/table/table.cc	/^  Block* index_block;$/;"	m	struct:leveldb::Table::Rep	file:
index_block	leveldb/table/table_builder.cc	/^  BlockBuilder index_block;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_block_options	leveldb/table/table_builder.cc	/^  Options index_block_options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
index_handle	leveldb/table/format.h	/^  const BlockHandle& index_handle() const {$/;"	f	class:leveldb::Footer
index_handle_	leveldb/table/format.h	/^  BlockHandle index_handle_;$/;"	m	class:leveldb::Footer
index_iter_	leveldb/table/two_level_iterator.cc	/^  IteratorWrapper index_iter_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
infinity	secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon70
infinity	secp256k1/src/group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon71
info	test/handler_license.cpp	/^    CLicenseInfo info;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
info_	cache.h	/^    CLicenseInfo info_;$/;"	m	struct:color_license::Owner_
info_log	leveldb/include/leveldb/options.h	/^  Logger* info_log;$/;"	m	struct:leveldb::Options
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	secp256k1/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init	main.cpp	/^bool TxInfo::init(const COutPoint &outpoint, const CBlock *pblock, bool fUndo) {$/;"	f	class:TxInfo
initEscapes	univalue/gen.cpp	/^static bool initEscapes;$/;"	v	file:
initJsonEscape	univalue/gen.cpp	/^static void initJsonEscape()$/;"	f	file:
init_	leveldb/port/port_win.h	/^    bool init_;$/;"	m	class:leveldb::port::OnceType
init_flag	support/pagelocker.cpp	/^boost::once_flag LockedPageManager::init_flag = BOOST_ONCE_INIT;$/;"	m	class:LockedPageManager	file:
init_flag	support/pagelocker.h	/^    static boost::once_flag init_flag;$/;"	m	class:LockedPageManager
init_flag_	net.cpp	/^boost::once_flag CNetRecorder::init_flag_ = BOOST_ONCE_INIT;$/;"	m	class:CNetRecorder	file:
init_flag_	net.h	/^    static boost::once_flag init_flag_;  \/\/!< For the method Init_()$/;"	m	class:CNetRecorder
initial	secp256k1/src/ecmult_gen.h	/^    secp256k1_gej_t initial;$/;"	m	struct:__anon68
initial_offset_	leveldb/db/log_reader.h	/^  uint64_t const initial_offset_;$/;"	m	class:leveldb::log::Reader
initial_offset_last_record_offsets_	leveldb/db/log_test.cc	/^  static uint64_t initial_offset_last_record_offsets_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_last_record_offsets_	leveldb/db/log_test.cc	/^uint64_t LogTest::initial_offset_last_record_offsets_[] =$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	leveldb/db/log_test.cc	/^  static size_t initial_offset_record_sizes_[];$/;"	m	class:leveldb::log::LogTest	file:
initial_offset_record_sizes_	leveldb/db/log_test.cc	/^size_t LogTest::initial_offset_record_sizes_[] =$/;"	m	class:leveldb::log::LogTest	file:
inner	crypto/hmac_sha256.h	/^    CSHA256 inner;$/;"	m	class:CHMAC_SHA256
inner	crypto/hmac_sha512.h	/^    CSHA512 inner;$/;"	m	class:CHMAC_SHA512
inner	secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon81
input	leveldb/db/version_set.h	/^  FileMetaData* input(int which, int i) const { return inputs_[which][i]; }$/;"	f	class:leveldb::Compaction
input	timedata.h	/^    void input(T value)$/;"	f	class:CMedianFilter
input_version_	leveldb/db/version_set.h	/^  Version* input_version_;$/;"	m	class:leveldb::Compaction
inputs_	leveldb/db/version_set.h	/^  std::vector<FileMetaData*> inputs_[2];      \/\/ The two sets of inputs$/;"	m	class:leveldb::Compaction
insecure_rand	random.h	/^static inline uint32_t insecure_rand(void)$/;"	f
insecure_rand_Rw	random.cpp	/^uint32_t insecure_rand_Rw = 11;$/;"	v
insecure_rand_Rz	random.cpp	/^uint32_t insecure_rand_Rz = 11;$/;"	v
insert	bloom.cpp	/^void CBloomFilter::insert(const COutPoint& outpoint)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const uint256& hash)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)$/;"	f	class:CRollingBloomFilter
insert	limitedmap.h	/^    void insert(const value_type& x)$/;"	f	class:limitedmap
insert	mruset.h	/^    std::pair<iterator, bool> insert(const key_type& x)$/;"	f	class:mruset
insert	streams.h	/^    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	streams.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/adrian\/gcoin-community-develop\/build-aux\/install-sh$/;"	m
install_sh	secp256k1/Makefile	/^install_sh = ${SHELL} \/home\/adrian\/gcoin-community-develop\/src\/secp256k1\/build-aux\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	secp256k1/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	secp256k1/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	secp256k1/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance_of_cinit	util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
instance_of_cmaincleanup	main.cpp	/^} instance_of_cmaincleanup;$/;"	v	typeref:class:CMainCleanup
instance_of_cnetcleanup	net.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
int16_t	leveldb/port/win/stdint.h	/^typedef signed short          int16_t;$/;"	t
int32_t	leveldb/port/win/stdint.h	/^typedef signed int            int32_t;$/;"	t
int64_p	json/json_spirit_reader_template.h	/^    const spirit_namespace::int_parser < int64_t >  int64_p  = spirit_namespace::int_parser < int64_t  >();$/;"	m	namespace:json_spirit
int64_t	leveldb/port/win/stdint.h	/^typedef signed long long      int64_t;$/;"	t
int8_t	leveldb/port/win/stdint.h	/^typedef signed char           int8_t;$/;"	t
int_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
internal	wallet/hdkeystore.h	/^    bool internal;$/;"	m	class:CHDPubKey
internalPubKey	wallet/hdkeystore.h	/^    CExtPubKey internalPubKey; \/\/ pubkey.IsValid() == false means only use external chain$/;"	m	class:CHDChain
internal_	json/json_spirit_value.h	/^    namespace internal_$/;"	n	namespace:json_spirit
internal_comparator	leveldb/db/version_set.cc	/^    const InternalKeyComparator* internal_comparator;$/;"	m	struct:leveldb::VersionSet::Builder::BySmallestKey	file:
internal_comparator_	leveldb/db/db_impl.h	/^  const InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::DBImpl
internal_comparator_	leveldb/table/table_test.cc	/^  InternalKeyComparator internal_comparator_;$/;"	m	class:leveldb::MemTableConstructor	file:
internal_filter_policy_	leveldb/db/db_impl.h	/^  const InternalFilterPolicy internal_filter_policy_;$/;"	m	class:leveldb::DBImpl
internal_key	leveldb/db/dbformat.h	/^  Slice internal_key() const { return Slice(kstart_, end_ - kstart_); }$/;"	f	class:leveldb::LookupKey
invalidateblock	rpcblockchain.cpp	/^Value invalidateblock(const Array& params, bool fHelp)$/;"	f
invoke	tinyformat.h	/^    static bool invoke(std::ostream& \/**\/, const T& \/**\/) { return false; }$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	tinyformat.h	/^    static bool invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatZeroIntegerWorkaround
invoke	tinyformat.h	/^    static int invoke(const T& \/*value*\/)$/;"	f	struct:tinyformat::detail::convertToInt
invoke	tinyformat.h	/^    static int invoke(const T& value) { return static_cast<int>(value); }$/;"	f	struct:tinyformat::detail::convertToInt
invoke	tinyformat.h	/^    static void invoke(std::ostream& \/*out*\/, const T& \/*value*\/) { assert(0); }$/;"	f	struct:tinyformat::detail::formatValueAsType
invoke	tinyformat.h	/^    static void invoke(std::ostream& out, const T& value)$/;"	f	struct:tinyformat::detail::formatValueAsType
ip	netbase.h	/^        unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
ip	test/DoS_tests.cpp	/^CService ip(uint32_t i)$/;"	f
ipolicy_	leveldb/db/repair.cc	/^  InternalFilterPolicy const ipolicy_;$/;"	m	class:leveldb::__anon17::Repairer	file:
isArray	univalue/univalue.h	/^    bool isArray() const { return (typ == VARR); }$/;"	f	class:UniValue
isBool	univalue/univalue.h	/^    bool isBool() const { return (typ == VBOOL); }$/;"	f	class:UniValue
isCanonicalException	test/serialize_tests.cpp	/^static bool isCanonicalException(const std::ios_base::failure& ex)$/;"	f	file:
isEmpty	bloom.h	/^    bool isEmpty;$/;"	m	class:CBloomFilter
isEnable	leveldb/util/env_win.cc	/^BOOL Win32FileLock::isEnable()$/;"	f	class:leveldb::Win32::Win32FileLock
isEnable	leveldb/util/env_win.cc	/^BOOL Win32MapFile::isEnable()$/;"	f	class:leveldb::Win32::Win32MapFile
isEnable	leveldb/util/env_win.cc	/^BOOL Win32RandomAccessFile::isEnable()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
isEnable	leveldb/util/env_win.cc	/^BOOL Win32SequentialFile::isEnable()$/;"	f	class:leveldb::Win32::Win32SequentialFile
isFalse	univalue/univalue.h	/^    bool isFalse() const { return (!isTrue()); }$/;"	f	class:UniValue
isFeeDataPoint	policy/fees.cpp	/^bool CBlockPolicyEstimator::isFeeDataPoint(const CFeeRate &fee, double pri)$/;"	f	class:CBlockPolicyEstimator
isFull	bloom.h	/^    bool isFull;$/;"	m	class:CBloomFilter
isNull	univalue/univalue.h	/^    bool isNull() const { return (typ == VNULL); }$/;"	f	class:UniValue
isNum	univalue/univalue.h	/^    bool isNum() const { return (typ == VNUM); }$/;"	f	class:UniValue
isObject	univalue/univalue.h	/^    bool isObject() const { return (typ == VOBJ); }$/;"	f	class:UniValue
isPriDataPoint	policy/fees.cpp	/^bool CBlockPolicyEstimator::isPriDataPoint(const CFeeRate &fee, double pri)$/;"	f	class:CBlockPolicyEstimator
isStr	univalue/univalue.h	/^    bool isStr() const { return (typ == VSTR); }$/;"	f	class:UniValue
isTrue	univalue/univalue.h	/^    bool isTrue() const { return (typ == VBOOL) && (val == "1"); }$/;"	f	class:UniValue
is_convertible	tinyformat.h	/^struct is_convertible$/;"	s	namespace:tinyformat::detail
is_default	leveldb/db/c.cc	/^  bool is_default;$/;"	m	struct:leveldb_env_t	file:
is_empty_compact_signature	secp256k1/src/tests.c	/^int is_empty_compact_signature(const unsigned char *sig64) {$/;"	f
is_eq	json/json_spirit_reader_template.h	/^    bool is_eq( Iter_type first, Iter_type last, const char* c_str )$/;"	f	namespace:json_spirit
is_null	json/json_spirit_value.h	/^    bool Value_impl< Config >::is_null() const$/;"	f	class:json_spirit::Value_impl
is_uint64	json/json_spirit_value.h	/^    bool Value_impl< Config >::is_uint64() const$/;"	f	class:json_spirit::Value_impl
is_uint64_	json/json_spirit_value.h	/^        bool is_uint64_;$/;"	m	class:json_spirit::Value_impl
is_wchar	tinyformat.h	/^template<> struct is_wchar<const wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<> struct is_wchar<wchar_t*> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<int n> struct is_wchar<const wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<int n> struct is_wchar<wchar_t[n]> {};$/;"	s	namespace:tinyformat::detail
is_wchar	tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	s	namespace:tinyformat::detail
isminefilter	wallet/wallet_ismine.h	/^typedef uint8_t isminefilter;$/;"	t
isminetype	wallet/wallet_ismine.h	/^enum isminetype$/;"	g
issuer	policy/licenseinfo.h	/^    string issuer;$/;"	m	class:CLicenseInfo
issuer	test/handler_license.cpp	/^    std::string issuer, user;$/;"	m	struct:TransferLicenseHandlerCheckValidFixture	file:
issuer	test/handler_license.cpp	/^    std::string member, issuer;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
istream_iter	json/json_spirit_reader_template.h	/^        typedef std::istream_iterator< Char_type, Char_type > istream_iter;$/;"	t	struct:json_spirit::Multi_pass_iters
it	coins.h	/^    CCoinsMap::iterator it;$/;"	m	class:CCoinsModifier
iter	leveldb/table/iterator_wrapper.h	/^  Iterator* iter() const { return iter_; }$/;"	f	class:leveldb::IteratorWrapper
iter_	leveldb/db/db_iter.cc	/^  Iterator* const iter_;$/;"	m	class:leveldb::__anon22::DBIter	file:
iter_	leveldb/db/db_test.cc	/^    KVMap::const_iterator iter_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
iter_	leveldb/db/memtable.cc	/^  MemTable::Table::Iterator iter_;$/;"	m	class:leveldb::MemTableIterator	file:
iter_	leveldb/table/iterator_wrapper.h	/^  Iterator* iter_;$/;"	m	class:leveldb::IteratorWrapper
iter_	leveldb/table/table_test.cc	/^  Iterator* iter_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
iterator	limitedmap.h	/^    typedef typename std::map<K, V>::iterator iterator;$/;"	t	class:limitedmap
iterator	mruset.h	/^    typedef typename std::set<T>::iterator iterator;$/;"	t	class:mruset
iterator	streams.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iteroptions	leveldbwrapper.h	/^    leveldb::ReadOptions iteroptions;$/;"	m	class:CLevelDBWrapper
iters_	json/json_spirit_stream_reader.h	/^        Mp_iters iters_;$/;"	m	class:json_spirit::Stream_reader
iters_	json/json_spirit_stream_reader.h	/^        Mp_iters iters_;$/;"	m	class:json_spirit::Stream_reader_thrower
itostr	utilstrencodings.cpp	/^std::string itostr(int n)$/;"	f
json	test/bctest.py	/^import json$/;"	i
json1	test/univalue_tests.cpp	/^static const char *json1 =$/;"	v	file:
json_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
json_escape	univalue/univalue_write.cpp	/^static string json_escape(const string& inS)$/;"	f	file:
json_spirit	json/json_spirit_error_position.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_reader.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_reader_template.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_stream_reader.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_utils.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_value.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_writer.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_writer_template.h	/^namespace json_spirit$/;"	n
jtokentype	univalue/univalue.h	/^enum jtokentype {$/;"	g
k	secp256k1/src/hash.h	/^    unsigned char k[32];$/;"	m	struct:__anon82
k1	crypto/sha1.cpp	/^const uint32_t k1 = 0x5A827999ul;$/;"	m	namespace:__anon7::sha1	file:
k2	crypto/sha1.cpp	/^const uint32_t k2 = 0x6ED9EBA1ul;$/;"	m	namespace:__anon7::sha1	file:
k3	crypto/sha1.cpp	/^const uint32_t k3 = 0x8F1BBCDCul;$/;"	m	namespace:__anon7::sha1	file:
k4	crypto/sha1.cpp	/^const uint32_t k4 = 0xCA62C1D6ul;$/;"	m	namespace:__anon7::sha1	file:
kBadRecord	leveldb/db/log_reader.h	/^    kBadRecord = kMaxRecordType + 2$/;"	e	enum:leveldb::log::Reader::__anon21
kBlockSize	leveldb/db/log_format.h	/^static const int kBlockSize = 32768;$/;"	m	namespace:leveldb::log
kBlockSize	leveldb/helpers/memenv/memenv.cc	/^  enum { kBlockSize = 8 * 1024 };$/;"	e	enum:leveldb::__anon26::FileState::__anon27	file:
kBlockSize	leveldb/util/arena.cc	/^static const int kBlockSize = 4096;$/;"	m	namespace:leveldb	file:
kBlockTrailerSize	leveldb/table/format.h	/^static const size_t kBlockTrailerSize = 5;$/;"	m	namespace:leveldb
kBucketLimit	leveldb/util/histogram.cc	/^const double Histogram::kBucketLimit[kNumBuckets] = {$/;"	m	class:leveldb::Histogram	file:
kBucketLimit	leveldb/util/histogram.h	/^  static const double kBucketLimit[kNumBuckets];$/;"	m	class:leveldb::Histogram
kCacheSize	leveldb/util/cache_test.cc	/^  static const int kCacheSize = 1000;$/;"	m	class:leveldb::CacheTest	file:
kCompactPointer	leveldb/db/version_edit.cc	/^  kCompactPointer       = 5,$/;"	e	enum:leveldb::Tag	file:
kComparator	leveldb/db/version_edit.cc	/^  kComparator           = 1,$/;"	e	enum:leveldb::Tag	file:
kCorrupt	leveldb/db/version_set.cc	/^  kCorrupt,$/;"	e	enum:leveldb::__anon24::SaverState	file:
kCorruption	leveldb/include/leveldb/status.h	/^    kCorruption = 2,$/;"	e	enum:leveldb::Status::Code
kCount	leveldb/db/autocompact_test.cc	/^static const int kCount = kTotalSize \/ kValueSize;$/;"	m	namespace:leveldb	file:
kCurrentFile	leveldb/db/filename.h	/^  kCurrentFile,$/;"	e	enum:leveldb::FileType
kDBLockFile	leveldb/db/filename.h	/^  kDBLockFile,$/;"	e	enum:leveldb::FileType
kDefault	leveldb/db/db_test.cc	/^    kDefault,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kDelayMicros	leveldb/util/env_test.cc	/^static const int kDelayMicros = 100000;$/;"	m	namespace:leveldb	file:
kDeleted	leveldb/db/version_set.cc	/^  kDeleted,$/;"	e	enum:leveldb::__anon24::SaverState	file:
kDeletedFile	leveldb/db/version_edit.cc	/^  kDeletedFile          = 6,$/;"	e	enum:leveldb::Tag	file:
kDescriptorFile	leveldb/db/filename.h	/^  kDescriptorFile,$/;"	e	enum:leveldb::FileType
kEncodedLength	leveldb/table/format.h	/^    kEncodedLength = 2*BlockHandle::kMaxEncodedLength + 8$/;"	e	enum:leveldb::Footer::__anon32
kEnd	leveldb/db/db_test.cc	/^    kEnd$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kEof	leveldb/db/log_reader.h	/^    kEof = kMaxRecordType + 1,$/;"	e	enum:leveldb::log::Reader::__anon21
kExpandedCompactionByteSizeLimit	leveldb/db/version_set.cc	/^static const int64_t kExpandedCompactionByteSizeLimit = 25 * kTargetFileSize;$/;"	m	namespace:leveldb	file:
kFilter	leveldb/db/db_test.cc	/^    kFilter,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kFilterBase	leveldb/table/filter_block.cc	/^static const size_t kFilterBase = 1 << kFilterBaseLg;$/;"	m	namespace:leveldb	file:
kFilterBaseLg	leveldb/table/filter_block.cc	/^static const size_t kFilterBaseLg = 11;$/;"	m	namespace:leveldb	file:
kFirstType	leveldb/db/log_format.h	/^  kFirstType = 2,$/;"	e	enum:leveldb::log::RecordType
kForward	leveldb/db/db_iter.cc	/^    kForward,$/;"	e	enum:leveldb::__anon22::DBIter::Direction	file:
kForward	leveldb/table/merger.cc	/^    kForward,$/;"	e	enum:leveldb::__anon28::MergingIterator::Direction	file:
kFound	leveldb/db/version_set.cc	/^  kFound,$/;"	e	enum:leveldb::__anon24::SaverState	file:
kFullType	leveldb/db/log_format.h	/^  kFullType = 1,$/;"	e	enum:leveldb::log::RecordType
kHeader	leveldb/db/write_batch.cc	/^static const size_t kHeader = 12;$/;"	m	namespace:leveldb	file:
kHeaderSize	leveldb/db/log_format.h	/^static const int kHeaderSize = 4 + 2 + 1;$/;"	m	namespace:leveldb::log
kIOError	leveldb/include/leveldb/status.h	/^    kIOError = 5$/;"	e	enum:leveldb::Status::Code
kInfoLogFile	leveldb/db/filename.h	/^  kInfoLogFile  \/\/ Either the current one, or an old one$/;"	e	enum:leveldb::FileType
kInvalidArgument	leveldb/include/leveldb/status.h	/^    kInvalidArgument = 4,$/;"	e	enum:leveldb::Status::Code
kL0_CompactionTrigger	leveldb/db/dbformat.h	/^static const int kL0_CompactionTrigger = 4;$/;"	m	namespace:leveldb::config
kL0_SlowdownWritesTrigger	leveldb/db/dbformat.h	/^static const int kL0_SlowdownWritesTrigger = 8;$/;"	m	namespace:leveldb::config
kL0_StopWritesTrigger	leveldb/db/dbformat.h	/^static const int kL0_StopWritesTrigger = 12;$/;"	m	namespace:leveldb::config
kLastSequence	leveldb/db/version_edit.cc	/^  kLastSequence         = 4,$/;"	e	enum:leveldb::Tag	file:
kLastType	leveldb/db/log_format.h	/^  kLastType = 4$/;"	e	enum:leveldb::log::RecordType
kLittleEndian	leveldb/port/port_example.h	/^static const bool kLittleEndian = true \/* or some other expression *\/;$/;"	m	namespace:leveldb::port
kLittleEndian	leveldb/port/port_posix.h	/^static const bool kLittleEndian = PLATFORM_IS_LITTLE_ENDIAN;$/;"	m	namespace:leveldb::port
kLittleEndian	leveldb/port/port_win.h	/^static const bool kLittleEndian = true;$/;"	m	namespace:leveldb::port
kLogFile	leveldb/db/filename.h	/^  kLogFile,$/;"	e	enum:leveldb::FileType
kLogNumber	leveldb/db/version_edit.cc	/^  kLogNumber            = 2,$/;"	e	enum:leveldb::Tag	file:
kMajorVersion	leveldb/include/leveldb/db.h	/^static const int kMajorVersion = 1;$/;"	m	namespace:leveldb
kMaskDelta	leveldb/util/crc32c.h	/^static const uint32_t kMaskDelta = 0xa282ead8ul;$/;"	m	namespace:leveldb::crc32c
kMaxEncodedLength	leveldb/table/format.h	/^  enum { kMaxEncodedLength = 10 + 10 };$/;"	e	enum:leveldb::BlockHandle::__anon31
kMaxGrandParentOverlapBytes	leveldb/db/version_set.cc	/^static const int64_t kMaxGrandParentOverlapBytes = 10 * kTargetFileSize;$/;"	m	namespace:leveldb	file:
kMaxHeight	leveldb/db/skiplist.h	/^  enum { kMaxHeight = 12 };$/;"	e	enum:leveldb::SkipList::__anon13
kMaxMemCompactLevel	leveldb/db/dbformat.h	/^static const int kMaxMemCompactLevel = 2;$/;"	m	namespace:leveldb::config
kMaxRecordType	leveldb/db/log_format.h	/^static const int kMaxRecordType = kLastType;$/;"	m	namespace:leveldb::log
kMaxSequenceNumber	leveldb/db/dbformat.h	/^static const SequenceNumber kMaxSequenceNumber =$/;"	m	namespace:leveldb
kMiddleType	leveldb/db/log_format.h	/^  kMiddleType = 3,$/;"	e	enum:leveldb::log::RecordType
kMinorVersion	leveldb/include/leveldb/db.h	/^static const int kMinorVersion = 18;$/;"	m	namespace:leveldb
kNewFile	leveldb/db/version_edit.cc	/^  kNewFile              = 7,$/;"	e	enum:leveldb::Tag	file:
kNextFileNumber	leveldb/db/version_edit.cc	/^  kNextFileNumber       = 3,$/;"	e	enum:leveldb::Tag	file:
kNoCompression	leveldb/include/leveldb/options.h	/^  kNoCompression     = 0x0,$/;"	e	enum:leveldb::CompressionType
kNotFound	leveldb/db/version_set.cc	/^  kNotFound,$/;"	e	enum:leveldb::__anon24::SaverState	file:
kNotFound	leveldb/include/leveldb/status.h	/^    kNotFound = 1,$/;"	e	enum:leveldb::Status::Code
kNotSupported	leveldb/include/leveldb/status.h	/^    kNotSupported = 3,$/;"	e	enum:leveldb::Status::Code
kNumBuckets	leveldb/util/histogram.h	/^  enum { kNumBuckets = 154 };$/;"	e	enum:leveldb::Histogram::__anon38
kNumKeys	leveldb/db/db_test.cc	/^static const int kNumKeys = 1000;$/;"	m	namespace:leveldb::__anon19	file:
kNumKeys	leveldb/issues/issue178_test.cc	/^const int kNumKeys = 1100000;$/;"	m	namespace:__anon12	file:
kNumLevels	leveldb/db/dbformat.h	/^static const int kNumLevels = 7;$/;"	m	namespace:leveldb::config
kNumNonTableCacheFiles	leveldb/db/db_impl.cc	/^const int kNumNonTableCacheFiles = 10;$/;"	m	namespace:leveldb	file:
kNumShardBits	leveldb/util/cache.cc	/^static const int kNumShardBits = 4;$/;"	m	namespace:leveldb::__anon39	file:
kNumShards	leveldb/util/cache.cc	/^static const int kNumShards = 1 << kNumShardBits;$/;"	m	namespace:leveldb::__anon39	file:
kNumTestArgs	leveldb/table/table_test.cc	/^static const int kNumTestArgs = sizeof(kTestArgList) \/ sizeof(kTestArgList[0]);$/;"	m	namespace:leveldb	file:
kNumThreads	leveldb/db/db_test.cc	/^static const int kNumThreads = 4;$/;"	m	namespace:leveldb::__anon19	file:
kOk	leveldb/include/leveldb/status.h	/^    kOk = 0,$/;"	e	enum:leveldb::Status::Code
kPrevLogNumber	leveldb/db/version_edit.cc	/^  kPrevLogNumber        = 9$/;"	e	enum:leveldb::Tag	file:
kReadBytesPeriod	leveldb/db/dbformat.h	/^static const int kReadBytesPeriod = 1048576;$/;"	m	namespace:leveldb::config
kReverse	leveldb/db/db_iter.cc	/^    kReverse$/;"	e	enum:leveldb::__anon22::DBIter::Direction	file:
kReverse	leveldb/table/merger.cc	/^    kReverse$/;"	e	enum:leveldb::__anon28::MergingIterator::Direction	file:
kSnappyCompression	leveldb/include/leveldb/options.h	/^  kSnappyCompression = 0x1$/;"	e	enum:leveldb::CompressionType
kTableFile	leveldb/db/filename.h	/^  kTableFile,$/;"	e	enum:leveldb::FileType
kTableMagicNumber	leveldb/table/format.h	/^static const uint64_t kTableMagicNumber = 0xdb4775248b80fb57ull;$/;"	m	namespace:leveldb
kTargetFileSize	leveldb/db/version_set.cc	/^static const int kTargetFileSize = 2 * 1048576;$/;"	m	namespace:leveldb	file:
kTempFile	leveldb/db/filename.h	/^  kTempFile,$/;"	e	enum:leveldb::FileType
kTestArgList	leveldb/table/table_test.cc	/^static const TestArgs kTestArgList[] = {$/;"	m	namespace:leveldb	file:
kTestSeconds	leveldb/db/db_test.cc	/^static const int kTestSeconds = 10;$/;"	m	namespace:leveldb::__anon19	file:
kTotalSize	leveldb/db/autocompact_test.cc	/^static const int kTotalSize = 100 * 1024 * 1024;$/;"	m	namespace:leveldb	file:
kTypeDeletion	leveldb/db/dbformat.h	/^  kTypeDeletion = 0x0,$/;"	e	enum:leveldb::ValueType
kTypeValue	leveldb/db/dbformat.h	/^  kTypeValue = 0x1$/;"	e	enum:leveldb::ValueType
kUncompressed	leveldb/db/db_test.cc	/^    kUncompressed,$/;"	e	enum:leveldb::DBTest::OptionConfig	file:
kValueSize	leveldb/db/autocompact_test.cc	/^static const int kValueSize = 200 * 1024;$/;"	m	namespace:leveldb	file:
kValueSize	leveldb/db/corruption_test.cc	/^static const int kValueSize = 1000;$/;"	m	namespace:leveldb	file:
kValueTypeForSeek	leveldb/db/dbformat.h	/^static const ValueType kValueTypeForSeek = kTypeValue;$/;"	m	namespace:leveldb
kVerbose	leveldb/util/bloom_test.cc	/^static const int kVerbose = 1;$/;"	m	namespace:leveldb	file:
kZeroType	leveldb/db/log_format.h	/^  kZeroType = 0,$/;"	e	enum:leveldb::log::RecordType
k_	leveldb/util/bloom.cc	/^  size_t k_;$/;"	m	class:leveldb::__anon40::BloomFilterPolicy	file:
kbd 	leveldb/doc/doc.css	/^kbd {$/;"	s
key	key.h	/^    CKey key;$/;"	m	struct:CExtKey
key	leveldb/db/db_iter.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon22::DBIter
key	leveldb/db/db_test.cc	/^    virtual Slice key() const { return iter_->first; }$/;"	f	class:leveldb::ModelDB::ModelIter
key	leveldb/db/memtable.cc	/^  virtual Slice key() const { return GetLengthPrefixedSlice(iter_.key()); }$/;"	f	class:leveldb::MemTableIterator
key	leveldb/db/skiplist.h	/^  Key const key;$/;"	m	struct:leveldb::SkipList::Node
key	leveldb/db/skiplist.h	/^inline const Key& SkipList<Key,Comparator>::Iterator::key() const {$/;"	f	class:leveldb::SkipList::Iterator
key	leveldb/db/skiplist_test.cc	/^  static uint64_t key(Key key) { return (key >> 40); }$/;"	f	class:leveldb::ConcurrentTest	file:
key	leveldb/db/version_set.cc	/^  Slice key() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
key	leveldb/table/block.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::Block::Iter
key	leveldb/table/iterator.cc	/^  Slice key() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon29::EmptyIterator
key	leveldb/table/iterator_wrapper.h	/^  Slice key() const         { assert(Valid()); return key_; }$/;"	f	class:leveldb::IteratorWrapper
key	leveldb/table/merger.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon28::MergingIterator
key	leveldb/table/table_test.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::KeyConvertingIterator
key	leveldb/table/two_level_iterator.cc	/^  virtual Slice key() const {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
key	leveldb/util/cache.cc	/^  Slice key() const {$/;"	f	struct:leveldb::__anon39::LRUHandle
key	secp256k1/src/bench_sign.c	/^    unsigned char key[32];$/;"	m	struct:__anon67	file:
key	secp256k1/src/bench_verify.c	/^    unsigned char key[32];$/;"	m	struct:__anon66	file:
key0	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon94::KeyData	file:
key0C	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon94::KeyData	file:
key1	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon94::KeyData	file:
key1C	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon94::KeyData	file:
key2	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon94::KeyData	file:
key2C	test/script_tests.cpp	/^    CKey key0, key0C, key1, key1C, key2, key2C;$/;"	m	struct:__anon94::KeyData	file:
key_	leveldb/table/block.cc	/^  std::string key_;$/;"	m	class:leveldb::Block::Iter	file:
key_	leveldb/table/iterator_wrapper.h	/^  Slice key_;$/;"	m	class:leveldb::IteratorWrapper
key_data	leveldb/util/cache.cc	/^  char key_data[1];   \/\/ Beginning of key$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
key_length	leveldb/util/cache.cc	/^  size_t key_length;$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
key_match_	leveldb/db/c.cc	/^  unsigned char (*key_match_)($/;"	m	struct:leveldb_filterpolicy_t	file:
key_type	limitedmap.h	/^    typedef K key_type;$/;"	t	class:limitedmap
key_type	mruset.h	/^    typedef T key_type;$/;"	t	class:mruset
keypoolrefill	wallet/rpcwallet.cpp	/^Value keypoolrefill(const Array& params, bool fHelp)$/;"	f
keys	univalue/univalue.h	/^    std::vector<std::string> keys;$/;"	m	class:UniValue
keys_	leveldb/table/filter_block.h	/^  std::string keys_;              \/\/ Flattened key contents$/;"	m	class:leveldb::FilterBlockBuilder
keys_	leveldb/util/bloom_test.cc	/^  std::vector<std::string> keys_;$/;"	m	class:leveldb::BloomTest	file:
keystore	script/sign.h	/^    const CKeyStore* keystore;$/;"	m	class:BaseSignatureCreator
keystore	wallet/wallet.cpp	/^    const CKeyStore &keystore;$/;"	m	class:CAffectedKeysVisitor	file:
kstart_	leveldb/db/dbformat.h	/^  const char* kstart_;$/;"	m	class:leveldb::LookupKey
largest	leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
largest	leveldb/db/version_edit.h	/^  InternalKey largest;        \/\/ Largest internal key served by table$/;"	m	struct:leveldb::FileMetaData
last_id_	leveldb/util/cache.cc	/^  uint64_t last_id_;$/;"	m	class:leveldb::__anon39::ShardedLRUCache	file:
last_key	leveldb/table/table_builder.cc	/^  std::string last_key;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
last_key_	leveldb/table/block_builder.h	/^  std::string           last_key_;$/;"	m	class:leveldb::BlockBuilder
last_lock_addr	test/allocator_tests.cpp	/^static const void *last_lock_addr, *last_unlock_addr;$/;"	v	file:
last_lock_len	test/allocator_tests.cpp	/^static size_t last_lock_len, last_unlock_len;$/;"	v	file:
last_op_finish_	leveldb/db/db_bench.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::__anon15::Stats	file:
last_op_finish_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_op_finish_	leveldb/doc/bench/db_bench_tree_db.cc	/^  double last_op_finish_;$/;"	m	class:leveldb::Benchmark	file:
last_options_	leveldb/db/db_test.cc	/^  Options last_options_;$/;"	m	class:leveldb::DBTest	file:
last_record_offset_	leveldb/db/log_reader.h	/^  uint64_t last_record_offset_;$/;"	m	class:leveldb::log::Reader
last_sequence_	leveldb/db/version_edit.h	/^  SequenceNumber last_sequence_;$/;"	m	class:leveldb::VersionEdit
last_sequence_	leveldb/db/version_set.h	/^  uint64_t last_sequence_;$/;"	m	class:leveldb::VersionSet
last_unlock_addr	test/allocator_tests.cpp	/^static const void *last_lock_addr, *last_unlock_addr;$/;"	v	file:
last_unlock_len	test/allocator_tests.cpp	/^static size_t last_lock_len, last_unlock_len;$/;"	v	file:
le16toh	compat/endian.h	/^inline uint16_t le16toh(uint16_t little_endian_16bits)$/;"	f
le32toh	compat/endian.h	/^inline uint32_t le32toh(uint32_t little_endian_32bits)$/;"	f
le64toh	compat/endian.h	/^inline uint64_t le64toh(uint64_t little_endian_64bits)$/;"	f
left	crypto/sha1.cpp	/^uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }$/;"	f	namespace:__anon7::sha1
left	memusage.h	/^    void* left;$/;"	m	struct:memusage::stl_tree_node
length_	leveldb/util/cache.cc	/^  uint32_t length_;$/;"	m	class:leveldb::__anon39::HandleTable	file:
length_	leveldb/util/env_posix.cc	/^  size_t length_;$/;"	m	class:leveldb::__anon42::PosixMmapReadableFile	file:
level	leveldb/db/db_impl.h	/^    int level;$/;"	m	struct:leveldb::DBImpl::ManualCompaction
level	leveldb/db/version_set.h	/^  int level() const { return level_; }$/;"	f	class:leveldb::Compaction
level_	leveldb/db/version_set.h	/^  int level_;$/;"	m	class:leveldb::Compaction
level_ptrs_	leveldb/db/version_set.h	/^  size_t level_ptrs_[config::kNumLevels];$/;"	m	class:leveldb::Compaction
leveldb	leveldb/db/autocompact_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/builder.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/corruption_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_bench.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_impl.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_impl.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/db_iter.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/db_iter.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/db_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/dbformat.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/dbformat.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/dbformat_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/dumpfile.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/filename.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/filename.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/filename_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/leveldb_main.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_format.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/log_reader.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_reader.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/log_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_writer.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/log_writer.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/memtable.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/memtable.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/repair.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/skiplist.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/skiplist_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/snapshot.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/table_cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/table_cache.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/version_edit.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/version_edit.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/version_edit_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/version_set.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/version_set.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/version_set_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/write_batch.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/db/write_batch_internal.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/db/write_batch_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/doc/bench/db_bench_sqlite3.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/doc/bench/db_bench_tree_db.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/helpers/memenv/memenv.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/helpers/memenv/memenv.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/helpers/memenv/memenv_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/include/leveldb/cache.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/comparator.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/db.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/dumpfile.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/env.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/filter_policy.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/iterator.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/options.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/slice.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/status.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/table.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/table_builder.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/include/leveldb/write_batch.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/issues/issue200_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/port/atomic_pointer.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/port/port_example.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/port/port_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/port/port_posix.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/port/port_win.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/port/port_win.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/block.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/block_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/block_builder.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/filter_block.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/filter_block.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/filter_block_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/format.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/format.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/iterator_wrapper.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/merger.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/merger.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/table/table.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/table_builder.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/table_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/two_level_iterator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/table/two_level_iterator.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/arena.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/arena.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/arena_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/bloom.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/bloom_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/cache.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/cache_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/coding.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/coding.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/coding_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/comparator.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/crc32c.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/crc32c.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/crc32c_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env_posix.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/env_win.cc	/^namespace leveldb$/;"	n	file:
leveldb	leveldb/util/filter_policy.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/hash.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/hash.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/hash_test.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/histogram.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/histogram.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/logging.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/logging.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/mutexlock.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/options.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/posix_logger.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/random.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/status.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/testharness.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/testharness.h	/^namespace leveldb {$/;"	n
leveldb	leveldb/util/testutil.cc	/^namespace leveldb {$/;"	n	file:
leveldb	leveldb/util/testutil.h	/^namespace leveldb {$/;"	n
leveldb_approximate_sizes	leveldb/db/c.cc	/^void leveldb_approximate_sizes($/;"	f
leveldb_cache_create_lru	leveldb/db/c.cc	/^leveldb_cache_t* leveldb_cache_create_lru(size_t capacity) {$/;"	f
leveldb_cache_destroy	leveldb/db/c.cc	/^void leveldb_cache_destroy(leveldb_cache_t* cache) {$/;"	f
leveldb_cache_t	leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	s	file:
leveldb_cache_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_cache_t         leveldb_cache_t;$/;"	t	typeref:struct:leveldb_cache_t
leveldb_close	leveldb/db/c.cc	/^void leveldb_close(leveldb_t* db) {$/;"	f
leveldb_compact_range	leveldb/db/c.cc	/^void leveldb_compact_range($/;"	f
leveldb_comparator_create	leveldb/db/c.cc	/^leveldb_comparator_t* leveldb_comparator_create($/;"	f
leveldb_comparator_destroy	leveldb/db/c.cc	/^void leveldb_comparator_destroy(leveldb_comparator_t* cmp) {$/;"	f
leveldb_comparator_t	leveldb/db/c.cc	/^struct leveldb_comparator_t : public Comparator {$/;"	s	file:
leveldb_comparator_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_comparator_t    leveldb_comparator_t;$/;"	t	typeref:struct:leveldb_comparator_t
leveldb_create_default_env	leveldb/db/c.cc	/^leveldb_env_t* leveldb_create_default_env() {$/;"	f
leveldb_create_iterator	leveldb/db/c.cc	/^leveldb_iterator_t* leveldb_create_iterator($/;"	f
leveldb_create_snapshot	leveldb/db/c.cc	/^const leveldb_snapshot_t* leveldb_create_snapshot($/;"	f
leveldb_delete	leveldb/db/c.cc	/^void leveldb_delete($/;"	f
leveldb_destroy_db	leveldb/db/c.cc	/^void leveldb_destroy_db($/;"	f
leveldb_env_destroy	leveldb/db/c.cc	/^void leveldb_env_destroy(leveldb_env_t* env) {$/;"	f
leveldb_env_t	leveldb/db/c.cc	/^struct leveldb_env_t {$/;"	s	file:
leveldb_env_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_env_t           leveldb_env_t;$/;"	t	typeref:struct:leveldb_env_t
leveldb_error	leveldbwrapper.h	/^    leveldb_error(const std::string& msg) : std::runtime_error(msg) {}$/;"	f	class:leveldb_error
leveldb_error	leveldbwrapper.h	/^class leveldb_error : public std::runtime_error$/;"	c
leveldb_filelock_t	leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	s	file:
leveldb_filelock_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_filelock_t      leveldb_filelock_t;$/;"	t	typeref:struct:leveldb_filelock_t
leveldb_filterpolicy_create	leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create($/;"	f
leveldb_filterpolicy_create_bloom	leveldb/db/c.cc	/^leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int bits_per_key) {$/;"	f
leveldb_filterpolicy_destroy	leveldb/db/c.cc	/^void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t* filter) {$/;"	f
leveldb_filterpolicy_t	leveldb/db/c.cc	/^struct leveldb_filterpolicy_t : public FilterPolicy {$/;"	s	file:
leveldb_filterpolicy_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_filterpolicy_t  leveldb_filterpolicy_t;$/;"	t	typeref:struct:leveldb_filterpolicy_t
leveldb_free	leveldb/db/c.cc	/^void leveldb_free(void* ptr) {$/;"	f
leveldb_get	leveldb/db/c.cc	/^char* leveldb_get($/;"	f
leveldb_iter_destroy	leveldb/db/c.cc	/^void leveldb_iter_destroy(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_get_error	leveldb/db/c.cc	/^void leveldb_iter_get_error(const leveldb_iterator_t* iter, char** errptr) {$/;"	f
leveldb_iter_key	leveldb/db/c.cc	/^const char* leveldb_iter_key(const leveldb_iterator_t* iter, size_t* klen) {$/;"	f
leveldb_iter_next	leveldb/db/c.cc	/^void leveldb_iter_next(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_prev	leveldb/db/c.cc	/^void leveldb_iter_prev(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek	leveldb/db/c.cc	/^void leveldb_iter_seek(leveldb_iterator_t* iter, const char* k, size_t klen) {$/;"	f
leveldb_iter_seek_to_first	leveldb/db/c.cc	/^void leveldb_iter_seek_to_first(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_seek_to_last	leveldb/db/c.cc	/^void leveldb_iter_seek_to_last(leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_valid	leveldb/db/c.cc	/^unsigned char leveldb_iter_valid(const leveldb_iterator_t* iter) {$/;"	f
leveldb_iter_value	leveldb/db/c.cc	/^const char* leveldb_iter_value(const leveldb_iterator_t* iter, size_t* vlen) {$/;"	f
leveldb_iterator_t	leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	s	file:
leveldb_iterator_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_iterator_t      leveldb_iterator_t;$/;"	t	typeref:struct:leveldb_iterator_t
leveldb_libleveldb_a_AR	Makefile	/^leveldb_libleveldb_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libleveldb_a_CPPFLAGS	Makefile	/^leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)$/;"	m
leveldb_libleveldb_a_CXXFLAGS	Makefile	/^leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) $(LEVELDB_CXXFLAGS_INT)$/;"	m
leveldb_libleveldb_a_LIBADD	Makefile	/^leveldb_libleveldb_a_LIBADD =$/;"	m
leveldb_libleveldb_a_OBJECTS	Makefile	/^leveldb_libleveldb_a_OBJECTS = $(am_leveldb_libleveldb_a_OBJECTS)$/;"	m
leveldb_libleveldb_a_SOURCES	Makefile	/^leveldb_libleveldb_a_SOURCES =  \\$/;"	m
leveldb_libmemenv_a_AR	Makefile	/^leveldb_libmemenv_a_AR = $(AR) $(ARFLAGS)$/;"	m
leveldb_libmemenv_a_CPPFLAGS	Makefile	/^leveldb_libmemenv_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)$/;"	m
leveldb_libmemenv_a_CXXFLAGS	Makefile	/^leveldb_libmemenv_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)$/;"	m
leveldb_libmemenv_a_LIBADD	Makefile	/^leveldb_libmemenv_a_LIBADD =$/;"	m
leveldb_libmemenv_a_OBJECTS	Makefile	/^leveldb_libmemenv_a_OBJECTS = $(am_leveldb_libmemenv_a_OBJECTS)$/;"	m
leveldb_libmemenv_a_SOURCES	Makefile	/^leveldb_libmemenv_a_SOURCES =  \\$/;"	m
leveldb_logger_t	leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	s	file:
leveldb_logger_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_logger_t        leveldb_logger_t;$/;"	t	typeref:struct:leveldb_logger_t
leveldb_major_version	leveldb/db/c.cc	/^int leveldb_major_version() {$/;"	f
leveldb_minor_version	leveldb/db/c.cc	/^int leveldb_minor_version() {$/;"	f
leveldb_no_compression	leveldb/include/leveldb/c.h	/^  leveldb_no_compression = 0,$/;"	e	enum:__anon37
leveldb_open	leveldb/db/c.cc	/^leveldb_t* leveldb_open($/;"	f
leveldb_options_create	leveldb/db/c.cc	/^leveldb_options_t* leveldb_options_create() {$/;"	f
leveldb_options_destroy	leveldb/db/c.cc	/^void leveldb_options_destroy(leveldb_options_t* options) {$/;"	f
leveldb_options_set_block_restart_interval	leveldb/db/c.cc	/^void leveldb_options_set_block_restart_interval(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_block_size	leveldb/db/c.cc	/^void leveldb_options_set_block_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_set_cache	leveldb/db/c.cc	/^void leveldb_options_set_cache(leveldb_options_t* opt, leveldb_cache_t* c) {$/;"	f
leveldb_options_set_comparator	leveldb/db/c.cc	/^void leveldb_options_set_comparator($/;"	f
leveldb_options_set_compression	leveldb/db/c.cc	/^void leveldb_options_set_compression(leveldb_options_t* opt, int t) {$/;"	f
leveldb_options_set_create_if_missing	leveldb/db/c.cc	/^void leveldb_options_set_create_if_missing($/;"	f
leveldb_options_set_env	leveldb/db/c.cc	/^void leveldb_options_set_env(leveldb_options_t* opt, leveldb_env_t* env) {$/;"	f
leveldb_options_set_error_if_exists	leveldb/db/c.cc	/^void leveldb_options_set_error_if_exists($/;"	f
leveldb_options_set_filter_policy	leveldb/db/c.cc	/^void leveldb_options_set_filter_policy($/;"	f
leveldb_options_set_info_log	leveldb/db/c.cc	/^void leveldb_options_set_info_log(leveldb_options_t* opt, leveldb_logger_t* l) {$/;"	f
leveldb_options_set_max_open_files	leveldb/db/c.cc	/^void leveldb_options_set_max_open_files(leveldb_options_t* opt, int n) {$/;"	f
leveldb_options_set_paranoid_checks	leveldb/db/c.cc	/^void leveldb_options_set_paranoid_checks($/;"	f
leveldb_options_set_write_buffer_size	leveldb/db/c.cc	/^void leveldb_options_set_write_buffer_size(leveldb_options_t* opt, size_t s) {$/;"	f
leveldb_options_t	leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	s	file:
leveldb_options_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_options_t       leveldb_options_t;$/;"	t	typeref:struct:leveldb_options_t
leveldb_property_value	leveldb/db/c.cc	/^char* leveldb_property_value($/;"	f
leveldb_put	leveldb/db/c.cc	/^void leveldb_put($/;"	f
leveldb_randomfile_t	leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	s	file:
leveldb_randomfile_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_randomfile_t    leveldb_randomfile_t;$/;"	t	typeref:struct:leveldb_randomfile_t
leveldb_readoptions_create	leveldb/db/c.cc	/^leveldb_readoptions_t* leveldb_readoptions_create() {$/;"	f
leveldb_readoptions_destroy	leveldb/db/c.cc	/^void leveldb_readoptions_destroy(leveldb_readoptions_t* opt) {$/;"	f
leveldb_readoptions_set_fill_cache	leveldb/db/c.cc	/^void leveldb_readoptions_set_fill_cache($/;"	f
leveldb_readoptions_set_snapshot	leveldb/db/c.cc	/^void leveldb_readoptions_set_snapshot($/;"	f
leveldb_readoptions_set_verify_checksums	leveldb/db/c.cc	/^void leveldb_readoptions_set_verify_checksums($/;"	f
leveldb_readoptions_t	leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	s	file:
leveldb_readoptions_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_readoptions_t   leveldb_readoptions_t;$/;"	t	typeref:struct:leveldb_readoptions_t
leveldb_release_snapshot	leveldb/db/c.cc	/^void leveldb_release_snapshot($/;"	f
leveldb_repair_db	leveldb/db/c.cc	/^void leveldb_repair_db($/;"	f
leveldb_seqfile_t	leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	s	file:
leveldb_seqfile_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_seqfile_t       leveldb_seqfile_t;$/;"	t	typeref:struct:leveldb_seqfile_t
leveldb_snappy_compression	leveldb/include/leveldb/c.h	/^  leveldb_snappy_compression = 1$/;"	e	enum:__anon37
leveldb_snapshot_t	leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	s	file:
leveldb_snapshot_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_snapshot_t      leveldb_snapshot_t;$/;"	t	typeref:struct:leveldb_snapshot_t
leveldb_t	leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	s	file:
leveldb_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_t               leveldb_t;$/;"	t	typeref:struct:leveldb_t
leveldb_writablefile_t	leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	s	file:
leveldb_writablefile_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_writablefile_t  leveldb_writablefile_t;$/;"	t	typeref:struct:leveldb_writablefile_t
leveldb_write	leveldb/db/c.cc	/^void leveldb_write($/;"	f
leveldb_writebatch_clear	leveldb/db/c.cc	/^void leveldb_writebatch_clear(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_create	leveldb/db/c.cc	/^leveldb_writebatch_t* leveldb_writebatch_create() {$/;"	f
leveldb_writebatch_delete	leveldb/db/c.cc	/^void leveldb_writebatch_delete($/;"	f
leveldb_writebatch_destroy	leveldb/db/c.cc	/^void leveldb_writebatch_destroy(leveldb_writebatch_t* b) {$/;"	f
leveldb_writebatch_iterate	leveldb/db/c.cc	/^void leveldb_writebatch_iterate($/;"	f
leveldb_writebatch_put	leveldb/db/c.cc	/^void leveldb_writebatch_put($/;"	f
leveldb_writebatch_t	leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	s	file:
leveldb_writebatch_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_writebatch_t    leveldb_writebatch_t;$/;"	t	typeref:struct:leveldb_writebatch_t
leveldb_writeoptions_create	leveldb/db/c.cc	/^leveldb_writeoptions_t* leveldb_writeoptions_create() {$/;"	f
leveldb_writeoptions_destroy	leveldb/db/c.cc	/^void leveldb_writeoptions_destroy(leveldb_writeoptions_t* opt) {$/;"	f
leveldb_writeoptions_set_sync	leveldb/db/c.cc	/^void leveldb_writeoptions_set_sync($/;"	f
leveldb_writeoptions_t	leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	s	file:
leveldb_writeoptions_t	leveldb/include/leveldb/c.h	/^typedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;$/;"	t	typeref:struct:leveldb_writeoptions_t
levels_	leveldb/db/version_set.cc	/^  LevelState levels_[config::kNumLevels];$/;"	m	class:leveldb::VersionSet::Builder	file:
lib_LTLIBRARIES	Makefile	/^lib_LTLIBRARIES = libbitcoinconsensus.la$/;"	m
lib_LTLIBRARIES	secp256k1/Makefile	/^lib_LTLIBRARIES = libsecp256k1.la$/;"	m
libbitcoin_cli_a_AR	Makefile	/^libbitcoin_cli_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_cli_a_CPPFLAGS	Makefile	/^libbitcoin_cli_a_CPPFLAGS = $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_cli_a_LIBADD	Makefile	/^libbitcoin_cli_a_LIBADD =$/;"	m
libbitcoin_cli_a_OBJECTS	Makefile	/^libbitcoin_cli_a_OBJECTS = $(am_libbitcoin_cli_a_OBJECTS)$/;"	m
libbitcoin_cli_a_SOURCES	Makefile	/^libbitcoin_cli_a_SOURCES = \\$/;"	m
libbitcoin_common_a_AR	Makefile	/^libbitcoin_common_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_common_a_CPPFLAGS	Makefile	/^libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_common_a_LIBADD	Makefile	/^libbitcoin_common_a_LIBADD =$/;"	m
libbitcoin_common_a_OBJECTS	Makefile	/^libbitcoin_common_a_OBJECTS = $(am_libbitcoin_common_a_OBJECTS)$/;"	m
libbitcoin_common_a_SOURCES	Makefile	/^libbitcoin_common_a_SOURCES = \\$/;"	m
libbitcoin_server_a_AR	Makefile	/^libbitcoin_server_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_server_a_CPPFLAGS	Makefile	/^libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)$/;"	m
libbitcoin_server_a_LIBADD	Makefile	/^libbitcoin_server_a_LIBADD =$/;"	m
libbitcoin_server_a_OBJECTS	Makefile	/^libbitcoin_server_a_OBJECTS = $(am_libbitcoin_server_a_OBJECTS)$/;"	m
libbitcoin_server_a_SOURCES	Makefile	/^libbitcoin_server_a_SOURCES = \\$/;"	m
libbitcoin_util_a_AR	Makefile	/^libbitcoin_util_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_util_a_CPPFLAGS	Makefile	/^libbitcoin_util_a_CPPFLAGS = $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_util_a_LIBADD	Makefile	/^libbitcoin_util_a_LIBADD =$/;"	m
libbitcoin_util_a_OBJECTS	Makefile	/^libbitcoin_util_a_OBJECTS = $(am_libbitcoin_util_a_OBJECTS) \\$/;"	m
libbitcoin_util_a_SOURCES	Makefile	/^libbitcoin_util_a_SOURCES = support\/pagelocker.cpp chainparamsbase.cpp \\$/;"	m
libbitcoin_wallet_a_AR	Makefile	/^libbitcoin_wallet_a_AR = $(AR) $(ARFLAGS)$/;"	m
libbitcoin_wallet_a_CPPFLAGS	Makefile	/^libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)$/;"	m
libbitcoin_wallet_a_LIBADD	Makefile	/^libbitcoin_wallet_a_LIBADD =$/;"	m
libbitcoin_wallet_a_OBJECTS	Makefile	/^libbitcoin_wallet_a_OBJECTS = $(am_libbitcoin_wallet_a_OBJECTS)$/;"	m
libbitcoin_wallet_a_SOURCES	Makefile	/^libbitcoin_wallet_a_SOURCES = \\$/;"	m
libbitcoinconsensus_la_CPPFLAGS	Makefile	/^libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)\/obj -DBUILD_BITCOIN_INTERNAL$/;"	m
libbitcoinconsensus_la_DEPENDENCIES	Makefile	/^libbitcoinconsensus_la_DEPENDENCIES =  \\$/;"	m
libbitcoinconsensus_la_LDFLAGS	Makefile	/^libbitcoinconsensus_la_LDFLAGS = -no-undefined $(RELDFLAGS)$/;"	m
libbitcoinconsensus_la_LIBADD	Makefile	/^libbitcoinconsensus_la_LIBADD = $(CRYPTO_LIBS)$/;"	m
libbitcoinconsensus_la_LINK	Makefile	/^libbitcoinconsensus_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libbitcoinconsensus_la_OBJECTS	Makefile	/^libbitcoinconsensus_la_OBJECTS = $(am_libbitcoinconsensus_la_OBJECTS)$/;"	m
libbitcoinconsensus_la_SOURCES	Makefile	/^libbitcoinconsensus_la_SOURCES =  \\$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	secp256k1/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	secp256k1/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libsecp256k1_la_CPPFLAGS	secp256k1/Makefile	/^libsecp256k1_la_CPPFLAGS = -I$(top_srcdir)\/include $(SECP_INCLUDES)$/;"	m
libsecp256k1_la_DEPENDENCIES	secp256k1/Makefile	/^libsecp256k1_la_DEPENDENCIES = $(am__DEPENDENCIES_1)$/;"	m
libsecp256k1_la_LIBADD	secp256k1/Makefile	/^libsecp256k1_la_LIBADD = $(SECP_LIBS)$/;"	m
libsecp256k1_la_OBJECTS	secp256k1/Makefile	/^libsecp256k1_la_OBJECTS = $(am_libsecp256k1_la_OBJECTS)$/;"	m
libsecp256k1_la_SOURCES	secp256k1/Makefile	/^libsecp256k1_la_SOURCES = src\/secp256k1.c$/;"	m
license_amount_	test/test_bitcoin.h	/^    int64_t color_admin_amount_, license_amount_;$/;"	m	class:CWallet_UnitTest
license_hash	test/handler_license.cpp	/^    uint256 license_hash, transfer_hash, out_hash;$/;"	m	struct:TransferLicenseHandlerCheckValidFixture	file:
license_hash	test/handler_license.cpp	/^    uint256 mint_admin_hash, license_hash, out_hash;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
limbs	secp256k1/src/num_gmp.h	/^    int limbs;$/;"	m	struct:__anon74
limit	leveldb/include/leveldb/db.h	/^  Slice limit;          \/\/ Not included in the range$/;"	m	struct:leveldb::Range
limitedmap	limitedmap.h	/^    limitedmap(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }$/;"	f	class:limitedmap
limitedmap	limitedmap.h	/^class limitedmap$/;"	c
limiter_	leveldb/util/env_posix.cc	/^  MmapLimiter* limiter_;$/;"	m	class:leveldb::__anon42::PosixMmapReadableFile	file:
line_	json/json_spirit_error_position.h	/^        unsigned int line_;$/;"	m	struct:json_spirit::Error_position
line_	leveldb/util/testharness.h	/^  int line_;$/;"	m	class:leveldb::test::Tester
list_	leveldb/db/skiplist.h	/^    const SkipList* list_;$/;"	m	class:leveldb::SkipList::Iterator
list_	leveldb/db/skiplist_test.cc	/^  SkipList<Key, Comparator> list_;$/;"	m	class:leveldb::ConcurrentTest	file:
list_	leveldb/db/snapshot.h	/^  SnapshotImpl list_;$/;"	m	class:leveldb::SnapshotList
list_	leveldb/db/snapshot.h	/^  SnapshotList* list_;                 \/\/ just for sanity checks$/;"	m	class:leveldb::SnapshotImpl
list_	leveldb/util/cache.cc	/^  LRUHandle** list_;$/;"	m	class:leveldb::__anon39::HandleTable	file:
listaccounts	wallet/rpcwallet.cpp	/^Value listaccounts(const Array& params, bool fHelp)$/;"	f
listaddressgroupings	wallet/rpcwallet.cpp	/^Value listaddressgroupings(const Array& params, bool fHelp)$/;"	f
listlockunspent	wallet/rpcwallet.cpp	/^Value listlockunspent(const Array& params, bool fHelp)$/;"	f
listonewalletaddress	wallet/rpcwallet.cpp	/^Value listonewalletaddress(const Array& params, bool fHelp)$/;"	f
listreceivedbyaccount	wallet/rpcwallet.cpp	/^Value listreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
listreceivedbyaddress	wallet/rpcwallet.cpp	/^Value listreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
listsinceblock	wallet/rpcwallet.cpp	/^Value listsinceblock(const Array& params, bool fHelp)$/;"	f
listtransactions	wallet/rpcwallet.cpp	/^Value listtransactions(const Array& params, bool fHelp)$/;"	f
listunspent	rpcrawtransaction.cpp	/^Value listunspent(const Array& params, bool fHelp)$/;"	f
listwalletaddress	wallet/rpcwallet.cpp	/^Value listwalletaddress(const Array& params, bool fHelp)$/;"	f
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	secp256k1/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	secp256k1/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	sync.h	/^    boost::unique_lock<Mutex> lock;$/;"	m	class:CMutexLock
locked_files_	leveldb/util/env_posix.cc	/^  std::set<std::string> locked_files_;$/;"	m	class:leveldb::__anon42::PosixLockTable	file:
locker	support/pagelocker.h	/^    Locker locker;$/;"	m	class:LockedPageManagerBase
locking_callback	util.cpp	/^void locking_callback(int mode, int i, const char* file, int line)$/;"	f
lockorders	sync.cpp	/^static std::map<std::pair<void*, void*>, LockStack> lockorders;$/;"	v	file:
locks_	leveldb/util/env_posix.cc	/^  PosixLockTable locks_;$/;"	m	class:leveldb::__anon42::PosixEnv	file:
lockstack	sync.cpp	/^static boost::thread_specific_ptr<LockStack> lockstack;$/;"	v	file:
lockunspent	wallet/rpcwallet.cpp	/^Value lockunspent(const Array& params, bool fHelp)$/;"	f
log	leveldb/db/log_format.h	/^namespace log {$/;"	n	namespace:leveldb
log	leveldb/db/log_reader.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	leveldb/db/log_reader.h	/^namespace log {$/;"	n	namespace:leveldb
log	leveldb/db/log_test.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	leveldb/db/log_writer.cc	/^namespace log {$/;"	n	namespace:leveldb	file:
log	leveldb/db/log_writer.h	/^namespace log {$/;"	n	namespace:leveldb
log	leveldb/db/version_set.h	/^namespace log { class Writer; }$/;"	n	namespace:leveldb
log_	leveldb/db/db_impl.h	/^  log::Writer* log_;$/;"	m	class:leveldb::DBImpl
log_number_	leveldb/db/version_edit.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionEdit
log_number_	leveldb/db/version_set.h	/^  uint64_t log_number_;$/;"	m	class:leveldb::VersionSet
logfile_	leveldb/db/db_impl.h	/^  WritableFile* logfile_;$/;"	m	class:leveldb::DBImpl
logfile_number_	leveldb/db/db_impl.h	/^  uint64_t logfile_number_;$/;"	m	class:leveldb::DBImpl
logs_	leveldb/db/repair.cc	/^  std::vector<uint64_t> logs_;$/;"	m	class:leveldb::__anon17::Repairer	file:
lookup	txmempool.cpp	/^bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const$/;"	f	class:CTxMemPool
lru_	leveldb/util/cache.cc	/^  LRUHandle lru_;$/;"	m	class:leveldb::__anon39::LRUCache	file:
mArray	json/json_spirit_value.h	/^    typedef mConfig::Array_type  mArray;$/;"	t	namespace:json_spirit
mConfig	json/json_spirit_value.h	/^    typedef Config_map< std::string > mConfig;$/;"	t	namespace:json_spirit
mObject	json/json_spirit_value.h	/^    typedef mConfig::Object_type mObject;$/;"	t	namespace:json_spirit
mValue	json/json_spirit_value.h	/^    typedef mConfig::Value_type  mValue;$/;"	t	namespace:json_spirit
m_data	script/bitcoinconsensus.cpp	/^    const unsigned char* m_data;$/;"	m	class:__anon90::TxInputStream	file:
m_extraFlags	tinyformat.h	/^        unsigned int m_extraFlags;$/;"	m	class:tinyformat::detail::FormatIterator
m_fmt	tinyformat.h	/^        const char* m_fmt;$/;"	m	class:tinyformat::detail::FormatIterator
m_origFill	tinyformat.h	/^        char m_origFill;$/;"	m	class:tinyformat::detail::FormatIterator
m_origFlags	tinyformat.h	/^        std::ios::fmtflags m_origFlags;$/;"	m	class:tinyformat::detail::FormatIterator
m_origPrecision	tinyformat.h	/^        std::streamsize m_origPrecision;$/;"	m	class:tinyformat::detail::FormatIterator
m_origWidth	tinyformat.h	/^        std::streamsize m_origWidth;$/;"	m	class:tinyformat::detail::FormatIterator
m_out	tinyformat.h	/^        std::ostream& m_out;$/;"	m	class:tinyformat::detail::FormatIterator
m_remaining	script/bitcoinconsensus.cpp	/^    size_t m_remaining;$/;"	m	class:__anon90::TxInputStream	file:
m_type	script/bitcoinconsensus.cpp	/^    const int m_type;$/;"	m	class:__anon90::TxInputStream	file:
m_value	script/script.h	/^    int64_t m_value;$/;"	m	class:CScriptNum
m_variablePrecision	tinyformat.h	/^        int m_variablePrecision;$/;"	m	class:tinyformat::detail::FormatIterator
m_variableWidth	tinyformat.h	/^        int m_variableWidth;$/;"	m	class:tinyformat::detail::FormatIterator
m_version	script/bitcoinconsensus.cpp	/^    const int m_version;$/;"	m	class:__anon90::TxInputStream	file:
m_wantPrecision	tinyformat.h	/^        bool m_wantPrecision;$/;"	m	class:tinyformat::detail::FormatIterator
m_wantWidth	tinyformat.h	/^        bool m_wantWidth;$/;"	m	class:tinyformat::detail::FormatIterator
magnitude	secp256k1/src/field_10x26.h	/^    int magnitude;$/;"	m	struct:__anon64
magnitude	secp256k1/src/field_5x52.h	/^    int magnitude;$/;"	m	struct:__anon75
main	bitcoin-cli.cpp	/^int main(int argc, char* argv[])$/;"	f
main	bitcoind.cpp	/^int main(int argc, char* argv[])$/;"	f
main	leveldb/db/autocompact_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/corruption_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/db_bench.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/db_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/dbformat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/filename_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/leveldb_main.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/log_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/skiplist_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/version_edit_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/version_set_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/db/write_batch_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/doc/bench/db_bench_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/doc/bench/db_bench_tree_db.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/helpers/memenv/memenv_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/issues/issue178_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/issues/issue200_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/table/filter_block_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/table/table_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/arena_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/bloom_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/cache_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/coding_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/crc32c_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/env_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	leveldb/util/hash_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	secp256k1/build-aux/config.guess	/^		main()$/;"	f
main	secp256k1/build-aux/config.guess	/^	main ()$/;"	f
main	secp256k1/build-aux/config.guess	/^main ()$/;"	f
main	secp256k1/src/bench_internal.c	/^int main(int argc, char **argv) {$/;"	f
main	secp256k1/src/bench_recover.c	/^int main(void) {$/;"	f
main	secp256k1/src/bench_sign.c	/^int main(void) {$/;"	f
main	secp256k1/src/bench_verify.c	/^int main(void) {$/;"	f
main	secp256k1/src/tests.c	/^int main(int argc, char **argv) {$/;"	f
main	univalue/gen.cpp	/^int main (int argc, char *argv[])$/;"	f
mainParams	chainparams.cpp	/^static CMainParams mainParams;$/;"	v	file:
mainParams	chainparamsbase.cpp	/^static CBaseMainParams mainParams;$/;"	v	file:
make_dummy_depfile	secp256k1/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	secp256k1/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
manifest_file_number_	leveldb/db/version_set.h	/^  uint64_t manifest_file_number_;$/;"	m	class:leveldb::VersionSet
manifest_sync_error_	leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_sync_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifest_write_error_	leveldb/db/db_test.cc	/^  port::AtomicPointer manifest_write_error_;$/;"	m	class:leveldb::SpecialEnv	file:
manifests_	leveldb/db/repair.cc	/^  std::vector<std::string> manifests_;$/;"	m	class:leveldb::__anon17::Repairer	file:
manual_compaction_	leveldb/db/db_impl.h	/^  ManualCompaction* manual_compaction_;$/;"	m	class:leveldb::DBImpl
map	limitedmap.h	/^    std::map<K, V> map;$/;"	m	class:limitedmap
mapAddr	addrman.h	/^    std::map<CNetAddr, int> mapAddr;$/;"	m	class:CAddrMan
mapAddressBook	wallet/wallet.h	/^    std::map<CTxDestination, CAddressBookData> mapAddressBook;$/;"	m	class:CWallet
mapAlerts	alert.cpp	/^std::map<uint256, CAlert> mapAlerts;$/;"	v
mapArgs	util.cpp	/^map<std::string, std::string> mapArgs;$/;"	v
mapAskFor	net.h	/^    std::multimap<int64_t, CInv> mapAskFor;$/;"	m	class:CNode
mapBlockIndex	main.cpp	/^BlockMap mapBlockIndex;$/;"	v
mapBlockSource	main.cpp	/^    map<uint256, NodeId> mapBlockSource;$/;"	m	namespace:__anon46	file:
mapBlocksInFlight	main.cpp	/^    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;$/;"	m	namespace:__anon46	file:
mapBlocksUnlinked	main.cpp	/^    multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;$/;"	m	namespace:__anon46	file:
mapChains	wallet/hdkeystore.h	/^    std::map<HDChainID, CHDChain> mapChains; \/\/all available chains$/;"	m	class:CHDKeyStore
mapCheckpoints	checkpoints.h	/^    MapCheckpoints mapCheckpoints;$/;"	m	struct:Checkpoints::CCheckpointData
mapCommands	rpcserver.h	/^    std::map<std::string, const CRPCCommand*> mapCommands;$/;"	m	class:CRPCTable
mapCryptedKeys	wallet/crypter.h	/^    CryptedKeyMap mapCryptedKeys;$/;"	m	class:CCryptoKeyStore
mapDb	wallet/db.h	/^    std::map<std::string, Db*> mapDb;$/;"	m	class:CDBEnv
mapDeltas	txmempool.h	/^    std::map<uint256, std::pair<double, CAmount> > mapDeltas;$/;"	m	class:CTxMemPool
mapFileUseCount	wallet/db.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:CDBEnv
mapFlagNames	test/transaction_tests.cpp	/^static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of$/;"	v	file:
mapHDCryptedMasterSeeds	wallet/hdkeystore.h	/^    std::map<HDChainID, std::vector<unsigned char> > mapHDCryptedMasterSeeds;$/;"	m	class:CHDKeyStore
mapHDMasterSeeds	wallet/hdkeystore.h	/^    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; \/\/master seeds are stored outside of CHDChain (crypto)$/;"	m	class:CHDKeyStore
mapHDPubKeys	wallet/hdkeystore.h	/^    std::map<CKeyID, CHDPubKey> mapHDPubKeys; \/\/all hd pubkeys of all chains$/;"	m	class:CHDKeyStore
mapInfo	addrman.h	/^    std::map<int, CAddrInfo> mapInfo;$/;"	m	class:CAddrMan
mapKeyMetadata	wallet/wallet.h	/^    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;$/;"	m	class:CWallet
mapKeys	keystore.h	/^    KeyMap mapKeys;$/;"	m	class:CBasicKeyStore
mapLocalHost	net.cpp	/^map<CNetAddr, LocalServiceInfo> mapLocalHost;$/;"	v
mapMasterKeys	wallet/wallet.h	/^    MasterKeyMap mapMasterKeys;$/;"	m	class:CWallet
mapMemPoolTxs	policy/fees.h	/^    std::map<uint256, TxStatsInfo> mapMemPoolTxs;$/;"	m	class:CBlockPolicyEstimator
mapMultiArgs	util.cpp	/^map<std::string, vector<std::string> > mapMultiArgs;$/;"	v
mapNextTx	txmempool.h	/^    std::map<COutPoint, CInPoint> mapNextTx;$/;"	m	class:CTxMemPool
mapNodeState	main.cpp	/^map<NodeId, CNodeState> mapNodeState;$/;"	m	namespace:__anon47	file:
mapOrphanBlocks	main.cpp	/^map<uint256, COrphanBlock*> mapOrphanBlocks;$/;"	v
mapOrphanBlocksByPrev	main.cpp	/^multimap<uint256, COrphanBlock*> mapOrphanBlocksByPrev;$/;"	v
mapOrphanTransactions	main.cpp	/^map<uint256, COrphanTx> mapOrphanTransactions;$/;"	v
mapOrphanTransactionsByPrev	main.cpp	/^map<uint256, set<uint256> > mapOrphanTransactionsByPrev;$/;"	v
mapRelay	net.cpp	/^map<CInv, CDataStream> mapRelay;$/;"	v
mapRequestCount	wallet/wallet.h	/^    std::map<uint256, int> mapRequestCount;$/;"	m	class:CWallet
mapScripts	keystore.h	/^    ScriptMap mapScripts;$/;"	m	class:CBasicKeyStore
mapTotalAmount	coins.h	/^    std::map<type_Color, CAmount> mapTotalAmount;$/;"	m	struct:CCoinsStats
mapTx	txmempool.h	/^    std::map<uint256, CTxMemPoolEntry> mapTx;$/;"	m	class:CTxMemPool
mapTxSpends	wallet/wallet.h	/^    TxSpends mapTxSpends;$/;"	m	class:CWallet
mapValue	wallet/wallet.h	/^    mapValue_t mapValue;$/;"	m	class:CAccountingEntry
mapValue	wallet/wallet.h	/^    mapValue_t mapValue;$/;"	m	class:CWalletTx
mapValue_t	wallet/wallet.h	/^typedef std::map<std::string, std::string> mapValue_t;$/;"	t
mapWallet	wallet/wallet.h	/^    std::map<uint256, CWalletTx> mapWallet;$/;"	m	class:CWallet
mapWalletAddr	wallet/wallet.h	/^    std::map<std::string, std::set<std::pair<uint256, unsigned int> > > mapWalletAddr;$/;"	m	class:CWallet
map_	leveldb/db/db_test.cc	/^    KVMap map_;$/;"	m	class:leveldb::ModelDB::ModelSnapshot	file:
map_	leveldb/db/db_test.cc	/^    const KVMap* const map_;$/;"	m	class:leveldb::ModelDB::ModelIter	file:
map_	leveldb/db/db_test.cc	/^  KVMap map_;$/;"	m	class:leveldb::ModelDB	file:
map_	test/coins_tests.cpp	/^    std::map<uint256, CCoins> map_;$/;"	m	class:__anon93::CCoinsViewTest	file:
map_to_obj	json/json_spirit_utils.h	/^    void map_to_obj( const Map_t& mp_obj, Obj_t& obj )$/;"	f	namespace:json_spirit
map_values_equal	test/test_bitcoin.h	/^    inline bool map_values_equal() const$/;"	f	class:CWallet_UnitTest
map_values_equal_	test/test_bitcoin.h	/^    bool map_values_equal_;$/;"	m	class:CWallet_UnitTest
mapped_type	limitedmap.h	/^    typedef V mapped_type;$/;"	t	class:limitedmap
match	wallet/rpcwallet.cpp	/^Value match(const Array& params, bool fHelp)$/;"	f
max	leveldb/util/env_win.cc	26;"	d	file:
maxTxFee	wallet/wallet.cpp	/^CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;$/;"	v
max_	leveldb/util/histogram.h	/^  double max_;$/;"	m	class:leveldb::Histogram
max_height_	leveldb/db/skiplist.h	/^  port::AtomicPointer max_height_;   \/\/ Height of the entire list$/;"	m	class:leveldb::SkipList
max_open_files	leveldb/include/leveldb/options.h	/^  int max_open_files;$/;"	m	struct:leveldb::Options
max_output_file_size_	leveldb/db/version_set.h	/^  uint64_t max_output_file_size_;$/;"	m	class:leveldb::Compaction
max_sequence	leveldb/db/repair.cc	/^    SequenceNumber max_sequence;$/;"	m	struct:leveldb::__anon17::Repairer::TableInfo	file:
max_size	limitedmap.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:limitedmap
max_size	limitedmap.h	/^    size_type max_size(size_type s)$/;"	f	class:limitedmap
max_size	mruset.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:mruset
median	timedata.h	/^    T median() const$/;"	f	class:CMedianFilter
mem	leveldb/db/db_impl.cc	/^  MemTable* mem;$/;"	m	struct:leveldb::__anon14::IterState	file:
mem_	leveldb/db/db_impl.h	/^  MemTable* mem_;$/;"	m	class:leveldb::DBImpl
mem_	leveldb/db/write_batch.cc	/^  MemTable* mem_;$/;"	m	class:leveldb::__anon16::MemTableInserter	file:
member	test/handler_license.cpp	/^    std::string member, issuer;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
member	test/handler_normal.cpp	/^    std::string member, receiver;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
member_hash	test/handler_normal.cpp	/^    uint256 in_hash, member_hash, out_hash;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
members	rpcclient.cpp	/^    std::set<std::pair<std::string, int> > members;$/;"	m	class:CRPCConvertTable	file:
members_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
memcpy	compat/glibc_compat.cpp	/^extern "C" void* memcpy(void* a, const void* b, size_t c)$/;"	f
memcpy_int	compat/glibc_sanity.cpp	/^void* memcpy_int(void* a, const void* b, size_t c)$/;"	f
memory_cleanse	support/cleanse.cpp	/^void memory_cleanse(void *ptr, size_t len)$/;"	f
mempool	txmempool.h	/^    CTxMemPool &mempool;$/;"	m	class:CCoinsViewMemPool
memtable_	leveldb/table/table_test.cc	/^  MemTable* memtable_;$/;"	m	class:leveldb::MemTableConstructor	file:
memtable_key	leveldb/db/dbformat.h	/^  Slice memtable_key() const { return Slice(start_, end_ - start_); }$/;"	f	class:leveldb::LookupKey
memusage	memusage.h	/^namespace memusage$/;"	n
mergetx	wallet/rpcwallet.cpp	/^Value mergetx(const Array& params, bool fHelp)$/;"	f
message	rest.cpp	/^    string message;$/;"	m	class:RestErr	file:
messageHandlerCondition	net.cpp	/^boost::condition_variable messageHandlerCondition;$/;"	v
message_	leveldb/db/db_bench.cc	/^  std::string message_;$/;"	m	class:leveldb::__anon15::Stats	file:
message_	leveldb/db/log_test.cc	/^    std::string message_;$/;"	m	class:leveldb::log::LogTest::ReportCollector	file:
message_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
message_	leveldb/doc/bench/db_bench_tree_db.cc	/^  std::string message_;$/;"	m	class:leveldb::Benchmark	file:
meta	leveldb/db/repair.cc	/^    FileMetaData meta;$/;"	m	struct:leveldb::__anon17::Repairer::TableInfo	file:
metadataHash	policy/licenseinfo.h	/^    uint256 metadataHash;$/;"	m	class:CLicenseInfo
metadataLink	policy/licenseinfo.h	/^    string metadataLink;$/;"	m	class:CLicenseInfo
metaindex_handle	leveldb/table/format.h	/^  const BlockHandle& metaindex_handle() const { return metaindex_handle_; }$/;"	f	class:leveldb::Footer
metaindex_handle	leveldb/table/table.cc	/^  BlockHandle metaindex_handle;  \/\/ Handle to metaindex_block: saved from footer$/;"	m	struct:leveldb::Table::Rep	file:
metaindex_handle_	leveldb/table/format.h	/^  BlockHandle metaindex_handle_;$/;"	m	class:leveldb::Footer
method	leveldb/db/db_bench.cc	/^    void (Benchmark::*method)(ThreadState*);$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
methodName	rpcclient.cpp	/^    std::string methodName;            \/\/! method whose params want conversion$/;"	m	class:CRPCConvertParam	file:
microTask	test/scheduler_tests.cpp	/^static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, boost::chrono::system_clock::time_point rescheduleTime)$/;"	f	file:
micros	leveldb/db/db_impl.h	/^    int64_t micros;$/;"	m	struct:leveldb::DBImpl::CompactionStats
minRelayTxFee	main.cpp	/^CFeeRate minRelayTxFee = CFeeRate(1000);$/;"	v
minTrackedFee	policy/fees.h	/^    CFeeRate minTrackedFee; \/\/! Passed to constructor to avoid dependency on main$/;"	m	class:CBlockPolicyEstimator
minTrackedPriority	policy/fees.h	/^    double minTrackedPriority; \/\/! Set to AllowFreeThreshold$/;"	m	class:CBlockPolicyEstimator
minTxFee	wallet/wallet.cpp	/^CFeeRate CWallet::minTxFee = CFeeRate(1000);$/;"	m	class:CWallet	file:
minTxFee	wallet/wallet.h	/^    static CFeeRate minTxFee;$/;"	m	class:CWallet
min_	leveldb/util/histogram.h	/^  double min_;$/;"	m	class:leveldb::Histogram
mine	rpcmisc.cpp	/^    isminetype mine;$/;"	m	class:DescribeAddressVisitor	file:
minerPolicyEstimator	txmempool.h	/^    CBlockPolicyEstimator* minerPolicyEstimator;$/;"	m	class:CTxMemPool
mint	wallet/rpcwallet.cpp	/^Value mint(const Array& params, bool fHelp)$/;"	f
mintSchedule	policy/licenseinfo.h	/^    int mintSchedule;$/;"	m	class:CLicenseInfo
mint_admin_hash	test/handler_license.cpp	/^    uint256 mint_admin_hash, license_hash, out_hash;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
mintadmin	wallet/rpcwallet.cpp	/^Value mintadmin(const Array& params, bool fHelp)$/;"	f
misc_	test/test_bitcoin.h	/^    std::string misc_;$/;"	m	class:CWallet_UnitTest
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	secp256k1/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	secp256k1/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmap_limit_	leveldb/util/env_posix.cc	/^  MmapLimiter mmap_limit_;$/;"	m	class:leveldb::__anon42::PosixEnv	file:
mmapped_region_	leveldb/util/env_posix.cc	/^  void* mmapped_region_;$/;"	m	class:leveldb::__anon42::PosixMmapReadableFile	file:
mode	consensus/validation.h	/^    } mode;$/;"	m	class:CValidationState	typeref:enum:CValidationState::mode_state
mode_state	consensus/validation.h	/^    enum mode_state {$/;"	g	class:CValidationState
movecmd	wallet/rpcwallet.cpp	/^Value movecmd(const Array& params, bool fHelp)$/;"	f
mruset	mruset.h	/^    mruset(size_type nMaxSizeIn = 1) : nMaxSize(nMaxSizeIn) { clear(); }$/;"	f	class:mruset
mruset	mruset.h	/^class mruset$/;"	c
msg	secp256k1/src/bench_recover.c	/^    unsigned char msg[32];$/;"	m	struct:__anon83	file:
msg	secp256k1/src/bench_sign.c	/^    unsigned char msg[32];$/;"	m	struct:__anon67	file:
msg	secp256k1/src/bench_verify.c	/^    unsigned char msg[32];$/;"	m	struct:__anon66	file:
msgIndent	util.cpp	/^static const int msgIndent = 7;$/;"	v	file:
mu	leveldb/db/db_bench.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::__anon15::SharedState	file:
mu	leveldb/db/db_impl.cc	/^  port::Mutex* mu;$/;"	m	struct:leveldb::__anon14::IterState	file:
mu	leveldb/util/env_test.cc	/^  port::Mutex mu;$/;"	m	struct:leveldb::State	file:
mu_	leveldb/db/db_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon18::AtomicCounter	file:
mu_	leveldb/db/skiplist_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::TestState	file:
mu_	leveldb/port/port_posix.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	leveldb/port/port_posix.h	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::port::Mutex
mu_	leveldb/port/port_win.h	/^  Mutex* mu_;$/;"	m	class:leveldb::port::CondVar
mu_	leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon42::MmapLimiter	file:
mu_	leveldb/util/env_posix.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::__anon42::PosixLockTable	file:
mu_	leveldb/util/env_posix.cc	/^  pthread_mutex_t mu_;$/;"	m	class:leveldb::__anon42::PosixEnv	file:
mu_	leveldb/util/env_test.cc	/^  port::Mutex mu_;$/;"	m	class:leveldb::EnvPosixTest	file:
mu_	leveldb/util/mutexlock.h	/^  port::Mutex *const mu_;$/;"	m	class:leveldb::MutexLock::port
muladd	secp256k1/src/scalar_4x64_impl.h	170;"	d
muladd	secp256k1/src/scalar_4x64_impl.h	868;"	d
muladd	secp256k1/src/scalar_8x32_impl.h	240;"	d
muladd	secp256k1/src/scalar_8x32_impl.h	615;"	d
muladd2	secp256k1/src/scalar_4x64_impl.h	199;"	d
muladd2	secp256k1/src/scalar_4x64_impl.h	870;"	d
muladd2	secp256k1/src/scalar_8x32_impl.h	269;"	d
muladd2	secp256k1/src/scalar_8x32_impl.h	617;"	d
muladd_fast	secp256k1/src/scalar_4x64_impl.h	185;"	d
muladd_fast	secp256k1/src/scalar_4x64_impl.h	869;"	d
muladd_fast	secp256k1/src/scalar_8x32_impl.h	255;"	d
muladd_fast	secp256k1/src/scalar_8x32_impl.h	616;"	d
mutex	checkqueue.h	/^    boost::mutex mutex;$/;"	m	class:CCheckQueue
mutex	support/pagelocker.h	/^    boost::mutex mutex;$/;"	m	class:LockedPageManagerBase
mutex	sync.h	/^    boost::mutex mutex;$/;"	m	class:CSemaphore
mutexDebugLog	util.cpp	/^static boost::mutex* mutexDebugLog = NULL;$/;"	v	file:
mutexName	sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
mutex_	leveldb/db/db_impl.h	/^  port::Mutex mutex_;$/;"	m	class:leveldb::DBImpl
mutex_	leveldb/helpers/memenv/memenv.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon26::InMemoryEnv	file:
mutex_	leveldb/port/port_win.h	/^    Mutex mutex_;$/;"	m	class:leveldb::port::OnceType
mutex_	leveldb/util/cache.cc	/^  port::Mutex mutex_;$/;"	m	class:leveldb::__anon39::LRUCache	file:
n	primitives/transaction.h	/^    uint32_t n;$/;"	m	class:COutPoint
n	secp256k1/src/field_10x26.h	/^    uint32_t n[10];$/;"	m	struct:__anon64
n	secp256k1/src/field_10x26.h	/^    uint32_t n[8];$/;"	m	struct:__anon65
n	secp256k1/src/field_5x52.h	/^    uint64_t n[4];$/;"	m	struct:__anon76
n	secp256k1/src/field_5x52.h	/^    uint64_t n[5];$/;"	m	struct:__anon75
n	serialize.h	/^    I &n;$/;"	m	class:CVarInt
n	txmempool.h	/^    uint32_t n;$/;"	m	class:CInPoint
nAccountingEntryNumber	wallet/walletdb.cpp	/^static uint64_t nAccountingEntryNumber = 0;$/;"	v	file:
nAllianceThreshold	chainparams.h	/^    double nAllianceThreshold;$/;"	m	class:CChainParams
nAmount	wallet/rpcwallet.cpp	/^    CAmount nAmount;$/;"	m	struct:tallyitem	file:
nAmount	wallet/wallet.h	/^    CAmount nAmount;$/;"	m	struct:CRecipient
nAttempts	addrman.h	/^    int nAttempts;$/;"	m	class:CAddrInfo
nAvailableCreditCached	wallet/wallet.h	/^    mutable std::map<type_Color, int64_t> nAvailableCreditCached;$/;"	m	class:CWalletTx
nAvailableWatchCreditCached	wallet/wallet.h	/^    mutable CAmount nAvailableWatchCreditCached;$/;"	m	class:CWalletTx
nBatchSize	checkqueue.h	/^    unsigned int nBatchSize;$/;"	m	class:CCheckQueue
nBestSeenHeight	policy/fees.h	/^    unsigned int nBestSeenHeight;$/;"	m	class:CBlockPolicyEstimator
nBits	chain.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBits	primitives/block.h	/^    uint32_t nBits;$/;"	m	class:CBlockHeader
nBlockSequenceId	main.cpp	/^    uint32_t nBlockSequenceId = 1;$/;"	m	namespace:__anon46	file:
nBlocks	main.h	/^    unsigned int nBlocks;      \/\/! number of blocks stored in file$/;"	m	class:CBlockFileInfo
nBlocksInFlight	main.cpp	/^    int nBlocksInFlight;$/;"	m	struct:__anon47::CNodeState	file:
nBlocksInFlightValidHeaders	main.cpp	/^    int nBlocksInFlightValidHeaders;$/;"	m	struct:__anon47::CNodeState	file:
nBloomSize	bloom.h	/^    unsigned int nBloomSize;$/;"	m	class:CRollingBloomFilter
nCKeys	wallet/walletdb.cpp	/^    unsigned int nCKeys;$/;"	m	class:CWalletScanState	file:
nCancel	alert.h	/^    int nCancel;$/;"	m	class:CUnsignedAlert
nChainTx	chain.h	/^    unsigned int nChainTx;$/;"	m	class:CBlockIndex
nChainWork	chain.h	/^    arith_uint256 nChainWork;$/;"	m	class:CBlockIndex
nChangeCached	wallet/wallet.h	/^    mutable CAmount nChangeCached;$/;"	m	class:CWalletTx
nChecksum	protocol.h	/^    unsigned int nChecksum;$/;"	m	class:CMessageHeader
nChild	key.h	/^    unsigned int nChild;$/;"	m	struct:CExtKey
nChild	pubkey.h	/^    unsigned int nChild;$/;"	m	struct:CExtPubKey
nChild	test/bip32_tests.cpp	/^    unsigned int nChild;$/;"	m	struct:TestDerivation	file:
nChild	wallet/hdkeystore.h	/^    unsigned int nChild; \/\/child index$/;"	m	class:CHDPubKey
nCoinCacheSize	main.cpp	/^unsigned int nCoinCacheSize = 5000;$/;"	v
nCoinCacheUsage	main.cpp	/^size_t nCoinCacheUsage = 5000 * 300;$/;"	v
nCommonHeight	main.h	/^    int nCommonHeight;$/;"	m	struct:CNodeStateStats
nConf	wallet/rpcwallet.cpp	/^    int nConf;$/;"	m	struct:tallyitem	file:
nConnectTimeout	netbase.cpp	/^int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;$/;"	v
nCreateTime	wallet/hdkeystore.h	/^    int64_t nCreateTime; \/\/ 0 means unknown$/;"	m	class:CHDChain
nCreateTime	wallet/walletdb.h	/^    int64_t nCreateTime; \/\/ 0 means unknown$/;"	m	class:CKeyMetadata
nCreditCached	wallet/wallet.h	/^    mutable CAmount nCreditCached;$/;"	m	class:CWalletTx
nCreditDebit	wallet/wallet.h	/^    CAmount nCreditDebit;$/;"	m	class:CAccountingEntry
nDataPos	chain.h	/^    unsigned int nDataPos;$/;"	m	class:CBlockIndex
nDataPos	net.h	/^    unsigned int nDataPos;$/;"	m	class:CNetMessage
nDebitCached	wallet/wallet.h	/^    mutable CAmount nDebitCached;$/;"	m	class:CWalletTx
nDefaultDbCache	txdb.h	/^static const int64_t nDefaultDbCache = 100;$/;"	v
nDefaultPort	chainparams.h	/^    int nDefaultPort;$/;"	m	class:CChainParams
nDepth	key.h	/^    unsigned char nDepth;$/;"	m	struct:CExtKey
nDepth	pubkey.h	/^    unsigned char nDepth;$/;"	m	struct:CExtPubKey
nDepth	wallet/wallet.h	/^    int nDepth;$/;"	m	class:COutput
nDerivationMethod	wallet/crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	wallet/crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nDoS	consensus/validation.h	/^    int nDoS;$/;"	m	class:CValidationState
nDynamicDiff	chainparams.h	/^    double nDynamicDiff;$/;"	m	class:CChainParams
nDynamicMiner	chainparams.h	/^    unsigned int nDynamicMiner;$/;"	m	class:CChainParams
nEntryNo	wallet/wallet.h	/^    uint64_t nEntryNo;$/;"	m	class:CAccountingEntry
nExpiration	alert.h	/^    int64_t nExpiration;$/;"	m	class:CUnsignedAlert
nFee	txmempool.h	/^    CAmount nFee; \/\/! Cached to avoid expensive parent-transaction lookups$/;"	m	class:CTxMemPoolEntry
nFeeRate	policy/licenseinfo.h	/^    double nFeeRate;$/;"	m	class:CLicenseInfo
nFile	chain.h	/^    int nFile;$/;"	m	class:CBlockIndex
nFile	chain.h	/^    int nFile;$/;"	m	struct:CDiskBlockPos
nFileVersion	wallet/walletdb.cpp	/^    int nFileVersion;$/;"	m	class:CWalletScanState	file:
nFlags	bloom.h	/^    unsigned char nFlags;$/;"	m	class:CBloomFilter
nFlags	main.h	/^    unsigned int nFlags;$/;"	m	class:CScriptCheck
nHashFuncs	bloom.h	/^    unsigned int nHashFuncs;$/;"	m	class:CBloomFilter
nHashType	script/sign.h	/^    int nHashType;$/;"	m	class:BlockHeaderSignatureCreator
nHashType	script/sign.h	/^    int nHashType;$/;"	m	class:TransactionSignatureCreator
nHdrPos	net.h	/^    unsigned int nHdrPos;$/;"	m	class:CNetMessage
nHeight	chain.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nHeight	coins.h	/^    int nHeight;$/;"	m	class:CCoins
nHeight	coins.h	/^    int nHeight;$/;"	m	struct:CCoinsStats
nHeight	rest.cpp	/^    uint32_t nHeight;$/;"	m	struct:CCoin	file:
nHeight	txmempool.h	/^    unsigned int nHeight; \/\/! Chain height when entering the mempool$/;"	m	class:CTxMemPoolEntry
nHeight	undo.h	/^    unsigned int nHeight; \/\/ if the outpoint was the last unspent: its height$/;"	m	class:CTxInUndo
nHeightFirst	main.h	/^    unsigned int nHeightFirst; \/\/! lowest height of block in file$/;"	m	class:CBlockFileInfo
nHeightLast	main.h	/^    unsigned int nHeightLast;  \/\/! highest height of block in file$/;"	m	class:CBlockFileInfo
nHighTransactionFeeWarning	wallet/wallet.h	/^static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;$/;"	v
nHighTransactionMaxFeeWarning	wallet/wallet.h	/^static const CAmount nHighTransactionMaxFeeWarning = 100 * nHighTransactionFeeWarning;$/;"	v
nID	alert.h	/^    int nID;$/;"	m	class:CUnsignedAlert
nIdCount	addrman.h	/^    int nIdCount;$/;"	m	class:CAddrMan
nIdle	checkqueue.h	/^    int nIdle;$/;"	m	class:CCheckQueue
nImmatureCreditCached	wallet/wallet.h	/^    mutable CAmount nImmatureCreditCached;$/;"	m	class:CWalletTx
nImmatureWatchCreditCached	wallet/wallet.h	/^    mutable CAmount nImmatureWatchCreditCached;$/;"	m	class:CWalletTx
nIn	main.h	/^    unsigned int nIn;$/;"	m	class:CScriptCheck
nIn	script/interpreter.cpp	/^    const unsigned int nIn;    \/\/! input index of txTo being signed$/;"	m	class:__anon88::CTransactionSignatureSerializer	file:
nIn	script/interpreter.h	/^    unsigned int nIn;$/;"	m	class:TransactionSignatureChecker
nIn	script/sign.h	/^    unsigned int nIn;$/;"	m	class:TransactionSignatureCreator
nIndex	wallet/wallet.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nIndex	wallet/wallet.h	/^    int64_t nIndex;$/;"	m	class:CReserveKey
nInsertions	bloom.h	/^    unsigned int nInsertions;$/;"	m	class:CRollingBloomFilter
nKey	addrman.h	/^    uint256 nKey;$/;"	m	class:CAddrMan
nKeyMeta	wallet/walletdb.cpp	/^    unsigned int nKeyMeta;$/;"	m	class:CWalletScanState	file:
nKeys	wallet/walletdb.cpp	/^    unsigned int nKeys;$/;"	m	class:CWalletScanState	file:
nLastBlockFile	main.cpp	/^    int nLastBlockFile = 0;$/;"	m	namespace:__anon46	file:
nLastBlockSize	miner.cpp	/^uint64_t nLastBlockSize = 0;$/;"	v
nLastBlockTx	miner.cpp	/^uint64_t nLastBlockTx = 0;$/;"	v
nLastNodeId	net.cpp	/^NodeId nLastNodeId = 0;$/;"	v
nLastRecv	net.h	/^    int64_t nLastRecv;$/;"	m	class:CNode
nLastRecv	net.h	/^    int64_t nLastRecv;$/;"	m	class:CNodeStats
nLastResend	wallet/wallet.h	/^    int64_t nLastResend;$/;"	m	class:CWallet
nLastSend	net.h	/^    int64_t nLastSend;$/;"	m	class:CNode
nLastSend	net.h	/^    int64_t nLastSend;$/;"	m	class:CNodeStats
nLastSuccess	addrman.h	/^    int64_t nLastSuccess;$/;"	m	class:CAddrInfo
nLastTry	addrman.h	/^    int64_t nLastTry;$/;"	m	class:CAddrInfo
nLimit	policy/licenseinfo.h	/^    int64_t nLimit;$/;"	m	class:CLicenseInfo
nLocalHostNonce	net.cpp	/^uint64_t nLocalHostNonce = 0;$/;"	v
nLocalServices	net.cpp	/^uint64_t nLocalServices = NODE_NETWORK;$/;"	v
nLockTime	primitives/transaction.h	/^    const uint32_t nLockTime;$/;"	m	class:CTransaction
nLockTime	primitives/transaction.h	/^    uint32_t nLockTime;$/;"	m	struct:CMutableTransaction
nMajorityEnforceBlockUpgrade	consensus/params.h	/^    int nMajorityEnforceBlockUpgrade;$/;"	m	struct:Consensus::Params
nMajorityRejectBlockOutdated	consensus/params.h	/^    int nMajorityRejectBlockOutdated;$/;"	m	struct:Consensus::Params
nMajorityWindow	consensus/params.h	/^    int nMajorityWindow;$/;"	m	struct:Consensus::Params
nMasterKeyMaxID	wallet/wallet.h	/^    unsigned int nMasterKeyMaxID;$/;"	m	class:CWallet
nMaxConnections	net.cpp	/^int nMaxConnections = 125;$/;"	v
nMaxDatacarrierBytes	script/standard.cpp	/^unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;$/;"	v
nMaxDbCache	txdb.h	/^static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;$/;"	v
nMaxNumSize	script/script.h	/^    static const size_t nMaxNumSize = 4;$/;"	m	class:CScriptNum
nMaxSize	limitedmap.h	/^    size_type nMaxSize;$/;"	m	class:limitedmap
nMaxSize	mruset.h	/^    const size_type nMaxSize;$/;"	m	class:mruset
nMaxVer	alert.h	/^    int nMaxVer;            \/\/ highest version inclusive$/;"	m	class:CUnsignedAlert
nMedianTimeSpan	chain.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon45
nMessageSize	protocol.h	/^    unsigned int nMessageSize;$/;"	m	class:CMessageHeader
nMinDbCache	txdb.h	/^static const int64_t nMinDbCache = 4;$/;"	v
nMinDiskSpace	main.h	/^static const uint64_t nMinDiskSpace = 52428800;$/;"	v
nMinVer	alert.h	/^    int nMinVer;            \/\/ lowest version inclusive$/;"	m	class:CUnsignedAlert
nMinerThreads	chainparams.h	/^    int nMinerThreads;$/;"	m	class:CChainParams
nMisbehavior	main.cpp	/^    int nMisbehavior;$/;"	m	struct:__anon47::CNodeState	file:
nMisbehavior	main.h	/^    int nMisbehavior;$/;"	m	struct:CNodeStateStats
nMockTime	utiltime.cpp	/^static int64_t nMockTime = 0;  \/\/! For unit testing$/;"	v	file:
nModSize	txmempool.h	/^    size_t nModSize; \/\/! ... and modified size for priority$/;"	m	class:CTxMemPoolEntry
nNew	addrman.h	/^    int nNew;$/;"	m	class:CAddrMan
nNextResend	wallet/wallet.h	/^    int64_t nNextResend;$/;"	m	class:CWallet
nNonce	chain.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nNonce	primitives/block.h	/^    uint32_t nNonce;$/;"	m	class:CBlockHeader
nOrderPos	wallet/wallet.h	/^    int64_t nOrderPos;  \/\/! position in ordered transaction list$/;"	m	class:CAccountingEntry
nOrderPos	wallet/wallet.h	/^    int64_t nOrderPos; \/\/! position in ordered transaction list$/;"	m	class:CWalletTx
nOrderPosNext	wallet/wallet.h	/^    int64_t nOrderPosNext;$/;"	m	class:CWallet
nPingNonceSent	net.h	/^    uint64_t nPingNonceSent;$/;"	m	class:CNode
nPingUsecStart	net.h	/^    int64_t nPingUsecStart;$/;"	m	class:CNode
nPingUsecTime	net.h	/^    int64_t nPingUsecTime;$/;"	m	class:CNode
nPort	net.h	/^    int nPort;$/;"	m	struct:LocalServiceInfo
nPos	chain.h	/^    unsigned int nPos;$/;"	m	struct:CDiskBlockPos
nPowTargetSpacing	consensus/params.h	/^    int64_t nPowTargetSpacing;$/;"	m	struct:Consensus::Params
nPowTargetTimespan	consensus/params.h	/^    int64_t nPowTargetTimespan;$/;"	m	struct:Consensus::Params
nPreferredDownload	main.cpp	/^    int nPreferredDownload = 0;$/;"	m	namespace:__anon46	file:
nPriority	alert.h	/^    int nPriority;$/;"	m	class:CUnsignedAlert
nPruneAfterHeight	chainparams.h	/^    uint64_t nPruneAfterHeight;$/;"	m	class:CChainParams
nPruneTarget	main.cpp	/^uint64_t nPruneTarget = 0;$/;"	v
nQueuedValidatedHeaders	main.cpp	/^    int nQueuedValidatedHeaders = 0;$/;"	m	namespace:__anon46	file:
nRPCPort	chainparamsbase.h	/^    int nRPCPort;$/;"	m	class:CBaseChainParams
nRandomPos	addrman.h	/^    int nRandomPos;$/;"	m	class:CAddrInfo
nReadLimit	streams.h	/^    uint64_t nReadLimit;  \/\/ up to which position we're allowed to read$/;"	m	class:CBufferedFile
nReadPos	streams.h	/^    uint64_t nReadPos;    \/\/ how many bytes have been read from this$/;"	m	class:CBufferedFile
nReadPos	streams.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nRecvBytes	net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNode
nRecvBytes	net.h	/^    uint64_t nRecvBytes;$/;"	m	class:CNodeStats
nRecvVersion	net.h	/^    int nRecvVersion;$/;"	m	class:CNode
nRefCount	addrman.h	/^    int nRefCount;$/;"	m	class:CAddrInfo
nRefCount	net.h	/^    int nRefCount;$/;"	m	class:CNode
nRelayUntil	alert.h	/^    int64_t nRelayUntil;      \/\/ when newer nodes stop relaying to newer nodes$/;"	m	class:CUnsignedAlert
nRewind	streams.h	/^    uint64_t nRewind;     \/\/ how many bytes we guarantee to rewind$/;"	m	class:CBufferedFile
nSatoshisPerK	amount.h	/^    CAmount nSatoshisPerK; \/\/ unit is satoshis-per-1,000-bytes$/;"	m	class:CFeeRate
nScore	net.h	/^    int nScore;$/;"	m	struct:LocalServiceInfo
nScriptCheckThreads	main.cpp	/^int nScriptCheckThreads = 0;$/;"	v
nSendBytes	net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNode
nSendBytes	net.h	/^    uint64_t nSendBytes;$/;"	m	class:CNodeStats
nSendOffset	net.h	/^    size_t nSendOffset; \/\/ offset inside the first vSendMsg already sent$/;"	m	class:CNode
nSendSize	net.h	/^    size_t nSendSize; \/\/ total size of all vSendMsg entries$/;"	m	class:CNode
nSequence	primitives/transaction.h	/^    uint32_t nSequence;$/;"	m	class:CTxIn
nSequenceId	chain.h	/^    uint32_t nSequenceId;$/;"	m	class:CBlockIndex
nSerializedSize	coins.h	/^    uint64_t nSerializedSize;$/;"	m	struct:CCoinsStats
nServices	net.h	/^    uint64_t nServices;$/;"	m	class:CNode
nServices	net.h	/^    uint64_t nServices;$/;"	m	class:CNodeStats
nServices	protocol.h	/^    uint64_t nServices;$/;"	m	class:CAddress
nSize	main.h	/^    unsigned int nSize;        \/\/! number of used bytes of block file$/;"	m	class:CBlockFileInfo
nSize	serialize.h	/^    size_t nSize;$/;"	m	class:CSizeComputer
nSize	timedata.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nSpecialScripts	compressor.h	/^    static const unsigned int nSpecialScripts = 6;$/;"	m	class:CScriptCompressor
nSrcPos	streams.h	/^    uint64_t nSrcPos;     \/\/ how many bytes have been read from source$/;"	m	class:CBufferedFile
nStallingSince	main.cpp	/^    int64_t nStallingSince;$/;"	m	struct:__anon47::CNodeState	file:
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNode
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nStatus	chain.h	/^    unsigned int nStatus;$/;"	m	class:CBlockIndex
nSubsidyHalvingInterval	consensus/params.h	/^    int nSubsidyHalvingInterval;$/;"	m	struct:Consensus::Params
nSyncHeight	main.h	/^    int nSyncHeight;$/;"	m	struct:CNodeStateStats
nSyncStarted	main.cpp	/^    int nSyncStarted = 0;$/;"	m	namespace:__anon46	file:
nThreadsServicingQueue	scheduler.h	/^    int nThreadsServicingQueue;$/;"	m	class:CScheduler
nTime	chain.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	main.cpp	/^        int64_t nTime;  \/\/! Time of "getdata" request in microseconds.$/;"	m	struct:__anon46::QueuedBlock	file:
nTime	net.h	/^    int64_t nTime;                  \/\/ time (in microseconds) of message receipt.$/;"	m	class:CNetMessage
nTime	primitives/block.h	/^    uint32_t nTime;$/;"	m	class:CBlockHeader
nTime	protocol.h	/^    unsigned int nTime;$/;"	m	class:CAddress
nTime	txmempool.h	/^    int64_t nTime; \/\/! Local time when entering the mempool$/;"	m	class:CTxMemPoolEntry
nTime	wallet/wallet.h	/^    int64_t nTime;$/;"	m	class:CAccountingEntry
nTime	wallet/wallet.h	/^    int64_t nTime;$/;"	m	class:CKeyPool
nTimeBestReceived	main.cpp	/^int64_t nTimeBestReceived = 0;$/;"	v
nTimeCallbacks	main.cpp	/^static int64_t nTimeCallbacks = 0;$/;"	v	file:
nTimeChainState	main.cpp	/^static int64_t nTimeChainState = 0;$/;"	v	file:
nTimeConnect	main.cpp	/^static int64_t nTimeConnect = 0;$/;"	v	file:
nTimeConnectTotal	main.cpp	/^static int64_t nTimeConnectTotal = 0;$/;"	v	file:
nTimeConnected	net.h	/^    int64_t nTimeConnected;$/;"	m	class:CNode
nTimeConnected	net.h	/^    int64_t nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	wallet/wallet.h	/^    int64_t nTimeCreated;$/;"	m	class:CWalletKey
nTimeDisconnect	main.cpp	/^        int64_t nTimeDisconnect; \/\/! The timeout for this block request (for disconnecting a slow peer)$/;"	m	struct:__anon46::QueuedBlock	file:
nTimeExpires	wallet/wallet.h	/^    int64_t nTimeExpires;$/;"	m	class:CWalletKey
nTimeFirst	main.h	/^    uint64_t nTimeFirst;         \/\/! earliest time of block in file$/;"	m	class:CBlockFileInfo
nTimeFirstKey	wallet/wallet.h	/^    int64_t nTimeFirstKey;$/;"	m	class:CWallet
nTimeFlush	main.cpp	/^static int64_t nTimeFlush = 0;$/;"	v	file:
nTimeIndex	main.cpp	/^static int64_t nTimeIndex = 0;$/;"	v	file:
nTimeLast	main.h	/^    uint64_t nTimeLast;          \/\/! latest time of block in file$/;"	m	class:CBlockFileInfo
nTimeLastCheckpoint	checkpoints.h	/^    int64_t nTimeLastCheckpoint;$/;"	m	struct:Checkpoints::CCheckpointData
nTimeOffset	net.h	/^    int64_t nTimeOffset;$/;"	m	class:CNode
nTimeOffset	net.h	/^    int64_t nTimeOffset;$/;"	m	class:CNodeStats
nTimeOffset	timedata.cpp	/^static int64_t nTimeOffset = 0;$/;"	v	file:
nTimePostConnect	main.cpp	/^static int64_t nTimePostConnect = 0;$/;"	v	file:
nTimeReadFromDisk	main.cpp	/^static int64_t nTimeReadFromDisk = 0;$/;"	v	file:
nTimeReceived	wallet/wallet.h	/^    unsigned int nTimeReceived; \/\/! time received by this node$/;"	m	class:CWalletTx
nTimeSmart	wallet/wallet.h	/^    unsigned int nTimeSmart;$/;"	m	class:CWalletTx
nTimeTotal	main.cpp	/^static int64_t nTimeTotal = 0;$/;"	v	file:
nTimeVerify	main.cpp	/^static int64_t nTimeVerify = 0;$/;"	v	file:
nTodo	checkqueue.h	/^    unsigned int nTodo;$/;"	m	class:CCheckQueue
nTotal	checkqueue.h	/^    int nTotal;$/;"	m	class:CCheckQueue
nTotalBytesRecv	net.cpp	/^uint64_t CNode::nTotalBytesRecv = 0;$/;"	m	class:CNode	file:
nTotalBytesRecv	net.h	/^    static uint64_t nTotalBytesRecv;$/;"	m	class:CNode
nTotalBytesSent	net.cpp	/^uint64_t CNode::nTotalBytesSent = 0;$/;"	m	class:CNode	file:
nTotalBytesSent	net.h	/^    static uint64_t nTotalBytesSent;$/;"	m	class:CNode
nTransactionOutputs	coins.h	/^    uint64_t nTransactionOutputs;$/;"	m	struct:CCoinsStats
nTransactions	coins.h	/^    uint64_t nTransactions;$/;"	m	struct:CCoinsStats
nTransactions	merkleblock.h	/^    unsigned int nTransactions;$/;"	m	class:CPartialMerkleTree
nTransactionsLastCheckpoint	checkpoints.h	/^    int64_t nTransactionsLastCheckpoint;$/;"	m	struct:Checkpoints::CCheckpointData
nTransactionsUpdated	txmempool.h	/^    unsigned int nTransactionsUpdated;$/;"	m	class:CTxMemPool
nTried	addrman.h	/^    int nTried;$/;"	m	class:CAddrMan
nTweak	bloom.h	/^    unsigned int nTweak;$/;"	m	class:CBloomFilter
nTx	chain.h	/^    unsigned int nTx;$/;"	m	class:CBlockIndex
nTxConfirmTarget	wallet/wallet.cpp	/^unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;$/;"	v
nTxOffset	main.h	/^    unsigned int nTxOffset; \/\/ after header$/;"	m	struct:CDiskTxPos
nTxSize	txmempool.h	/^    size_t nTxSize; \/\/! ... and avoid recomputing tx size$/;"	m	class:CTxMemPoolEntry
nTxVer	rest.cpp	/^    uint32_t nTxVer; \/\/ Don't call this nVersion, that name has a special meaning inside IMPLEMENT_SERIALIZE$/;"	m	struct:CCoin	file:
nType	hash.h	/^    int nType;$/;"	m	class:CHashWriter
nType	serialize.h	/^    int nType;$/;"	m	class:CSizeComputer
nType	streams.h	/^    int nType;$/;"	m	class:CAutoFile
nType	streams.h	/^    int nType;$/;"	m	class:CBufferedFile
nType	streams.h	/^    int nType;$/;"	m	class:CDataStream
nUndoPos	chain.h	/^    unsigned int nUndoPos;$/;"	m	class:CBlockIndex
nUndoSize	main.h	/^    unsigned int nUndoSize;    \/\/! number of used bytes in the undo file$/;"	m	class:CBlockFileInfo
nValue	primitives/transaction.h	/^    CAmount nValue;$/;"	m	class:CTxOut
nVersion	alert.h	/^    int nVersion;$/;"	m	class:CUnsignedAlert
nVersion	chain.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	coins.h	/^    int nVersion;$/;"	m	class:CCoins
nVersion	hash.h	/^    int nVersion;$/;"	m	class:CHashWriter
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNode
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nVersion	policy/licenseinfo.h	/^    int nVersion;$/;"	m	class:CLicenseInfo
nVersion	primitives/block.h	/^    int32_t nVersion;$/;"	m	class:CBlockHeader
nVersion	primitives/transaction.h	/^    const int32_t nVersion;$/;"	m	class:CTransaction
nVersion	primitives/transaction.h	/^    int32_t nVersion;$/;"	m	struct:CMutableTransaction
nVersion	serialize.h	/^    int nVersion;$/;"	m	class:CSizeComputer
nVersion	streams.h	/^    int nVersion;$/;"	m	class:CAutoFile
nVersion	streams.h	/^    int nVersion;$/;"	m	class:CBufferedFile
nVersion	streams.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	undo.h	/^    int nVersion;         \/\/ if the outpoint was the last unspent: its version$/;"	m	class:CTxInUndo
nVersion	wallet/hdkeystore.h	/^    int nVersion;$/;"	m	class:CHDChain
nVersion	wallet/hdkeystore.h	/^    int nVersion;$/;"	m	class:CHDPubKey
nVersion	wallet/walletdb.h	/^    int nVersion;$/;"	m	class:CKeyMetadata
nWalletDBUpdated	wallet/db.cpp	/^unsigned int nWalletDBUpdated;$/;"	v
nWalletMaxVersion	wallet/wallet.h	/^    int nWalletMaxVersion;$/;"	m	class:CWallet
nWalletVersion	wallet/wallet.h	/^    int nWalletVersion;$/;"	m	class:CWallet
nWatchCreditCached	wallet/wallet.h	/^    mutable CAmount nWatchCreditCached;$/;"	m	class:CWalletTx
nWatchDebitCached	wallet/wallet.h	/^    mutable CAmount nWatchDebitCached;$/;"	m	class:CWalletTx
n_	leveldb/table/merger.cc	/^  int n_;$/;"	m	class:leveldb::__anon28::MergingIterator	file:
name	chainparams.h	/^    std::string name, host;$/;"	m	struct:CDNSSeedData
name	leveldb/util/testharness.cc	/^  const char* name;$/;"	m	struct:leveldb::test::__anon41::Test	file:
name	main.cpp	/^    std::string name;$/;"	m	struct:__anon47::CNodeState	file:
name	policy/licenseinfo.h	/^    string name;$/;"	m	class:CLicenseInfo
name	rest.cpp	/^    const char* name;$/;"	m	struct:__anon60	file:
name	rpcserver.h	/^    std::string name;$/;"	m	class:CRPCCommand
name	wallet/wallet.h	/^    std::string name;$/;"	m	class:CAddressBookData
nameProxy	netbase.cpp	/^static proxyType nameProxy;$/;"	v	file:
name_	json/json_spirit_reader_template.h	/^        String_type name_;              \/\/ of current name\/value pair$/;"	m	class:json_spirit::Semantic_actions
name_	json/json_spirit_value.h	/^        String_type name_;$/;"	m	struct:json_spirit::Pair_impl
name_	leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_comparator_t	file:
name_	leveldb/db/c.cc	/^  const char* (*name_)(void*);$/;"	m	struct:leveldb_filterpolicy_t	file:
name_	leveldb/util/env_posix.cc	/^  std::string name_;$/;"	m	class:leveldb::__anon42::PosixFileLock	file:
nativeECDSABuffer	secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static ThreadLocal<ByteBuffer> nativeECDSABuffer = new ThreadLocal<ByteBuffer>();$/;"	f	class:NativeSecp256k1	file:
neg	secp256k1/src/num_gmp.h	/^    int neg;$/;"	m	struct:__anon74
netmask	netbase.h	/^        uint8_t netmask[16];$/;"	m	class:CSubNet
network	netbase.h	/^        CNetAddr network;$/;"	m	class:CSubNet
newTaskMutex	scheduler.h	/^    mutable boost::mutex newTaskMutex;$/;"	m	class:CScheduler
newTaskScheduled	scheduler.h	/^    boost::condition_variable newTaskScheduled;$/;"	m	class:CScheduler
new_false	json/json_spirit_reader_template.h	/^        void new_false( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_files_	leveldb/db/version_edit.h	/^  std::vector< std::pair<int, FileMetaData> > new_files_;$/;"	m	class:leveldb::VersionEdit
new_int	json/json_spirit_reader_template.h	/^        void new_int( int64_t i )$/;"	f	class:json_spirit::Semantic_actions
new_line	json/json_spirit_writer_template.h	/^        void new_line()$/;"	f	class:json_spirit::Generator
new_name	json/json_spirit_reader_template.h	/^        void new_name( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_null	json/json_spirit_reader_template.h	/^        void new_null( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_real	json/json_spirit_reader_template.h	/^        void new_real( double d )$/;"	f	class:json_spirit::Semantic_actions
new_str	json/json_spirit_reader_template.h	/^        void new_str( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_true	json/json_spirit_reader_template.h	/^        void new_true( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_uint64	json/json_spirit_reader_template.h	/^        void new_uint64( uint64_t ui )$/;"	f	class:json_spirit::Semantic_actions
newest	leveldb/db/snapshot.h	/^  SnapshotImpl* newest() const { assert(!empty()); return list_.prev_; }$/;"	f	class:leveldb::SnapshotList
next	leveldb/include/leveldb/iterator.h	/^    Cleanup* next;$/;"	m	struct:leveldb::Iterator::Cleanup
next	leveldb/util/cache.cc	/^  LRUHandle* next;$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
next_	leveldb/db/skiplist.h	/^  port::AtomicPointer next_[1];$/;"	m	struct:leveldb::SkipList::Node
next_	leveldb/db/snapshot.h	/^  SnapshotImpl* next_;$/;"	m	class:leveldb::SnapshotImpl
next_	leveldb/db/version_set.h	/^  Version* next_;               \/\/ Next version in linked list$/;"	m	class:leveldb::Version
next_file_number_	leveldb/db/repair.cc	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::__anon17::Repairer	file:
next_file_number_	leveldb/db/version_edit.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionEdit
next_file_number_	leveldb/db/version_set.h	/^  uint64_t next_file_number_;$/;"	m	class:leveldb::VersionSet
next_hash	leveldb/util/cache.cc	/^  LRUHandle* next_hash;$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
next_report_	leveldb/db/db_bench.cc	/^  int next_report_;$/;"	m	class:leveldb::__anon15::Stats	file:
next_report_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
next_report_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int next_report_;     \/\/ When to report next$/;"	m	class:leveldb::Benchmark	file:
no_space_	leveldb/db/db_test.cc	/^  port::AtomicPointer no_space_;$/;"	m	class:leveldb::SpecialEnv	file:
node_	leveldb/db/skiplist.h	/^    Node* node_;$/;"	m	class:leveldb::SkipList::Iterator
nodeid	net.h	/^    NodeId nodeid;$/;"	m	class:CNodeStats
nodist_libbitcoin_util_a_OBJECTS	Makefile	/^nodist_libbitcoin_util_a_OBJECTS =$/;"	m
nodist_libbitcoin_util_a_SOURCES	Makefile	/^nodist_libbitcoin_util_a_SOURCES = $(srcdir)\/obj\/build.h$/;"	m
nodist_test_test_bitcoin_OBJECTS	Makefile	/^nodist_test_test_bitcoin_OBJECTS =  \\$/;"	m
nodist_test_test_bitcoin_SOURCES	Makefile	/^nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)$/;"	m
noinst_HEADERS	secp256k1/Makefile	/^noinst_HEADERS = src\/scalar.h src\/scalar_4x64.h src\/scalar_8x32.h \\$/;"	m
noinst_PROGRAMS	secp256k1/Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2)$/;"	m
non_printable_to_string	json/json_spirit_writer_template.h	/^    String_type non_printable_to_string( unsigned int c )$/;"	f	namespace:json_spirit
non_writable_	leveldb/db/db_test.cc	/^  port::AtomicPointer non_writable_;$/;"	m	class:leveldb::SpecialEnv	file:
nonce	test/miner_tests.cpp	/^    unsigned int nonce;$/;"	m	struct:__anon95	file:
nonce_function_rfc6979	secp256k1/src/secp256k1.c	/^static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {$/;"	f	file:
nonce_function_test_fail	secp256k1/src/tests.c	/^static int nonce_function_test_fail(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {$/;"	f	file:
nonce_function_test_retry	secp256k1/src/tests.c	/^static int nonce_function_test_retry(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {$/;"	f	file:
normalized	secp256k1/src/field_10x26.h	/^    int normalized;$/;"	m	struct:__anon64
normalized	secp256k1/src/field_5x52.h	/^    int normalized;$/;"	m	struct:__anon75
noui_InitMessage	noui.cpp	/^static void noui_InitMessage(const std::string& message)$/;"	f	file:
noui_ThreadSafeMessageBox	noui.cpp	/^static bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)$/;"	f	file:
noui_connect	noui.cpp	/^void noui_connect()$/;"	f
null	json/json_spirit_value.h	/^        static const Value_impl null;$/;"	m	class:json_spirit::Value_impl
null	json/json_spirit_value.h	/^    const Value_impl< Config > Value_impl< Config >::null;$/;"	m	class:json_spirit::Value_impl
nullValue	univalue/univalue.cpp	/^static const UniValue nullValue;$/;"	v	file:
null_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
num_	leveldb/db/db_bench.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int num_;$/;"	m	class:leveldb::Benchmark	file:
num_	leveldb/table/filter_block.h	/^  size_t num_;          \/\/ Number of entries in offset array$/;"	m	class:leveldb::FilterBlockReader
num_	leveldb/util/histogram.h	/^  double num_;$/;"	m	class:leveldb::Histogram
num_done	leveldb/db/db_bench.cc	/^  int num_done;$/;"	m	struct:leveldb::__anon15::SharedState	file:
num_entries	leveldb/table/table_builder.cc	/^  int64_t num_entries;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
num_initialized	leveldb/db/db_bench.cc	/^  int num_initialized;$/;"	m	struct:leveldb::__anon15::SharedState	file:
num_input_files	leveldb/db/version_set.h	/^  int num_input_files(int which) const { return inputs_[which].size(); }$/;"	f	class:leveldb::Compaction
num_of_coins_	cache.h	/^    int64_t num_of_coins_;$/;"	m	struct:color_license::Owner_
num_restarts_	leveldb/table/block.cc	/^  uint32_t const num_restarts_; \/\/ Number of uint32_t entries in restart array$/;"	m	class:leveldb::Block::Iter	file:
num_running	leveldb/util/env_test.cc	/^  int num_running;$/;"	m	struct:leveldb::State	file:
num_writable_file_errors_	leveldb/util/testutil.h	/^  int num_writable_file_errors_;$/;"	m	class:leveldb::test::ErrorEnv
number	leveldb/db/db_impl.cc	/^    uint64_t number;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
number	leveldb/db/version_edit.h	/^  uint64_t number;$/;"	m	struct:leveldb::FileMetaData
number_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
number_	leveldb/db/snapshot.h	/^  SequenceNumber number_;  \/\/ const after creation$/;"	m	class:leveldb::SnapshotImpl
obj_to_map	json/json_spirit_utils.h	/^    void obj_to_map( const Obj_t& obj, Map_t& mp_obj )$/;"	f	namespace:json_spirit
obj_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
object_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
offset	leveldb/table/format.h	/^  uint64_t offset() const { return offset_; }$/;"	f	class:leveldb::BlockHandle
offset	leveldb/table/table_builder.cc	/^  uint64_t offset;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
offset_	leveldb/table/filter_block.h	/^  const char* offset_;  \/\/ Pointer to beginning of offset array (at block-end)$/;"	m	class:leveldb::FilterBlockReader
offset_	leveldb/table/format.h	/^  uint64_t offset_;$/;"	m	class:leveldb::BlockHandle
offsets	test/scriptnum_tests.cpp	/^static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};$/;"	v	file:
ok	leveldb/include/leveldb/status.h	/^  bool ok() const { return (state_ == NULL); }$/;"	f	class:leveldb::Status
ok	leveldb/include/leveldb/table_builder.h	/^  bool ok() const { return status().ok(); }$/;"	f	class:leveldb::TableBuilder
okSafeMode	rpcserver.h	/^    bool okSafeMode;$/;"	m	class:CRPCCommand
ok_	leveldb/util/testharness.h	/^  bool ok_;$/;"	m	class:leveldb::test::Tester
ol 	leveldb/doc/doc.css	/^ol {$/;"	s
oldUnconfTxs	policy/fees.h	/^    std::vector<int> oldUnconfTxs;$/;"	m	class:TxConfirmStats
oldest	leveldb/db/snapshot.h	/^  SnapshotImpl* oldest() const { assert(!empty()); return list_.next_; }$/;"	f	class:leveldb::SnapshotList
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	secp256k1/Makefile	/^oldincludedir = \/usr\/include$/;"	m
once	leveldb/util/comparator.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	leveldb/util/env_posix.cc	/^static pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:leveldb	file:
once	leveldb/util/env_win.cc	/^static port::OnceType once = LEVELDB_ONCE_INIT;$/;"	m	namespace:leveldb	file:
opcodetype	script/script.h	/^enum opcodetype$/;"	g
operator !	arith_uint256.h	/^    bool operator!() const$/;"	f	class:base_uint
operator !=	arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }$/;"	f	class:base_uint
operator !=	arith_uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }$/;"	f	class:base_uint
operator !=	cache.h	/^    bool operator!=(const order_info_ &b) const{$/;"	f	struct:order_list::order_info_
operator !=	chain.h	/^    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {$/;"	f	struct:CDiskBlockPos
operator !=	coins.h	/^    friend bool operator!=(const CCoins &a, const CCoins &b)$/;"	f	class:CCoins
operator !=	leveldb/include/leveldb/slice.h	/^inline bool operator!=(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator !=	netbase.cpp	/^bool operator!=(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator !=	netbase.cpp	/^bool operator!=(const CService& a, const CService& b)$/;"	f
operator !=	netbase.cpp	/^bool operator!=(const CSubNet& a, const CSubNet& b)$/;"	f
operator !=	primitives/transaction.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	primitives/transaction.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	primitives/transaction.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	primitives/transaction.h	/^    friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	pubkey.h	/^    friend bool operator!=(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator !=	script/script.h	/^    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum
operator !=	script/script.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum
operator !=	test/bignum.h	/^inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }$/;"	f
operator !=	uint256.h	/^    friend inline bool operator!=(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) != 0; }$/;"	f	class:base_blob
operator &	arith_uint256.h	/^    friend inline const base_uint operator&(const base_uint& a, const base_uint& b) { return base_uint(a) &= b; }$/;"	f	class:base_uint
operator &=	arith_uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator ()	base58.cpp	/^    bool operator()(const CKeyID& id) const { return addr->Set(id); }$/;"	f	class:__anon63::CBitcoinAddressVisitor
operator ()	base58.cpp	/^    bool operator()(const CNoDestination& no) const { return false; }$/;"	f	class:__anon63::CBitcoinAddressVisitor
operator ()	base58.cpp	/^    bool operator()(const CScriptID& id) const { return addr->Set(id); }$/;"	f	class:__anon63::CBitcoinAddressVisitor
operator ()	coins.h	/^    size_t operator()(const uint256& key) const {$/;"	f	class:CCoinsKeyHasher
operator ()	leveldb/db/memtable.cc	/^int MemTable::KeyComparator::operator()(const char* aptr, const char* bptr)$/;"	f	class:leveldb::MemTable::KeyComparator
operator ()	leveldb/db/skiplist_test.cc	/^  int operator()(const Key& a, const Key& b) const {$/;"	f	struct:leveldb::Comparator
operator ()	leveldb/db/version_set.cc	/^    bool operator()(FileMetaData* f1, FileMetaData* f2) const {$/;"	f	struct:leveldb::VersionSet::Builder::BySmallestKey
operator ()	leveldb/table/table_test.cc	/^  bool operator()(const std::string& a, const std::string& b) const {$/;"	f	struct:leveldb::__anon34::STLLessThan
operator ()	main.cpp	/^        bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {$/;"	f	struct:__anon46::CBlockIndexWorkComparator
operator ()	main.cpp	/^bool CScriptCheck::operator()() {$/;"	f	class:CScriptCheck
operator ()	main.h	/^    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }$/;"	f	struct:BlockHasher
operator ()	miner.cpp	/^    bool operator()(const TxPriority& a, const TxPriority& b)$/;"	f	class:TxPriorityCompare
operator ()	net.h	/^    bool operator()(I first, I last) const$/;"	f	struct:CombinerAll
operator ()	rpcblockchain.cpp	/^    bool operator()(const CBlockIndex* a, const CBlockIndex* b) const$/;"	f	struct:CompareBlocksByHeight
operator ()	rpcmisc.cpp	/^    Object operator()(const CKeyID &keyID) const$/;"	f	class:DescribeAddressVisitor
operator ()	rpcmisc.cpp	/^    Object operator()(const CNoDestination &dest) const { return Object(); }$/;"	f	class:DescribeAddressVisitor
operator ()	rpcmisc.cpp	/^    Object operator()(const CScriptID &scriptID) const$/;"	f	class:DescribeAddressVisitor
operator ()	script/standard.cpp	/^    bool operator()(const CKeyID &keyID) const {$/;"	f	class:__anon84::CScriptVisitor
operator ()	script/standard.cpp	/^    bool operator()(const CNoDestination &dest) const {$/;"	f	class:__anon84::CScriptVisitor
operator ()	script/standard.cpp	/^    bool operator()(const CScriptID &scriptID) const {$/;"	f	class:__anon84::CScriptVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CKeyID &id) const$/;"	f	class:TestAddrTypeVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CKeyID &id) const$/;"	f	class:TestPayloadVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CNoDestination &no) const$/;"	f	class:TestAddrTypeVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CNoDestination &no) const$/;"	f	class:TestPayloadVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CScriptID &id) const$/;"	f	class:TestAddrTypeVisitor
operator ()	test/base58_tests.cpp	/^    bool operator()(const CScriptID &id) const$/;"	f	class:TestPayloadVisitor
operator ()	test/bip32_tests.cpp	/^    TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {$/;"	f	struct:TestVector
operator ()	wallet/wallet.cpp	/^    bool operator()(const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t1,$/;"	f	struct:CompareValueOnly
operator ()	wallet/wallet.cpp	/^    void operator()(const CKeyID &keyId) {$/;"	f	class:CAffectedKeysVisitor
operator ()	wallet/wallet.cpp	/^    void operator()(const CNoDestination &none) {}$/;"	f	class:CAffectedKeysVisitor
operator ()	wallet/wallet.cpp	/^    void operator()(const CScriptID &scriptId) {$/;"	f	class:CAffectedKeysVisitor
operator *	arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, const base_uint& b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	arith_uint256.h	/^    friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }$/;"	f	class:base_uint
operator *	coins.h	/^    CCoins& operator*() { return it->second.coins; }$/;"	f	class:CCoinsModifier
operator *=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)$/;"	f	class:base_uint
operator *=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)$/;"	f	class:base_uint
operator +	arith_uint256.h	/^    friend inline const base_uint operator+(const base_uint& a, const base_uint& b) { return base_uint(a) += b; }$/;"	f	class:base_uint
operator +	script/script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	script/script.h	/^    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum
operator +	script/script.h	/^    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}$/;"	f	class:CScriptNum
operator +	streams.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	test/bignum.h	/^inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)$/;"	f
operator ++	arith_uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	arith_uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator +=	arith_uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	arith_uint256.h	/^    base_uint& operator+=(uint64_t b64)$/;"	f	class:base_uint
operator +=	script/script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	script/script.h	/^    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator +=	script/script.h	/^    inline CScriptNum& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator +=	streams.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator -	arith_uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	arith_uint256.h	/^    friend inline const base_uint operator-(const base_uint& a, const base_uint& b) { return base_uint(a) -= b; }$/;"	f	class:base_uint
operator -	script/script.h	/^    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum
operator -	script/script.h	/^    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}$/;"	f	class:CScriptNum
operator -	script/script.h	/^    inline CScriptNum operator-()                         const$/;"	f	class:CScriptNum
operator -	test/bignum.h	/^inline const CBigNum operator-(const CBigNum& a)$/;"	f
operator -	test/bignum.h	/^inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)$/;"	f
operator --	arith_uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	arith_uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator -=	arith_uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	arith_uint256.h	/^    base_uint& operator-=(uint64_t b64)$/;"	f	class:base_uint
operator -=	script/script.h	/^    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator -=	script/script.h	/^    inline CScriptNum& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ->	coins.h	/^    CCoins* operator->() { return &it->second.coins; }$/;"	f	class:CCoinsModifier
operator /	arith_uint256.h	/^    friend inline const base_uint operator\/(const base_uint& a, const base_uint& b) { return base_uint(a) \/= b; }$/;"	f	class:base_uint
operator /=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator\/=(const base_uint& b)$/;"	f	class:base_uint
operator <	amount.h	/^    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <	arith_uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }$/;"	f	class:base_uint
operator <	base58.h	/^    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	mruset.h	/^    bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }$/;"	f	class:mruset
operator <	netbase.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	netbase.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	primitives/transaction.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	pubkey.h	/^    friend bool operator<(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator <	script/script.h	/^    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum
operator <	script/script.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum
operator <	script/standard.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	test/bignum.h	/^inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }$/;"	f
operator <	uint256.h	/^    friend inline bool operator<(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) < 0; }$/;"	f	class:base_blob
operator <<	arith_uint256.h	/^    friend inline const base_uint operator<<(const base_uint& a, int shift) { return base_uint(a) <<= shift; }$/;"	f	class:base_uint
operator <<	hash.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<	leveldb/util/testharness.h	/^  Tester& operator<<(const V& value) {$/;"	f	class:leveldb::test::Tester
operator <<	script/script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(const CScriptNum& b)$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(int64_t b) { return push_int64(b); }$/;"	f	class:CScript
operator <<	script/script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	serialize.h	/^    CSizeComputer& operator<<(const T& obj)$/;"	f	class:CSizeComputer
operator <<	streams.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	streams.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	amount.h	/^    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator <=	arith_uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }$/;"	f	class:base_uint
operator <=	base58.h	/^    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	script/script.h	/^    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum
operator <=	script/script.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum
operator <=	test/bignum.h	/^inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }$/;"	f
operator =	arith_uint256.h	/^    base_uint& operator=(const base_uint& b)$/;"	f	class:base_uint
operator =	arith_uint256.h	/^    base_uint& operator=(uint64_t b)$/;"	f	class:base_uint
operator =	json/json_spirit_value.h	/^    Value_impl< Config >& Value_impl< Config >::operator=( const Value_impl& lhs )$/;"	f	class:json_spirit::Value_impl
operator =	leveldb/include/leveldb/status.h	/^inline void Status::operator=(const Status& s) {$/;"	f	class:leveldb::Status
operator =	policy/licenseinfo.h	/^    inline CLicenseInfo& operator=(const CLicenseInfo& rhs)$/;"	f	class:CLicenseInfo
operator =	primitives/transaction.cpp	/^CTransaction& CTransaction::operator=(const CTransaction &tx) {$/;"	f	class:CTransaction
operator =	script/script.h	/^    inline CScriptNum& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator =	test/bignum.h	/^    CBigNum& operator=(const CBigNum& b)$/;"	f	class:CBigNum
operator ==	amount.h	/^    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator ==	arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }$/;"	f	class:base_uint
operator ==	arith_uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }$/;"	f	class:base_uint
operator ==	base58.h	/^    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	cache.h	/^    bool operator==(const order_info_ &b) const{$/;"	f	struct:order_list::order_info_
operator ==	chain.h	/^    friend bool operator==(const CChain &a, const CChain &b) {$/;"	f	class:CChain
operator ==	chain.h	/^    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {$/;"	f	struct:CDiskBlockPos
operator ==	coins.h	/^    friend bool operator==(const CCoins &a, const CCoins &b) {$/;"	f	class:CCoins
operator ==	json/json_spirit_error_position.h	/^    inline bool Error_position::operator==( const Error_position& lhs ) const$/;"	f	class:json_spirit::Error_position
operator ==	json/json_spirit_value.h	/^    bool Pair_impl< Config >::operator==( const Pair_impl< Config >& lhs ) const$/;"	f	class:json_spirit::Pair_impl
operator ==	json/json_spirit_value.h	/^    bool Value_impl< Config >::operator==( const Value_impl& lhs ) const$/;"	f	class:json_spirit::Value_impl
operator ==	key.h	/^    friend bool operator==(const CExtKey& a, const CExtKey& b)$/;"	f	struct:CExtKey
operator ==	key.h	/^    friend bool operator==(const CKey& a, const CKey& b)$/;"	f	class:CKey
operator ==	leveldb/include/leveldb/slice.h	/^inline bool operator==(const Slice& x, const Slice& y) {$/;"	f	namespace:leveldb
operator ==	mruset.h	/^    bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }$/;"	f	class:mruset
operator ==	mruset.h	/^    bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }$/;"	f	class:mruset
operator ==	netbase.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	netbase.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	netbase.cpp	/^bool operator==(const CSubNet& a, const CSubNet& b)$/;"	f
operator ==	primitives/transaction.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	primitives/transaction.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	primitives/transaction.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	primitives/transaction.h	/^    friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	pubkey.h	/^    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)$/;"	f	struct:CExtPubKey
operator ==	pubkey.h	/^    friend bool operator==(const CPubKey& a, const CPubKey& b)$/;"	f	class:CPubKey
operator ==	script/script.h	/^    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum
operator ==	script/script.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum
operator ==	script/standard.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	test/bignum.h	/^inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }$/;"	f
operator ==	uint256.h	/^    friend inline bool operator==(const base_blob& a, const base_blob& b) { return memcmp(a.data, b.data, sizeof(a.data)) == 0; }$/;"	f	class:base_blob
operator >	amount.h	/^    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >	arith_uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }$/;"	f	class:base_uint
operator >	base58.h	/^    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	script/script.h	/^    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum
operator >	script/script.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum
operator >	test/bignum.h	/^inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }$/;"	f
operator >=	amount.h	/^    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }$/;"	f	class:CFeeRate
operator >=	arith_uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }$/;"	f	class:base_uint
operator >=	base58.h	/^    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	script/script.h	/^    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum
operator >=	script/script.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum
operator >=	test/bignum.h	/^inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }$/;"	f
operator >>	arith_uint256.h	/^    friend inline const base_uint operator>>(const base_uint& a, int shift) { return base_uint(a) >>= shift; }$/;"	f	class:base_uint
operator >>	script/bitcoinconsensus.cpp	/^    TxInputStream& operator>>(T& obj)$/;"	f	class:__anon90::TxInputStream
operator >>	streams.h	/^    CAutoFile& operator>>(T& obj)$/;"	f	class:CAutoFile
operator >>	streams.h	/^    CBufferedFile& operator>>(T& obj) {$/;"	f	class:CBufferedFile
operator >>	streams.h	/^    CDataStream& operator>>(T& obj)$/;"	f	class:CDataStream
operator >>=	arith_uint256.cpp	/^base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator []	chain.h	/^    CBlockIndex *operator[](int nHeight) const {$/;"	f	class:CChain
operator []	leveldb/include/leveldb/slice.h	/^  char operator[](size_t n) const {$/;"	f	class:leveldb::Slice
operator []	pubkey.h	/^    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }$/;"	f	class:CPubKey
operator []	rpcserver.cpp	/^const CRPCCommand *CRPCTable::operator[](string name) const$/;"	f	class:CRPCTable
operator []	streams.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	streams.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	univalue/univalue.cpp	/^const UniValue& UniValue::operator[](const std::string& key) const$/;"	f	class:UniValue
operator []	univalue/univalue.cpp	/^const UniValue& UniValue::operator[](unsigned int index) const$/;"	f	class:UniValue
operator ^	arith_uint256.h	/^    friend inline const base_uint operator^(const base_uint& a, const base_uint& b) { return base_uint(a) ^= b; }$/;"	f	class:base_uint
operator ^=	arith_uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	arith_uint256.h	/^    base_uint& operator^=(uint64_t b)$/;"	f	class:base_uint
operator bool	sync.h	/^    operator bool()$/;"	f	class:CMutexLock
operator bool	sync.h	/^    operator bool()$/;"	f	class:CSemaphoreGrant
operator |	arith_uint256.h	/^    friend inline const base_uint operator|(const base_uint& a, const base_uint& b) { return base_uint(a) |= b; }$/;"	f	class:base_uint
operator |=	arith_uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	arith_uint256.h	/^    base_uint& operator|=(uint64_t b)$/;"	f	class:base_uint
operator ~	arith_uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
optIndent	util.cpp	/^static const int optIndent = 2;$/;"	v	file:
option_config_	leveldb/db/db_test.cc	/^  int option_config_;$/;"	m	class:leveldb::DBTest	file:
options	leveldb/table/table.cc	/^  Options options;$/;"	m	struct:leveldb::Table::Rep	file:
options	leveldb/table/table_builder.cc	/^  Options options;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
options	leveldbwrapper.h	/^    leveldb::Options options;$/;"	m	class:CLevelDBWrapper
options_	leveldb/db/autocompact_test.cc	/^  Options options_;$/;"	m	class:leveldb::AutoCompactTest	file:
options_	leveldb/db/corruption_test.cc	/^  Options options_;$/;"	m	class:leveldb::CorruptionTest	file:
options_	leveldb/db/db_impl.h	/^  const Options options_;  \/\/ options_.comparator == &internal_comparator_$/;"	m	class:leveldb::DBImpl
options_	leveldb/db/db_test.cc	/^  const Options options_;$/;"	m	class:leveldb::ModelDB	file:
options_	leveldb/db/repair.cc	/^  Options const options_;$/;"	m	class:leveldb::__anon17::Repairer	file:
options_	leveldb/db/table_cache.h	/^  const Options* options_;$/;"	m	class:leveldb::TableCache
options_	leveldb/db/version_set.h	/^  const Options* const options_;$/;"	m	class:leveldb::VersionSet
options_	leveldb/table/block_builder.h	/^  const Options*        options_;$/;"	m	class:leveldb::BlockBuilder
options_	leveldb/table/table_test.cc	/^  Options options_;$/;"	m	class:leveldb::Harness	file:
options_	leveldb/table/two_level_iterator.cc	/^  const ReadOptions options_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
order	mruset.h	/^    std::vector<iterator> order;$/;"	m	class:mruset
order_info_	cache.h	/^    order_info_() : address(""), buy_amount(0), sell_amount(0) { hash.SetNull(); }$/;"	f	struct:order_list::order_info_
order_info_	cache.h	/^struct order_info_$/;"	s	namespace:order_list
order_list	cache.cpp	/^namespace order_list$/;"	n	file:
order_list	cache.h	/^namespace order_list$/;"	n
org.bitcoin	secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^package org.bitcoin;$/;"	p
os	test/bctest.py	/^import os$/;"	i
os_	json/json_spirit_writer_template.h	/^        Ostream_type& os_;$/;"	m	class:json_spirit::Generator
other	support/allocators/secure.h	/^        typedef secure_allocator<_Other> other;$/;"	t	struct:secure_allocator::rebind
other	support/allocators/zeroafterfree.h	/^        typedef zero_after_free_allocator<_Other> other;$/;"	t	struct:zero_after_free_allocator::rebind
out	rest.cpp	/^    CTxOut out;$/;"	m	struct:CCoin	file:
out_hash	test/handler_license.cpp	/^    uint256 license_hash, transfer_hash, out_hash;$/;"	m	struct:TransferLicenseHandlerCheckValidFixture	file:
out_hash	test/handler_license.cpp	/^    uint256 mint_admin_hash, license_hash, out_hash;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
out_hash	test/handler_normal.cpp	/^    uint256 in_hash, member_hash, out_hash;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
outer	crypto/hmac_sha256.h	/^    CSHA256 outer;$/;"	m	class:CHMAC_SHA256
outer	crypto/hmac_sha512.h	/^    CSHA512 outer;$/;"	m	class:CHMAC_SHA512
outer	secp256k1/src/hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon81
outfile	leveldb/db/db_impl.cc	/^  WritableFile* outfile;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
output	json/json_spirit_writer_template.h	/^        void output( bool b )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Array_type& arr )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Obj_member_type& member )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Object_type& obj )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const String_type& s )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Value_type& value )$/;"	f	class:json_spirit::Generator
outputEscape	univalue/gen.cpp	/^static void outputEscape()$/;"	f	file:
output_array_or_obj	json/json_spirit_writer_template.h	/^        void output_array_or_obj( const T& t, Char_type start_char, Char_type end_char )$/;"	f	class:json_spirit::Generator
output_int	json/json_spirit_writer_template.h	/^        void output_int( const Value_type& value )$/;"	f	class:json_spirit::Generator
outputs	leveldb/db/db_impl.cc	/^  std::vector<Output> outputs;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
overlapped_bytes_	leveldb/db/version_set.h	/^  int64_t overlapped_bytes_;  \/\/ Bytes of overlap between current output$/;"	m	class:leveldb::Compaction
owned_	leveldb/db/db_test.cc	/^    const bool owned_;  \/\/ Do we own map_$/;"	m	class:leveldb::ModelDB::ModelIter	file:
owned_	leveldb/table/block.h	/^  bool owned_;                  \/\/ Block owns data_[]$/;"	m	class:leveldb::Block
owns_cache_	leveldb/db/db_impl.h	/^  bool owns_cache_;$/;"	m	class:leveldb::DBImpl
owns_cache_	leveldb/db/repair.cc	/^  bool owns_cache_;$/;"	m	class:leveldb::__anon17::Repairer	file:
owns_info_log_	leveldb/db/db_impl.h	/^  bool owns_info_log_;$/;"	m	class:leveldb::DBImpl
owns_info_log_	leveldb/db/repair.cc	/^  bool owns_info_log_;$/;"	m	class:leveldb::__anon17::Repairer	file:
p 	leveldb/doc/doc.css	/^p {$/;"	s
pContent	leveldb/util/env_win.cc	/^    void* pContent;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
pCurrentBaseParams	chainparamsbase.cpp	/^static CBaseChainParams* pCurrentBaseParams = 0;$/;"	v	file:
pCurrentParams	chainparams.cpp	/^static CChainParams *pCurrentParams = 0;$/;"	v	file:
p_util_hexdigit	utilstrencodings.cpp	/^const signed char p_util_hexdigit[256] =$/;"	v
pactivate	cache.cpp	/^activate_addr::ActivateAddr *pactivate = NULL;$/;"	v
page_mask	support/pagelocker.h	/^    size_t page_size, page_mask;$/;"	m	class:LockedPageManagerBase
page_size	support/pagelocker.h	/^    size_t page_size, page_mask;$/;"	m	class:LockedPageManagerBase
pair_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
paramIdx	rpcclient.cpp	/^    int paramIdx;                      \/\/! 0-based idx of param to convert$/;"	m	class:CRPCConvertParam	file:
params	rpcserver.cpp	/^    Array params;$/;"	m	class:JSONRequest	file:
params	test/test_bitcoin.h	/^    json_spirit::Array params;$/;"	m	struct:WalletSetupFixture
paranoid_checks	leveldb/include/leveldb/options.h	/^  bool paranoid_checks;$/;"	m	struct:leveldb::Options
parent	memusage.h	/^    void* parent;$/;"	m	struct:memusage::stl_tree_node
parse	rpcserver.cpp	/^void JSONRequest::parse(const Value& valRequest)$/;"	f	class:JSONRequest
parseIntAndAdvance	tinyformat.h	/^        static int parseIntAndAdvance(const char*& c)$/;"	f	class:tinyformat::detail::FormatIterator
password	netbase.cpp	/^    std::string password;$/;"	m	struct:ProxyCredentials	file:
pathAddr	net.h	/^    boost::filesystem::path pathAddr;$/;"	m	class:CAddrDB
pathCached	util.cpp	/^static boost::filesystem::path pathCached;$/;"	v	file:
pathCachedNetSpecific	util.cpp	/^static boost::filesystem::path pathCachedNetSpecific;$/;"	v	file:
pathTemp	test/test_bitcoin.h	/^    boost::filesystem::path pathTemp;$/;"	m	struct:TestingSetup
path_addr_	net.cpp	/^boost::filesystem::path CNetRecorder::path_addr_;$/;"	m	class:CNetRecorder	file:
path_addr_	net.h	/^    static boost::filesystem::path path_addr_;$/;"	m	class:CNetRecorder
pbegin	serialize.h	/^    char* pbegin;$/;"	m	class:CFlatData
pblocktree	main.cpp	/^CBlockTreeDB *pblocktree = NULL;$/;"	v
pchCommand	protocol.h	/^    char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchIPv4	netbase.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	chainparams.h	/^    CMessageHeader::MessageStartChars pchMessageStart;$/;"	m	class:CChainParams
pchMessageStart	protocol.h	/^    char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	netbase.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pcoinsTip	main.cpp	/^CCoinsViewCache *pcoinsTip = NULL;$/;"	v
pcoinscatcher	init.cpp	/^static CCoinsViewErrorCatcher *pcoinscatcher = NULL;$/;"	v	file:
pcoinsdbview	init.cpp	/^static CCoinsViewDB *pcoinsdbview = NULL;$/;"	v	file:
pcoinsdbview	test/test_bitcoin.h	/^    CCoinsViewDB *pcoinsdbview;$/;"	m	struct:TestingSetup
pcontainer_	cache.h	/^    Tc *pcontainer_;$/;"	m	class:CacheInterface
pdb	leveldbwrapper.h	/^    leveldb::DB* pdb;$/;"	m	class:CLevelDBWrapper
pdb	wallet/db.h	/^    Db* pdb;$/;"	m	class:CDB
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	secp256k1/Makefile	/^pdfdir = ${docdir}$/;"	m
peer	rpcserver.cpp	/^    typename Protocol::endpoint peer;$/;"	m	class:AcceptedConnectionImpl	file:
peer_address_to_string	rpcserver.cpp	/^    virtual std::string peer_address_to_string() const$/;"	f	class:AcceptedConnectionImpl
pend	serialize.h	/^    char* pend;$/;"	m	class:CFlatData
pending_handle	leveldb/table/table_builder.cc	/^  BlockHandle pending_handle;  \/\/ Handle to add to index block$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_index_entry	leveldb/table/table_builder.cc	/^  bool pending_index_entry;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
pending_outputs_	leveldb/db/db_impl.h	/^  std::set<uint64_t> pending_outputs_;$/;"	m	class:leveldb::DBImpl
penv	leveldbwrapper.h	/^    leveldb::Env* penv;$/;"	m	class:CLevelDBWrapper
permitnode	rpcnet.cpp	/^Value permitnode(const Array& params, bool fHelp)$/;"	f
pfilter	net.h	/^    CBloomFilter* pfilter;$/;"	m	class:CNode
phase	leveldb/db/c_test.c	/^const char* phase = "";$/;"	v
phashBlock	chain.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
pindex	main.cpp	/^        CBlockIndex *pindex;  \/\/! Optional.$/;"	m	struct:__anon46::QueuedBlock	file:
pindexBestForkBase	main.cpp	/^CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;$/;"	v
pindexBestForkTip	main.cpp	/^CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;$/;"	v
pindexBestHeader	main.cpp	/^CBlockIndex *pindexBestHeader = NULL;$/;"	v
pindexBestInvalid	main.cpp	/^    CBlockIndex *pindexBestInvalid;$/;"	m	namespace:__anon46	file:
pindexBestKnownBlock	main.cpp	/^    CBlockIndex *pindexBestKnownBlock;$/;"	m	struct:__anon47::CNodeState	file:
pindexLastCommonBlock	main.cpp	/^    CBlockIndex *pindexLastCommonBlock;$/;"	m	struct:__anon47::CNodeState	file:
pindexLastGetBlocksBegin	net.h	/^    CBlockIndex* pindexLastGetBlocksBegin;$/;"	m	class:CNode
pinfo	main.cpp	/^    CLicenseInfo *pinfo;$/;"	m	class:type_transaction_handler::__anon48::Handler_License_	file:
pinfo	test/handler_normal.cpp	/^    CLicenseInfo *pinfo;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
ping	rpcnet.cpp	/^Value ping(const Array& params, bool fHelp)$/;"	f
pkey	ecwrapper.h	/^    EC_KEY *pkey;$/;"	m	class:CECKey
pkgconfig_DATA	secp256k1/Makefile	/^pkgconfig_DATA = libsecp256k1.pc$/;"	m
pkgconfigdir	secp256k1/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/gcoin$/;"	m
pkgdatadir	secp256k1/Makefile	/^pkgdatadir = $(datadir)\/libsecp256k1$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/gcoin$/;"	m
pkgincludedir	secp256k1/Makefile	/^pkgincludedir = $(includedir)\/libsecp256k1$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/gcoin$/;"	m
pkglibdir	secp256k1/Makefile	/^pkglibdir = $(libdir)\/libsecp256k1$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/gcoin$/;"	m
pkglibexecdir	secp256k1/Makefile	/^pkglibexecdir = $(libexecdir)\/libsecp256k1$/;"	m
plicense	cache.cpp	/^color_license::ColorLicense *plicense = NULL;$/;"	v
pminer	cache.cpp	/^block_miner::BlockMiner *pminer = NULL;$/;"	v
pn	arith_uint256.h	/^    uint32_t pn[WIDTH];$/;"	m	class:base_uint
pnSeed6_gcoin	chainparamsseeds.h	/^static SeedSpec6 pnSeed6_gcoin[] = {$/;"	v
pnSeed6_test	chainparamsseeds.h	/^static SeedSpec6 pnSeed6_test[] = {$/;"	v
pnodeLocalHost	net.cpp	/^static CNode* pnodeLocalHost = NULL;$/;"	v	file:
pointer	support/allocators/secure.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pointer	support/allocators/zeroafterfree.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:zero_after_free_allocator
policy_	leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockBuilder
policy_	leveldb/table/filter_block.h	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::FilterBlockReader
policy_	leveldb/table/filter_block_test.cc	/^  TestHashFilter policy_;$/;"	m	class:leveldb::FilterBlockTest	file:
policy_	leveldb/util/bloom_test.cc	/^  const FilterPolicy* policy_;$/;"	m	class:leveldb::BloomTest	file:
pop_lock	sync.cpp	/^static void pop_lock()$/;"	f	file:
popstack	script/interpreter.cpp	/^static inline void popstack(vector<valtype>& stack)$/;"	f	file:
porder	cache.cpp	/^order_list::OrderList *porder = NULL;$/;"	v
port	chainparams.h	/^    uint16_t port;$/;"	m	struct:SeedSpec6
port	leveldb/port/atomic_pointer.h	/^namespace port {$/;"	n	namespace:leveldb
port	leveldb/port/port_example.h	/^namespace port {$/;"	n	namespace:leveldb
port	leveldb/port/port_posix.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	leveldb/port/port_posix.h	/^namespace port {$/;"	n	namespace:leveldb
port	leveldb/port/port_win.cc	/^namespace port {$/;"	n	namespace:leveldb	file:
port	leveldb/port/port_win.h	/^namespace port {$/;"	n	namespace:leveldb
port	netbase.h	/^        unsigned short port; \/\/ host order$/;"	m	class:CService
pos_	leveldb/db/db_bench.cc	/^  int pos_;$/;"	m	class:leveldb::__anon15::RandomGenerator	file:
pos_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int pos_;$/;"	m	class:leveldb::__anon35::RandomGenerator	file:
pos_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int pos_;$/;"	m	class:leveldb::__anon36::RandomGenerator	file:
pos_	leveldb/helpers/memenv/memenv.cc	/^  uint64_t pos_;$/;"	m	class:leveldb::__anon26::SequentialFileImpl	file:
posn_begin_	json/json_spirit_stream_reader.h	/^        Posn_iter_t posn_begin_, posn_end_;$/;"	m	class:json_spirit::Stream_reader_thrower
posn_end_	json/json_spirit_stream_reader.h	/^        Posn_iter_t posn_begin_, posn_end_;$/;"	m	class:json_spirit::Stream_reader_thrower
post	sync.h	/^    void post()$/;"	f	class:CSemaphore
potential_deadlock_detected	sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
powLimit	consensus/params.h	/^    uint256 powLimit;$/;"	m	struct:Consensus::Params
ppmutexOpenSSL	util.cpp	/^static CCriticalSection** ppmutexOpenSSL;$/;"	v	file:
pprev	chain.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
ppszTypeName	protocol.cpp	/^static const char* ppszTypeName[] =$/;"	v	file:
pqueue	checkqueue.h	/^    CCheckQueue<T>* pqueue;$/;"	m	class:CCheckQueueControl
pre 	leveldb/doc/doc.css	/^pre {$/;"	s
pre_g	secp256k1/src/ecmult.h	/^    secp256k1_ge_storage_t (*pre_g)[];    \/* odd multiples of the generator *\/$/;"	m	struct:__anon78
pre_g_128	secp256k1/src/ecmult.h	/^    secp256k1_ge_storage_t (*pre_g_128)[]; \/* odd multiples of 2^128*generator *\/$/;"	m	struct:__anon78
prec	secp256k1/src/ecmult_gen.h	/^    secp256k1_ge_storage_t (*prec)[64][16]; \/* prec[j][i] = 16^j * i * G + U_i *\/$/;"	m	struct:__anon68
precomputed_nonce_function	secp256k1/src/tests.c	/^static int precomputed_nonce_function(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data) {$/;"	f	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	rest.cpp	/^    const char* prefix;$/;"	m	struct:__anon61	file:
prefix	secp256k1/Makefile	/^prefix = \/usr\/local$/;"	m
pretty_	json/json_spirit_writer_template.h	/^        bool pretty_;$/;"	m	class:json_spirit::Generator
prev	leveldb/util/cache.cc	/^  LRUHandle* prev;$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
prev_	leveldb/db/snapshot.h	/^  SnapshotImpl* prev_;$/;"	m	class:leveldb::SnapshotImpl
prev_	leveldb/db/version_set.h	/^  Version* prev_;               \/\/ Previous version in linked list$/;"	m	class:leveldb::Version
prev_log_number_	leveldb/db/version_edit.h	/^  uint64_t prev_log_number_;$/;"	m	class:leveldb::VersionEdit
prev_log_number_	leveldb/db/version_set.h	/^  uint64_t prev_log_number_;  \/\/ 0 or backing store for memtable being compacted$/;"	m	class:leveldb::VersionSet
prevout	primitives/transaction.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
priLikely	policy/fees.h	/^    double priLikely, priUnlikely;$/;"	m	class:CBlockPolicyEstimator
priStats	policy/fees.h	/^    TxConfirmStats feeStats, priStats;$/;"	m	class:CBlockPolicyEstimator
priUnlikely	policy/fees.h	/^    double priLikely, priUnlikely;$/;"	m	class:CBlockPolicyEstimator
printFormatStringLiteral	tinyformat.h	/^        static const char* printFormatStringLiteral(std::ostream& out,$/;"	f	class:tinyformat::detail::FormatIterator
print_number	secp256k1/src/bench.h	/^void print_number(double x) {$/;"	f
print_usage	secp256k1/build-aux/test-driver	/^print_usage ()$/;"	f
printf	tinyformat.h	/^void printf(const char* fmt, const T1& v1, const Args&... args)$/;"	f	namespace:tinyformat
prioritisetransaction	rpcmining.cpp	/^Value prioritisetransaction(const Array& params, bool fHelp)$/;"	f
proc	leveldb/util/env_win.cc	/^    ScheduleProc proc;$/;"	m	struct:leveldb::Win32::WorkItemWrapper	file:
processBlock	policy/fees.cpp	/^void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,$/;"	f	class:CBlockPolicyEstimator
processBlockTx	policy/fees.cpp	/^void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)$/;"	f	class:CBlockPolicyEstimator
processTransaction	policy/fees.cpp	/^void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool fCurrentEstimate)$/;"	f	class:CBlockPolicyEstimator
program_details	secp256k1/build-aux/missing	/^program_details ()$/;"	f
program_options	util.cpp	/^namespace program_options$/;"	n	namespace:boost	file:
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	secp256k1/Makefile	/^program_transform_name = s,x,x,$/;"	m
prototypes	secp256k1/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxy	netbase.h	/^    CService proxy;$/;"	m	class:proxyType
proxyInfo	netbase.cpp	/^static proxyType proxyInfo[NET_MAX];$/;"	v	file:
proxyType	netbase.h	/^    proxyType(): randomize_credentials(false) {}$/;"	f	class:proxyType
proxyType	netbase.h	/^    proxyType(const CService &proxy, bool randomize_credentials=false): proxy(proxy), randomize_credentials(randomize_credentials) {}$/;"	f	class:proxyType
proxyType	netbase.h	/^class proxyType$/;"	c
pruneSpent	txmempool.cpp	/^void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)$/;"	f	class:CTxMemPool
prv	test/bip32_tests.cpp	/^    std::string prv;$/;"	m	struct:TestDerivation	file:
psdir	Makefile	/^psdir = ${docdir}$/;"	m
psdir	secp256k1/Makefile	/^psdir = ${docdir}$/;"	m
pskip	chain.h	/^    CBlockIndex* pskip;$/;"	m	class:CBlockIndex
pszBase58	base58.cpp	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v	file:
ptr	memusage.h	/^    void* ptr;$/;"	m	struct:memusage::boost_unordered_node
ptx	miner.cpp	/^    const CTransaction* ptx;$/;"	m	class:COrphan	file:
ptx	txmempool.h	/^    const CTransaction* ptx;$/;"	m	class:CInPoint
ptxTo	main.h	/^    const CTransaction *ptxTo;$/;"	m	class:CScriptCheck
pub	test/bip32_tests.cpp	/^    std::string pub;$/;"	m	struct:TestDerivation	file:
pubkey	pubkey.h	/^    CPubKey pubkey;$/;"	m	struct:CExtPubKey
pubkey	secp256k1/src/bench_verify.c	/^    unsigned char pubkey[33];$/;"	m	struct:__anon66	file:
pubkey	wallet/hdkeystore.h	/^    CPubKey pubkey; \/\/the actual pubkey$/;"	m	class:CHDPubKey
pubkey0	test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon94::KeyData	file:
pubkey0C	test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon94::KeyData	file:
pubkey0H	test/script_tests.cpp	/^    CPubKey pubkey0, pubkey0C, pubkey0H;$/;"	m	struct:__anon94::KeyData	file:
pubkey1	test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon94::KeyData	file:
pubkey1C	test/script_tests.cpp	/^    CPubKey pubkey1, pubkey1C;$/;"	m	struct:__anon94::KeyData	file:
pubkey2	test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon94::KeyData	file:
pubkey2C	test/script_tests.cpp	/^    CPubKey pubkey2, pubkey2C;$/;"	m	struct:__anon94::KeyData	file:
pubkeylen	secp256k1/src/bench_verify.c	/^    int pubkeylen;$/;"	m	struct:__anon66	file:
purpose	wallet/wallet.h	/^    std::string purpose;$/;"	m	class:CAddressBookData
push	test/script_tests.cpp	/^    std::vector<unsigned char> push;$/;"	m	class:__anon94::TestBuilder	file:
pushKV	univalue/univalue.cpp	/^bool UniValue::pushKV(const std::string& key, const UniValue& val)$/;"	f	class:UniValue
pushKV	univalue/univalue.h	/^    bool pushKV(const std::string& key, const char *val_) {$/;"	f	class:UniValue
pushKV	univalue/univalue.h	/^    bool pushKV(const std::string& key, const std::string& val) {$/;"	f	class:UniValue
pushKV	univalue/univalue.h	/^    bool pushKV(const std::string& key, double val) {$/;"	f	class:UniValue
pushKV	univalue/univalue.h	/^    bool pushKV(const std::string& key, int val) {$/;"	f	class:UniValue
pushKV	univalue/univalue.h	/^    bool pushKV(const std::string& key, int64_t val) {$/;"	f	class:UniValue
pushKV	univalue/univalue.h	/^    bool pushKV(const std::string& key, uint64_t val) {$/;"	f	class:UniValue
pushKVs	univalue/univalue.cpp	/^bool UniValue::pushKVs(const UniValue& obj)$/;"	f	class:UniValue
push_back	univalue/univalue.cpp	/^bool UniValue::push_back(const UniValue& val)$/;"	f	class:UniValue
push_back	univalue/univalue.h	/^    bool push_back(const char *val_) {$/;"	f	class:UniValue
push_back	univalue/univalue.h	/^    bool push_back(const std::string& val_) {$/;"	f	class:UniValue
push_backV	univalue/univalue.cpp	/^bool UniValue::push_backV(const std::vector<UniValue>& vec)$/;"	f	class:UniValue
push_int64	script/script.h	/^    CScript& push_int64(int64_t n)$/;"	f	class:CScript
push_lock	sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)$/;"	f	file:
pwallet	wallet/wallet.h	/^    CWallet* pwallet;$/;"	m	class:CReserveKey
pwallet	wallet/wallet.h	/^    const CWallet* pwallet;$/;"	m	class:CWalletTx
pwalletMain	test/test_bitcoin.cpp	/^CWallet* pwalletMain;$/;"	v
pwalletOld	test/test_bitcoin.h	/^    CWallet *pwalletOld;$/;"	m	struct:WalletSetupFixture
pwalletTest	test/test_bitcoin.h	/^    CWallet_UnitTest *pwalletTest;$/;"	m	struct:WalletSetupFixture
pwalletdbEncryption	wallet/wallet.h	/^    CWalletDB *pwalletdbEncryption;$/;"	m	class:CWallet
queryHashes	txmempool.cpp	/^void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)$/;"	f	class:CTxMemPool
queue	checkqueue.h	/^    std::vector<T> queue;$/;"	m	class:CCheckQueue
queue_	leveldb/util/env_posix.cc	/^  BGQueue queue_;$/;"	m	class:leveldb::__anon42::PosixEnv	file:
quit_flag_	leveldb/db/skiplist_test.cc	/^  port::AtomicPointer quit_flag_;$/;"	m	class:leveldb::TestState	file:
r	secp256k1/src/ecdsa.h	/^    secp256k1_scalar_t r, s;$/;"	m	struct:__anon69
rand	leveldb/db/db_bench.cc	/^  Random rand;         \/\/ Has different seeds for different threads$/;"	m	struct:leveldb::__anon15::ThreadState	file:
rand_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
rand_	leveldb/doc/bench/db_bench_tree_db.cc	/^  Random rand_;$/;"	m	class:leveldb::Benchmark	file:
random_fe	secp256k1/src/tests.c	/^void random_fe(secp256k1_fe_t *x) {$/;"	f
random_fe_non_square	secp256k1/src/tests.c	/^void random_fe_non_square(secp256k1_fe_t *ns) {$/;"	f
random_fe_non_zero	secp256k1/src/tests.c	/^void random_fe_non_zero(secp256k1_fe_t *nz) {$/;"	f
random_field_element_magnitude	secp256k1/src/tests.c	/^void random_field_element_magnitude(secp256k1_fe_t *fe) {$/;"	f
random_field_element_test	secp256k1/src/tests.c	/^void random_field_element_test(secp256k1_fe_t *fe) {$/;"	f
random_group_element_jacobian_test	secp256k1/src/tests.c	/^void random_group_element_jacobian_test(secp256k1_gej_t *gej, const secp256k1_ge_t *ge) {$/;"	f
random_group_element_test	secp256k1/src/tests.c	/^void random_group_element_test(secp256k1_ge_t *ge) {$/;"	f
random_num_negate	secp256k1/src/tests.c	/^void random_num_negate(secp256k1_num_t *num) {$/;"	f
random_num_order	secp256k1/src/tests.c	/^void random_num_order(secp256k1_num_t *num) {$/;"	f
random_num_order_test	secp256k1/src/tests.c	/^void random_num_order_test(secp256k1_num_t *num) {$/;"	f
random_read_counter_	leveldb/db/db_test.cc	/^  AtomicCounter random_read_counter_;$/;"	m	class:leveldb::SpecialEnv	file:
random_scalar_order	secp256k1/src/tests.c	/^void random_scalar_order(secp256k1_scalar_t *num) {$/;"	f
random_scalar_order_test	secp256k1/src/tests.c	/^void random_scalar_order_test(secp256k1_scalar_t *num) {$/;"	f
random_sign	secp256k1/src/tests.c	/^void random_sign(secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *key, const secp256k1_scalar_t *msg, int *recid) {$/;"	f
randomize_credentials	netbase.h	/^    bool randomize_credentials;$/;"	m	class:proxyType
rdbuf	streams.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(const std::string& s, json_spirit::Value& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(const std::string& s, mValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(const std::wstring& s, wValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(const std::wstring& s, wmValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::istream& is, json_spirit::Value& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::istream& is, mValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::string::const_iterator& begin, std::string::const_iterator end, json_spirit::Value& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::string::const_iterator& begin, std::string::const_iterator end, mValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::wistream& is, wValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::wistream& is, wmValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value)$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read(std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value)$/;"	f	class:json_spirit
read	rpcprotocol.h	/^    std::streamsize read(char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
read	script/bitcoinconsensus.cpp	/^    TxInputStream& read(char* pch, size_t nSize)$/;"	f	class:__anon90::TxInputStream
read	streams.h	/^    CAutoFile& read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	streams.h	/^    CBufferedFile& read(char *pch, size_t nSize) {$/;"	f	class:CBufferedFile
read	streams.h	/^    CDataStream& read(char* pch, size_t nSize)$/;"	f	class:CDataStream
read	univalue/univalue.h	/^    bool read(const std::string& rawStr) {$/;"	f	class:UniValue
read	univalue/univalue_read.cpp	/^bool UniValue::read(const char *raw)$/;"	f	class:UniValue
readData	net.cpp	/^int CNetMessage::readData(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
readHeader	net.cpp	/^int CNetMessage::readHeader(const char *pch, unsigned int nBytes)$/;"	f	class:CNetMessage
read_block	test/checkblock_tests.cpp	/^bool read_block(const std::string& filename, CBlock& block)$/;"	f
read_json	test/script_tests.cpp	/^read_json(const std::string& jsondata)$/;"	f
read_lines	test/alert_tests.cpp	/^    static std::vector<std::string> read_lines(boost::filesystem::path filepath)$/;"	f	struct:ReadAlerts
read_next	json/json_spirit_stream_reader.h	/^        bool read_next( Value_type& value )$/;"	f	class:json_spirit::Stream_reader
read_next	json/json_spirit_stream_reader.h	/^        void read_next( Value_type& value )$/;"	f	class:json_spirit::Stream_reader_thrower
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(const std::string& s, json_spirit::Value& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(const std::string& s, mValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(const std::wstring& s, wValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(const std::wstring& s, wmValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::istream& is, json_spirit::Value& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::istream& is, mValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::string::const_iterator& begin, std::string::const_iterator end, json_spirit::Value& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::string::const_iterator& begin, std::string::const_iterator end, mValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::wistream& is, wValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::wistream& is, wmValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value)$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw(std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value)$/;"	f	class:json_spirit
read_range	json/json_spirit_reader_template.h	/^    bool read_range( Iter_type& begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
read_range_or_throw	json/json_spirit_reader_template.h	/^    Iter_type read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
read_stream	json/json_spirit_reader_template.h	/^    bool read_stream( Istream_type& is, Value_type& value )$/;"	f	namespace:json_spirit
read_stream_or_throw	json/json_spirit_reader_template.h	/^    void read_stream_or_throw( Istream_type& is, Value_type& value )$/;"	f	namespace:json_spirit
read_string	json/json_spirit_reader_template.h	/^    bool read_string( const String_type& s, Value_type& value )$/;"	f	namespace:json_spirit
read_string_or_throw	json/json_spirit_reader_template.h	/^    void read_string_or_throw( const String_type& s, Value_type& value )$/;"	f	namespace:json_spirit
reader_	leveldb/db/log_test.cc	/^  Reader reader_;$/;"	m	class:leveldb::log::LogTest	file:
reading_	leveldb/db/log_test.cc	/^  bool reading_;$/;"	m	class:leveldb::log::LogTest	file:
readoptions	leveldbwrapper.h	/^    leveldb::ReadOptions readoptions;$/;"	m	class:CLevelDBWrapper
reads_	leveldb/db/db_bench.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
reads_	leveldb/doc/bench/db_bench_tree_db.cc	/^  int reads_;$/;"	m	class:leveldb::Benchmark	file:
real_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
reason_	json/json_spirit_error_position.h	/^        std::string reason_;$/;"	m	struct:json_spirit::Error_position
rebind	support/allocators/secure.h	/^    struct rebind {$/;"	s	struct:secure_allocator
rebind	support/allocators/zeroafterfree.h	/^    struct rebind {$/;"	s	struct:zero_after_free_allocator
receiver	test/handler_normal.cpp	/^    std::string member, receiver;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
reconsiderblock	rpcblockchain.cpp	/^Value reconsiderblock(const Array& params, bool fHelp)$/;"	f
recorder_	net.cpp	/^CNetRecorder::CFileWriter CNetRecorder::recorder_;$/;"	m	class:CNetRecorder	file:
recorder_	net.h	/^    static CFileWriter recorder_;$/;"	m	class:CNetRecorder
reference	streams.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
reference	support/allocators/secure.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	support/allocators/zeroafterfree.h	/^    typedef typename base::reference reference;$/;"	t	struct:zero_after_free_allocator
refs	leveldb/db/version_edit.h	/^  int refs;$/;"	m	struct:leveldb::FileMetaData
refs	leveldb/util/cache.cc	/^  uint32_t refs;$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
refs_	leveldb/db/memtable.h	/^  int refs_;$/;"	m	class:leveldb::MemTable
refs_	leveldb/db/version_set.h	/^  int refs_;                    \/\/ Number of live refs to this version$/;"	m	class:leveldb::Version
refs_	leveldb/helpers/memenv/memenv.cc	/^  int refs_;  \/\/ Protected by refs_mutex_;$/;"	m	class:leveldb::__anon26::FileState	file:
refs_mutex_	leveldb/helpers/memenv/memenv.cc	/^  port::Mutex refs_mutex_;$/;"	m	class:leveldb::__anon26::FileState	file:
regTestParams	chainparams.cpp	/^static CRegTestParams regTestParams;$/;"	v	file:
regTestParams	chainparamsbase.cpp	/^static CBaseRegTestParams regTestParams;$/;"	v	file:
rejects	main.cpp	/^    std::vector<CBlockReject> rejects;$/;"	m	struct:__anon47::CNodeState	file:
release	streams.h	/^    FILE* release()             { FILE* ret = file; file = NULL; return ret; }$/;"	f	class:CAutoFile
remove	txmempool.cpp	/^void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)$/;"	f	class:CTxMemPool
removeCoinbaseSpends	txmempool.cpp	/^void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)$/;"	f	class:CTxMemPool
removeColorConflicts	txmempool.cpp	/^void CTxMemPool::removeColorConflicts(const CTransaction &tx, std::list<CTransaction>& removed)$/;"	f	class:CTxMemPool
removeConflicts	txmempool.cpp	/^void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)$/;"	f	class:CTxMemPool
removeForBlock	txmempool.cpp	/^void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,$/;"	f	class:CTxMemPool
removeTx	policy/fees.cpp	/^void CBlockPolicyEstimator::removeTx(uint256 hash)$/;"	f	class:CBlockPolicyEstimator
removeTx	policy/fees.cpp	/^void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex)$/;"	f	class:TxConfirmStats
remove_prefix	leveldb/include/leveldb/slice.h	/^  void remove_prefix(size_t n) {$/;"	f	class:leveldb::Slice
rep	leveldb/db/c.cc	/^  Env* rep;$/;"	m	struct:leveldb_env_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_cache_t        { Cache*            rep; };$/;"	m	struct:leveldb_cache_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_filelock_t     { FileLock*         rep; };$/;"	m	struct:leveldb_filelock_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_iterator_t     { Iterator*         rep; };$/;"	m	struct:leveldb_iterator_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_logger_t       { Logger*           rep; };$/;"	m	struct:leveldb_logger_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_options_t      { Options           rep; };$/;"	m	struct:leveldb_options_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_randomfile_t   { RandomAccessFile* rep; };$/;"	m	struct:leveldb_randomfile_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_readoptions_t  { ReadOptions       rep; };$/;"	m	struct:leveldb_readoptions_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_seqfile_t      { SequentialFile*   rep; };$/;"	m	struct:leveldb_seqfile_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_snapshot_t     { const Snapshot*   rep; };$/;"	m	struct:leveldb_snapshot_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_t              { DB*               rep; };$/;"	m	struct:leveldb_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_writablefile_t { WritableFile*     rep; };$/;"	m	struct:leveldb_writablefile_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_writebatch_t   { WriteBatch        rep; };$/;"	m	struct:leveldb_writebatch_t	file:
rep	leveldb/db/c.cc	/^struct leveldb_writeoptions_t { WriteOptions      rep; };$/;"	m	struct:leveldb_writeoptions_t	file:
rep_	leveldb/db/dbformat.h	/^  std::string rep_;$/;"	m	class:leveldb::InternalKey
rep_	leveldb/include/leveldb/cache.h	/^  Rep* rep_;$/;"	m	class:leveldb::Cache
rep_	leveldb/include/leveldb/table.h	/^  Rep* rep_;$/;"	m	class:leveldb::Table
rep_	leveldb/include/leveldb/table_builder.h	/^  Rep* rep_;$/;"	m	class:leveldb::TableBuilder
rep_	leveldb/include/leveldb/write_batch.h	/^  std::string rep_;  \/\/ See comment in write_batch.cc for the format of rep_$/;"	m	class:leveldb::WriteBatch
rep_	leveldb/port/atomic_pointer.h	/^  void* rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	leveldb/port/port_example.h	/^  intptr_t rep_;$/;"	m	class:leveldb::port::AtomicPointer
rep_	leveldb/port/port_win.h	/^  void * rep_;$/;"	m	class:leveldb::port::AtomicPointer
report_	leveldb/db/log_test.cc	/^  ReportCollector report_;$/;"	m	class:leveldb::log::LogTest	file:
reporter_	leveldb/db/log_reader.h	/^  Reporter* const reporter_;$/;"	m	class:leveldb::log::Reader
reqWallet	rpcserver.h	/^    bool reqWallet;$/;"	m	class:CRPCCommand
resendwallettransactions	wallet/rpcwallet.cpp	/^Value resendwallettransactions(const Array& params, bool fHelp)$/;"	f
reserve	streams.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
resetwarning	rpcmisc.cpp	/^Value resetwarning(const Array& params, bool fHelp)$/;"	f
resize	streams.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
rest_block	rest.cpp	/^static bool rest_block(AcceptedConnection* conn,$/;"	f	file:
rest_block_extended	rest.cpp	/^static bool rest_block_extended(AcceptedConnection* conn,$/;"	f	file:
rest_block_notxdetails	rest.cpp	/^static bool rest_block_notxdetails(AcceptedConnection* conn,$/;"	f	file:
rest_chaininfo	rest.cpp	/^static bool rest_chaininfo(AcceptedConnection* conn,$/;"	f	file:
rest_getutxos	rest.cpp	/^static bool rest_getutxos(AcceptedConnection* conn,$/;"	f	file:
rest_headers	rest.cpp	/^static bool rest_headers(AcceptedConnection* conn,$/;"	f	file:
rest_tx	rest.cpp	/^static bool rest_tx(AcceptedConnection* conn,$/;"	f	file:
restart_index_	leveldb/table/block.cc	/^  uint32_t restart_index_;  \/\/ Index of restart block in which current_ falls$/;"	m	class:leveldb::Block::Iter	file:
restart_interval	leveldb/table/table_test.cc	/^  int restart_interval;$/;"	m	struct:leveldb::TestArgs	file:
restart_offset_	leveldb/table/block.h	/^  uint32_t restart_offset_;     \/\/ Offset in data_ of restart array$/;"	m	class:leveldb::Block
restarts_	leveldb/table/block.cc	/^  uint32_t const restarts_;     \/\/ Offset of restart array (list of fixed32)$/;"	m	class:leveldb::Block::Iter	file:
restarts_	leveldb/table/block_builder.h	/^  std::vector<uint32_t> restarts_;    \/\/ Restart points$/;"	m	class:leveldb::BlockBuilder
result_	leveldb/table/filter_block.h	/^  std::string result_;            \/\/ Filter data computed so far$/;"	m	class:leveldb::FilterBlockBuilder
result_type	net.h	/^    typedef bool result_type;$/;"	t	struct:CombinerAll
retry	secp256k1/src/hash.h	/^    int retry;$/;"	m	struct:__anon82
return_string_	test/test_bitcoin.h	/^    std::string return_string_;$/;"	m	class:CWallet_UnitTest
returned_partial_	leveldb/db/log_test.cc	/^    bool returned_partial_;$/;"	m	class:leveldb::log::LogTest::StringSource	file:
reverse_compare	leveldb/table/table_test.cc	/^  bool reverse_compare;$/;"	m	struct:leveldb::TestArgs	file:
reverse_iterator	streams.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
reverse_key_comparator	leveldb/table/table_test.cc	/^static ReverseKeyComparator reverse_key_comparator;$/;"	m	namespace:leveldb	file:
rf	rest.cpp	/^    enum RetFormat rf;$/;"	m	struct:__anon60	typeref:enum:__anon60::RetFormat	file:
rf_names	rest.cpp	/^} rf_names[] = {$/;"	v	typeref:struct:__anon60	file:
rfc1123Time	rpcprotocol.cpp	/^static std::string rfc1123Time()$/;"	f	file:
right	memusage.h	/^    void* right;$/;"	m	struct:memusage::stl_tree_node
ripemd160	crypto/ripemd160.cpp	/^namespace ripemd160$/;"	n	namespace:__anon5	file:
rmap	limitedmap.h	/^    std::multimap<V, iterator> rmap;$/;"	m	class:limitedmap
rmap_iterator	limitedmap.h	/^    typedef typename std::multimap<V, iterator>::iterator rmap_iterator;$/;"	t	class:limitedmap
rnd_	leveldb/db/db_iter.cc	/^  Random rnd_;$/;"	m	class:leveldb::__anon22::DBIter	file:
rnd_	leveldb/db/skiplist.h	/^  Random rnd_;$/;"	m	class:leveldb::SkipList
rol	crypto/ripemd160.cpp	/^uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }$/;"	f	namespace:__anon5::ripemd160
roundint64	rpcserver.cpp	/^static inline int64_t roundint64(double d)$/;"	f	file:
rpcCvtTable	rpcclient.cpp	/^static CRPCConvertTable rpcCvtTable;$/;"	v	file:
rpc_acceptors	rpcserver.cpp	/^static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;$/;"	v	file:
rpc_allow_subnets	rpcserver.cpp	/^static std::vector<CSubNet> rpc_allow_subnets; \/\/!< List of subnets to allow RPC connections from$/;"	v	file:
rpc_dummy_work	rpcserver.cpp	/^static boost::asio::io_service::work *rpc_dummy_work = NULL;$/;"	v	file:
rpc_io_service	rpcserver.cpp	/^static boost::asio::io_service* rpc_io_service = NULL;$/;"	v	file:
rpc_ssl_context	rpcserver.cpp	/^static ssl::context* rpc_ssl_context = NULL;$/;"	v	file:
rpc_worker_group	rpcserver.cpp	/^static boost::thread_group* rpc_worker_group = NULL;$/;"	v	file:
rpcfn_type	rpcserver.h	/^typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);$/;"	t	class:json_spirit
rtt	net.h	/^        int64_t rtt() const { return rtt_; }$/;"	f	class:CNetRecorder::CRTTRecord
rtt_	net.h	/^        int64_t rtt_;$/;"	m	class:CNetRecorder::CRTTRecord
runCommand	util.cpp	/^void runCommand(std::string strCommand)$/;"	f
run_benchmark	secp256k1/src/bench.h	/^void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f
run_context_tests	secp256k1/src/tests.c	/^void run_context_tests(void) {$/;"	f
run_ecdsa_edge_cases	secp256k1/src/tests.c	/^void run_ecdsa_edge_cases(void) {$/;"	f
run_ecdsa_end_to_end	secp256k1/src/tests.c	/^void run_ecdsa_end_to_end(void) {$/;"	f
run_ecdsa_openssl	secp256k1/src/tests.c	/^void run_ecdsa_openssl(void) {$/;"	f
run_ecdsa_sign_verify	secp256k1/src/tests.c	/^void run_ecdsa_sign_verify(void) {$/;"	f
run_ecmult_chain	secp256k1/src/tests.c	/^void run_ecmult_chain(void) {$/;"	f
run_ecmult_constants	secp256k1/src/tests.c	/^void run_ecmult_constants(void) {$/;"	f
run_ecmult_gen_blind	secp256k1/src/tests.c	/^void run_ecmult_gen_blind(void) {$/;"	f
run_field_convert	secp256k1/src/tests.c	/^void run_field_convert(void) {$/;"	f
run_field_inv	secp256k1/src/tests.c	/^void run_field_inv(void) {$/;"	f
run_field_inv_all_var	secp256k1/src/tests.c	/^void run_field_inv_all_var(void) {$/;"	f
run_field_inv_var	secp256k1/src/tests.c	/^void run_field_inv_var(void) {$/;"	f
run_field_misc	secp256k1/src/tests.c	/^void run_field_misc(void) {$/;"	f
run_ge	secp256k1/src/tests.c	/^void run_ge(void) {$/;"	f
run_hmac_sha256_tests	secp256k1/src/tests.c	/^void run_hmac_sha256_tests(void) {$/;"	f
run_num_smalltests	secp256k1/src/tests.c	/^void run_num_smalltests(void) {$/;"	f
run_point_times_order	secp256k1/src/tests.c	/^void run_point_times_order(void) {$/;"	f
run_random_pubkeys	secp256k1/src/tests.c	/^void run_random_pubkeys(void) {$/;"	f
run_rfc6979_hmac_sha256_tests	secp256k1/src/tests.c	/^void run_rfc6979_hmac_sha256_tests(void) {$/;"	f
run_scalar_tests	secp256k1/src/tests.c	/^void run_scalar_tests(void) {$/;"	f
run_sha256_tests	secp256k1/src/tests.c	/^void run_sha256_tests(void) {$/;"	f
run_sqr	secp256k1/src/tests.c	/^void run_sqr(void) {$/;"	f
run_sqrt	secp256k1/src/tests.c	/^void run_sqrt(void) {$/;"	f
run_wnaf	secp256k1/src/tests.c	/^void run_wnaf(void) {$/;"	f
s	crypto/ripemd160.h	/^    uint32_t s[5];$/;"	m	class:CRIPEMD160
s	crypto/sha1.h	/^    uint32_t s[5];$/;"	m	class:CSHA1
s	crypto/sha256.h	/^    uint32_t s[8];$/;"	m	class:CSHA256
s	crypto/sha512.h	/^    uint64_t s[8];$/;"	m	class:CSHA512
s	secp256k1/src/ecdsa.h	/^    secp256k1_scalar_t r, s;$/;"	m	struct:__anon69
s	secp256k1/src/hash.h	/^    uint32_t s[32];$/;"	m	struct:__anon80
salt	coins.h	/^    uint256 salt;$/;"	m	class:CCoinsKeyHasher
sanity_test_fdelt	compat/glibc_sanity.cpp	/^bool sanity_test_fdelt()$/;"	f	namespace:__anon59
sanity_test_list	compat/glibcxx_sanity.cpp	/^bool sanity_test_list(unsigned int size)$/;"	f	namespace:__anon58
sanity_test_memcpy	compat/glibc_sanity.cpp	/^bool sanity_test_memcpy()$/;"	f	namespace:__anon59
sanity_test_range_fmt	compat/glibcxx_sanity.cpp	/^bool sanity_test_range_fmt()$/;"	f
sanity_test_widen	compat/glibcxx_sanity.cpp	/^bool sanity_test_widen(char testchar)$/;"	f	namespace:__anon58
saved_key_	leveldb/db/db_iter.cc	/^  std::string saved_key_;     \/\/ == current key when direction_==kReverse$/;"	m	class:leveldb::__anon22::DBIter	file:
saved_value_	leveldb/db/db_iter.cc	/^  std::string saved_value_;   \/\/ == current raw value when direction_==kReverse$/;"	m	class:leveldb::__anon22::DBIter	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	secp256k1/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scalar_test	secp256k1/src/tests.c	/^void scalar_test(void) {$/;"	f
scalar_x	secp256k1/src/bench_internal.c	/^    secp256k1_scalar_t scalar_x, scalar_y;$/;"	m	struct:__anon79	file:
scalar_y	secp256k1/src/bench_internal.c	/^    secp256k1_scalar_t scalar_x, scalar_y;$/;"	m	struct:__anon79	file:
schedule	scheduler.cpp	/^void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)$/;"	f	class:CScheduler
scheduleEvery	scheduler.cpp	/^void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaSeconds)$/;"	f	class:CScheduler
scheduleFromNow	scheduler.cpp	/^void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaSeconds)$/;"	f	class:CScheduler
screenWidth	util.cpp	/^static const int screenWidth = 79;$/;"	v	file:
script	compressor.h	/^    CScript &script;$/;"	m	class:CScriptCompressor
script	script/standard.cpp	/^    CScript *script;$/;"	m	class:__anon84::CScriptVisitor	file:
scriptCode	script/interpreter.cpp	/^    const CScript &scriptCode; \/\/! output script being consumed$/;"	m	class:__anon88::CTransactionSignatureSerializer	file:
scriptCode	script/interpreter.cpp	/^    const CScript& scriptCode; \/\/ output script being consumed$/;"	m	class:__anon88::CBlockHeaderSignatureSerializer	file:
scriptPubKey	main.h	/^    CScript scriptPubKey;$/;"	m	class:CScriptCheck
scriptPubKey	primitives/transaction.h	/^    CScript scriptPubKey;$/;"	m	class:CTxOut
scriptPubKey	test/script_tests.cpp	/^    CScript scriptPubKey;$/;"	m	class:__anon94::TestBuilder	file:
scriptPubKey	wallet/wallet.h	/^    CScript scriptPubKey;$/;"	m	struct:CRecipient
scriptSig	primitives/block.h	/^    CScript scriptSig;$/;"	m	class:CBlock
scriptSig	primitives/transaction.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
scriptnum_error	script/script.h	/^    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum_error
scriptnum_error	script/script.h	/^class scriptnum_error : public std::runtime_error$/;"	c
seconds_	leveldb/db/db_bench.cc	/^  double seconds_;$/;"	m	class:leveldb::__anon15::Stats	file:
secp256k1_context	key.cpp	/^static secp256k1_context_t* secp256k1_context = NULL;$/;"	v	file:
secp256k1_context_clone	secp256k1/src/secp256k1.c	/^secp256k1_context_t* secp256k1_context_clone(const secp256k1_context_t* ctx) {$/;"	f
secp256k1_context_create	secp256k1/src/secp256k1.c	/^secp256k1_context_t* secp256k1_context_create(int flags) {$/;"	f
secp256k1_context_destroy	secp256k1/src/secp256k1.c	/^void secp256k1_context_destroy(secp256k1_context_t* ctx) {$/;"	f
secp256k1_context_randomize	secp256k1/src/secp256k1.c	/^int secp256k1_context_randomize(secp256k1_context_t* ctx, const unsigned char *seed32) {$/;"	f
secp256k1_context_struct	secp256k1/src/secp256k1.c	/^struct secp256k1_context_struct {$/;"	s	file:
secp256k1_context_t	secp256k1/include/secp256k1.h	/^typedef struct secp256k1_context_struct secp256k1_context_t;$/;"	t	typeref:struct:secp256k1_context_struct
secp256k1_ec_privkey_export	secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_export(const secp256k1_context_t* ctx, const unsigned char *seckey, unsigned char *privkey, int *privkeylen, int compressed) {$/;"	f
secp256k1_ec_privkey_import	secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_import(const secp256k1_context_t* ctx, unsigned char *seckey, const unsigned char *privkey, int privkeylen) {$/;"	f
secp256k1_ec_privkey_tweak_add	secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_add(const secp256k1_context_t* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_privkey_tweak_mul	secp256k1/src/secp256k1.c	/^int secp256k1_ec_privkey_tweak_mul(const secp256k1_context_t* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_create	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_create(const secp256k1_context_t* ctx, unsigned char *pubkey, int *pubkeylen, const unsigned char *seckey, int compressed) {$/;"	f
secp256k1_ec_pubkey_decompress	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_decompress(const secp256k1_context_t* ctx, unsigned char *pubkey, int *pubkeylen) {$/;"	f
secp256k1_ec_pubkey_tweak_add	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_add(const secp256k1_context_t* ctx, unsigned char *pubkey, int pubkeylen, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_tweak_mul	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context_t* ctx, unsigned char *pubkey, int pubkeylen, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_verify	secp256k1/src/secp256k1.c	/^int secp256k1_ec_pubkey_verify(const secp256k1_context_t* ctx, const unsigned char *pubkey, int pubkeylen) {$/;"	f
secp256k1_ec_seckey_verify	secp256k1/src/secp256k1.c	/^int secp256k1_ec_seckey_verify(const secp256k1_context_t* ctx, const unsigned char *seckey) {$/;"	f
secp256k1_ecdsa_const_order_as_fe	secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe_t secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_const_p_minus_order	secp256k1/src/ecdsa_impl.h	/^static const secp256k1_fe_t secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_recover_compact	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_recover_compact(const secp256k1_context_t* ctx, const unsigned char *msg32, const unsigned char *sig64, unsigned char *pubkey, int *pubkeylen, int compressed, int recid) {$/;"	f
secp256k1_ecdsa_sig_parse	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_parse(secp256k1_ecdsa_sig_t *r, const unsigned char *sig, int size) {$/;"	f
secp256k1_ecdsa_sig_recover	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_recover(const secp256k1_ecmult_context_t *ctx, const secp256k1_ecdsa_sig_t *sig, secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message, int recid) {$/;"	f
secp256k1_ecdsa_sig_serialize	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, int *size, const secp256k1_ecdsa_sig_t *a) {$/;"	f
secp256k1_ecdsa_sig_sign	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context_t *ctx, secp256k1_ecdsa_sig_t *sig, const secp256k1_scalar_t *seckey, const secp256k1_scalar_t *message, const secp256k1_scalar_t *nonce, int *recid) {$/;"	f
secp256k1_ecdsa_sig_t	secp256k1/src/ecdsa.h	/^} secp256k1_ecdsa_sig_t;$/;"	t	typeref:struct:__anon69
secp256k1_ecdsa_sig_verify	secp256k1/src/ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context_t *ctx, const secp256k1_ecdsa_sig_t *sig, const secp256k1_ge_t *pubkey, const secp256k1_scalar_t *message) {$/;"	f
secp256k1_ecdsa_sign	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_sign(const secp256k1_context_t* ctx, const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_sign_compact	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_sign_compact(const secp256k1_context_t* ctx, const unsigned char *msg32, unsigned char *sig64, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata, int *recid) {$/;"	f
secp256k1_ecdsa_verify	secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    private static native int secp256k1_ecdsa_verify(ByteBuffer byteBuff);$/;"	m	class:NativeSecp256k1	file:
secp256k1_ecdsa_verify	secp256k1/src/secp256k1.c	/^int secp256k1_ecdsa_verify(const secp256k1_context_t* ctx, const unsigned char *msg32, const unsigned char *sig, int siglen, const unsigned char *pubkey, int pubkeylen) {$/;"	f
secp256k1_eckey_privkey_parse	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_parse(secp256k1_scalar_t *key, const unsigned char *privkey, int privkeylen) {$/;"	f
secp256k1_eckey_privkey_serialize	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_serialize(const secp256k1_ecmult_gen_context_t *ctx, unsigned char *privkey, int *privkeylen, const secp256k1_scalar_t *key, int compressed) {$/;"	f
secp256k1_eckey_privkey_tweak_add	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar_t *key, const secp256k1_scalar_t *tweak) {$/;"	f
secp256k1_eckey_privkey_tweak_mul	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar_t *key, const secp256k1_scalar_t *tweak) {$/;"	f
secp256k1_eckey_pubkey_parse	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_parse(secp256k1_ge_t *elem, const unsigned char *pub, int size) {$/;"	f
secp256k1_eckey_pubkey_serialize	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_serialize(secp256k1_ge_t *elem, unsigned char *pub, int *size, int compressed) {$/;"	f
secp256k1_eckey_pubkey_tweak_add	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context_t *ctx, secp256k1_ge_t *key, const secp256k1_scalar_t *tweak) {$/;"	f
secp256k1_eckey_pubkey_tweak_mul	secp256k1/src/eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context_t *ctx, secp256k1_ge_t *key, const secp256k1_scalar_t *tweak) {$/;"	f
secp256k1_ecmult	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult(const secp256k1_ecmult_context_t *ctx, secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_scalar_t *na, const secp256k1_scalar_t *ng) {$/;"	f
secp256k1_ecmult_context_build	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_build(secp256k1_ecmult_context_t *ctx) {$/;"	f
secp256k1_ecmult_context_clear	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context_t *ctx) {$/;"	f
secp256k1_ecmult_context_clone	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context_t *dst,$/;"	f
secp256k1_ecmult_context_init	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_context_init(secp256k1_ecmult_context_t *ctx) {$/;"	f
secp256k1_ecmult_context_is_built	secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context_t *ctx) {$/;"	f
secp256k1_ecmult_context_t	secp256k1/src/ecmult.h	/^} secp256k1_ecmult_context_t;$/;"	t	typeref:struct:__anon78
secp256k1_ecmult_gen	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context_t *ctx, secp256k1_gej_t *r, const secp256k1_scalar_t *gn) {$/;"	f
secp256k1_ecmult_gen_blind	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context_t *ctx, const unsigned char *seed32) {$/;"	f
secp256k1_ecmult_gen_context_build	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context_t *ctx) {$/;"	f
secp256k1_ecmult_gen_context_clear	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context_t *ctx) {$/;"	f
secp256k1_ecmult_gen_context_clone	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context_t *dst,$/;"	f
secp256k1_ecmult_gen_context_init	secp256k1/src/ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context_t *ctx) {$/;"	f
secp256k1_ecmult_gen_context_is_built	secp256k1/src/ecmult_gen_impl.h	/^static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context_t* ctx) {$/;"	f
secp256k1_ecmult_gen_context_t	secp256k1/src/ecmult_gen.h	/^} secp256k1_ecmult_gen_context_t;$/;"	t	typeref:struct:__anon68
secp256k1_ecmult_static_context	secp256k1/src/ecmult_static_context.h	/^static const secp256k1_ge_storage secp256k1_ecmult_static_context[64][16] = {$/;"	v
secp256k1_ecmult_table_precomp_ge_storage_var	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_table_precomp_ge_storage_var(secp256k1_ge_storage_t *pre, const secp256k1_gej_t *a, int w) {$/;"	f
secp256k1_ecmult_table_precomp_gej_var	secp256k1/src/ecmult_impl.h	/^static void secp256k1_ecmult_table_precomp_gej_var(secp256k1_gej_t *pre, const secp256k1_gej_t *a, int w) {$/;"	f
secp256k1_ecmult_wnaf	secp256k1/src/ecmult_impl.h	/^static int secp256k1_ecmult_wnaf(int *wnaf, const secp256k1_scalar_t *a, int w) {$/;"	f
secp256k1_fe_add	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_add	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_clear	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_clear	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_cmov	secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {$/;"	f
secp256k1_fe_cmov	secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe_t *r, const secp256k1_fe_t *a, int flag) {$/;"	f
secp256k1_fe_cmp_var	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {$/;"	f
secp256k1_fe_cmp_var	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {$/;"	f
secp256k1_fe_equal_var	secp256k1/src/field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe_t *a, const secp256k1_fe_t *b) {$/;"	f
secp256k1_fe_from_storage	secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t *a) {$/;"	f
secp256k1_fe_from_storage	secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe_t *r, const secp256k1_fe_storage_t *a) {$/;"	f
secp256k1_fe_get_b32	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_get_b32	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_inv	secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv(secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_inv_all_var	secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_all_var(size_t len, secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_inv_var	secp256k1/src/field_impl.h	/^static void secp256k1_fe_inv_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_is_odd	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_is_odd	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_is_zero	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_is_zero	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_mul	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe_t *r, const secp256k1_fe_t *a, const secp256k1_fe_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_int	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {$/;"	f
secp256k1_fe_mul_int	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe_t *r, int a) {$/;"	f
secp256k1_fe_negate	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {$/;"	f
secp256k1_fe_negate	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe_t *r, const secp256k1_fe_t *a, int m) {$/;"	f
secp256k1_fe_normalize	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalize	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalize_var	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalize_var	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalize_weak	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalize_weak	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe_t *r) {$/;"	f
secp256k1_fe_set_b32	secp256k1/src/field_10x26_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_b32	secp256k1/src/field_5x52_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe_t *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_int	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {$/;"	f
secp256k1_fe_set_int	secp256k1/src/field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe_t *r, int a) {$/;"	f
secp256k1_fe_sqr	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_sqr	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_sqr_inner	secp256k1/src/field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {$/;"	f
secp256k1_fe_sqr_inner	secp256k1/src/field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqr_inner	secp256k1/src/field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqrt_var	secp256k1/src/field_impl.h	/^static int secp256k1_fe_sqrt_var(secp256k1_fe_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_storage_cmov	secp256k1/src/field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag) {$/;"	f
secp256k1_fe_storage_cmov	secp256k1/src/field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage_t *r, const secp256k1_fe_storage_t *a, int flag) {$/;"	f
secp256k1_fe_storage_t	secp256k1/src/field_10x26.h	/^} secp256k1_fe_storage_t;$/;"	t	typeref:struct:__anon65
secp256k1_fe_storage_t	secp256k1/src/field_5x52.h	/^} secp256k1_fe_storage_t;$/;"	t	typeref:struct:__anon76
secp256k1_fe_t	secp256k1/src/field_10x26.h	/^} secp256k1_fe_t;$/;"	t	typeref:struct:__anon64
secp256k1_fe_t	secp256k1/src/field_5x52.h	/^} secp256k1_fe_t;$/;"	t	typeref:struct:__anon75
secp256k1_fe_to_storage	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_to_storage	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage_t *r, const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_verify	secp256k1/src/field_10x26_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe_t *a) {$/;"	f
secp256k1_fe_verify	secp256k1/src/field_5x52_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe_t *a) {$/;"	f
secp256k1_ge_clear	secp256k1/src/group_impl.h	/^static void secp256k1_ge_clear(secp256k1_ge_t *r) {$/;"	f
secp256k1_ge_const_g	secp256k1/src/group_impl.h	/^static const secp256k1_ge_t secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_from_storage	secp256k1/src/group_impl.h	/^static void secp256k1_ge_from_storage(secp256k1_ge_t *r, const secp256k1_ge_storage_t *a) {$/;"	f
secp256k1_ge_is_infinity	secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_infinity(const secp256k1_ge_t *a) {$/;"	f
secp256k1_ge_is_valid_var	secp256k1/src/group_impl.h	/^static int secp256k1_ge_is_valid_var(const secp256k1_ge_t *a) {$/;"	f
secp256k1_ge_neg	secp256k1/src/group_impl.h	/^static void secp256k1_ge_neg(secp256k1_ge_t *r, const secp256k1_ge_t *a) {$/;"	f
secp256k1_ge_set_all_gej_var	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_all_gej_var(size_t len, secp256k1_ge_t *r, const secp256k1_gej_t *a) {$/;"	f
secp256k1_ge_set_gej	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej(secp256k1_ge_t *r, secp256k1_gej_t *a) {$/;"	f
secp256k1_ge_set_gej_var	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_gej_var(secp256k1_ge_t *r, secp256k1_gej_t *a) {$/;"	f
secp256k1_ge_set_infinity	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_infinity(secp256k1_ge_t *r) {$/;"	f
secp256k1_ge_set_xo_var	secp256k1/src/group_impl.h	/^static int secp256k1_ge_set_xo_var(secp256k1_ge_t *r, const secp256k1_fe_t *x, int odd) {$/;"	f
secp256k1_ge_set_xy	secp256k1/src/group_impl.h	/^static void secp256k1_ge_set_xy(secp256k1_ge_t *r, const secp256k1_fe_t *x, const secp256k1_fe_t *y) {$/;"	f
secp256k1_ge_storage_cmov	secp256k1/src/group_impl.h	/^static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage_t *r, const secp256k1_ge_storage_t *a, int flag) {$/;"	f
secp256k1_ge_storage_t	secp256k1/src/group.h	/^} secp256k1_ge_storage_t;$/;"	t	typeref:struct:__anon72
secp256k1_ge_t	secp256k1/src/group.h	/^} secp256k1_ge_t;$/;"	t	typeref:struct:__anon70
secp256k1_ge_to_storage	secp256k1/src/group_impl.h	/^static void secp256k1_ge_to_storage(secp256k1_ge_storage_t *r, const secp256k1_ge_t *a) {$/;"	f
secp256k1_gej_add_ge	secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b) {$/;"	f
secp256k1_gej_add_ge_var	secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_ge_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_ge_t *b) {$/;"	f
secp256k1_gej_add_var	secp256k1/src/group_impl.h	/^static void secp256k1_gej_add_var(secp256k1_gej_t *r, const secp256k1_gej_t *a, const secp256k1_gej_t *b) {$/;"	f
secp256k1_gej_clear	secp256k1/src/group_impl.h	/^static void secp256k1_gej_clear(secp256k1_gej_t *r) {$/;"	f
secp256k1_gej_double_var	secp256k1/src/group_impl.h	/^static void secp256k1_gej_double_var(secp256k1_gej_t *r, const secp256k1_gej_t *a) {$/;"	f
secp256k1_gej_eq_x_var	secp256k1/src/group_impl.h	/^static int secp256k1_gej_eq_x_var(const secp256k1_fe_t *x, const secp256k1_gej_t *a) {$/;"	f
secp256k1_gej_is_infinity	secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_infinity(const secp256k1_gej_t *a) {$/;"	f
secp256k1_gej_is_valid_var	secp256k1/src/group_impl.h	/^static int secp256k1_gej_is_valid_var(const secp256k1_gej_t *a) {$/;"	f
secp256k1_gej_mul_lambda	secp256k1/src/group_impl.h	/^static void secp256k1_gej_mul_lambda(secp256k1_gej_t *r, const secp256k1_gej_t *a) {$/;"	f
secp256k1_gej_neg	secp256k1/src/group_impl.h	/^static void secp256k1_gej_neg(secp256k1_gej_t *r, const secp256k1_gej_t *a) {$/;"	f
secp256k1_gej_rescale	secp256k1/src/group_impl.h	/^static void secp256k1_gej_rescale(secp256k1_gej_t *r, const secp256k1_fe_t *s) {$/;"	f
secp256k1_gej_set_ge	secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_ge(secp256k1_gej_t *r, const secp256k1_ge_t *a) {$/;"	f
secp256k1_gej_set_infinity	secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_infinity(secp256k1_gej_t *r) {$/;"	f
secp256k1_gej_set_xy	secp256k1/src/group_impl.h	/^static void secp256k1_gej_set_xy(secp256k1_gej_t *r, const secp256k1_fe_t *x, const secp256k1_fe_t *y) {$/;"	f
secp256k1_gej_t	secp256k1/src/group.h	/^} secp256k1_gej_t;$/;"	t	typeref:struct:__anon71
secp256k1_hmac_sha256_finalize	secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_hmac_sha256_initialize	secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_hmac_sha256_t	secp256k1/src/hash.h	/^} secp256k1_hmac_sha256_t;$/;"	t	typeref:struct:__anon81
secp256k1_hmac_sha256_write	secp256k1/src/hash_impl.h	/^static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {$/;"	f
secp256k1_nonce_function_default	secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function_t secp256k1_nonce_function_default = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_rfc6979	secp256k1/src/secp256k1.c	/^const secp256k1_nonce_function_t secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_t	secp256k1/include/secp256k1.h	/^typedef int (*secp256k1_nonce_function_t)($/;"	t
secp256k1_num_add	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {$/;"	f
secp256k1_num_add_abs	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_add_abs(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {$/;"	f
secp256k1_num_cmp	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_cmp(const secp256k1_num_t *a, const secp256k1_num_t *b) {$/;"	f
secp256k1_num_copy	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_copy(secp256k1_num_t *r, const secp256k1_num_t *a) {$/;"	f
secp256k1_num_eq	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_eq(const secp256k1_num_t *a, const secp256k1_num_t *b) {$/;"	f
secp256k1_num_get_bin	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num_t *a) {$/;"	f
secp256k1_num_is_neg	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_neg(const secp256k1_num_t *a) {$/;"	f
secp256k1_num_is_zero	secp256k1/src/num_gmp_impl.h	/^static int secp256k1_num_is_zero(const secp256k1_num_t *a) {$/;"	f
secp256k1_num_mod	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod(secp256k1_num_t *r, const secp256k1_num_t *m) {$/;"	f
secp256k1_num_mod_inverse	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mod_inverse(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *m) {$/;"	f
secp256k1_num_mul	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_mul(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {$/;"	f
secp256k1_num_negate	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_negate(secp256k1_num_t *r) {$/;"	f
secp256k1_num_sanity	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sanity(const secp256k1_num_t *a) {$/;"	f
secp256k1_num_sanity	secp256k1/src/num_gmp_impl.h	22;"	d
secp256k1_num_set_bin	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_set_bin(secp256k1_num_t *r, const unsigned char *a, unsigned int alen) {$/;"	f
secp256k1_num_shift	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_shift(secp256k1_num_t *r, int bits) {$/;"	f
secp256k1_num_sub	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {$/;"	f
secp256k1_num_sub_abs	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_sub_abs(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b) {$/;"	f
secp256k1_num_subadd	secp256k1/src/num_gmp_impl.h	/^static void secp256k1_num_subadd(secp256k1_num_t *r, const secp256k1_num_t *a, const secp256k1_num_t *b, int bneg) {$/;"	f
secp256k1_num_t	secp256k1/src/num_gmp.h	/^} secp256k1_num_t;$/;"	t	typeref:struct:__anon74
secp256k1_rand256	secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256(unsigned char *b32) {$/;"	f
secp256k1_rand256_test	secp256k1/src/testrand_impl.h	/^static void secp256k1_rand256_test(unsigned char *b32) {$/;"	f
secp256k1_rand32	secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {$/;"	f
secp256k1_rand_seed	secp256k1/src/testrand_impl.h	/^SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16) {$/;"	f
secp256k1_rfc6979_hmac_sha256_finalize	secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {$/;"	f
secp256k1_rfc6979_hmac_sha256_generate	secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_initialize	secp256k1/src/hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen, const unsigned char *msg, size_t msglen, const unsigned char *rnd, size_t rndlen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_t	secp256k1/src/hash.h	/^} secp256k1_rfc6979_hmac_sha256_t;$/;"	t	typeref:struct:__anon82
secp256k1_scalar_add	secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_add	secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_add_bit	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {$/;"	f
secp256k1_scalar_add_bit	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_add_bit(secp256k1_scalar_t *r, unsigned int bit) {$/;"	f
secp256k1_scalar_check_overflow	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_check_overflow	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_clear	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar_t *r) {$/;"	f
secp256k1_scalar_clear	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar_t *r) {$/;"	f
secp256k1_scalar_eq	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_eq	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_get_b32	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar_t* a) {$/;"	f
secp256k1_scalar_get_b32	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar_t* a) {$/;"	f
secp256k1_scalar_get_bits	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar_t *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_num	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_get_num(secp256k1_num_t *r, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_inverse	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse(secp256k1_scalar_t *r, const secp256k1_scalar_t *x) {$/;"	f
secp256k1_scalar_inverse_var	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_inverse_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *x) {$/;"	f
secp256k1_scalar_is_high	secp256k1/src/scalar_4x64_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_is_high	secp256k1/src/scalar_8x32_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_is_one	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_is_one	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_is_zero	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_is_zero	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_mul	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_mul	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_mul_512	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_mul_512	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b) {$/;"	f
secp256k1_scalar_mul_shift_var	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b, unsigned int shift) {$/;"	f
secp256k1_scalar_mul_shift_var	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar_t *r, const secp256k1_scalar_t *a, const secp256k1_scalar_t *b, unsigned int shift) {$/;"	f
secp256k1_scalar_negate	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_negate	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_order_get_num	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_order_get_num(secp256k1_num_t *r) {$/;"	f
secp256k1_scalar_reduce	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, unsigned int overflow) {$/;"	f
secp256k1_scalar_reduce	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar_t *r, uint32_t overflow) {$/;"	f
secp256k1_scalar_reduce_512	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint64_t *l) {$/;"	f
secp256k1_scalar_reduce_512	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar_t *r, const uint32_t *l) {$/;"	f
secp256k1_scalar_set_b32	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar_t *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_int	secp256k1/src/scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar_t *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	secp256k1/src/scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar_t *r, unsigned int v) {$/;"	f
secp256k1_scalar_split_128	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_split_128	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_split_lambda_var	secp256k1/src/scalar_impl.h	/^static void secp256k1_scalar_split_lambda_var(secp256k1_scalar_t *r1, secp256k1_scalar_t *r2, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_sqr	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_sqr	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar_t *r, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_sqr_512	secp256k1/src/scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_sqr_512	secp256k1/src/scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar_t *a) {$/;"	f
secp256k1_scalar_t	secp256k1/src/scalar_4x64.h	/^} secp256k1_scalar_t;$/;"	t	typeref:struct:__anon77
secp256k1_scalar_t	secp256k1/src/scalar_8x32.h	/^} secp256k1_scalar_t;$/;"	t	typeref:struct:__anon73
secp256k1_sha256_finalize	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_sha256_initialize	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {$/;"	f
secp256k1_sha256_t	secp256k1/src/hash.h	/^} secp256k1_sha256_t;$/;"	t	typeref:struct:__anon80
secp256k1_sha256_transform	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {$/;"	f
secp256k1_sha256_write	secp256k1/src/hash_impl.h	/^static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {$/;"	f
secp256k1_test_rng	secp256k1/src/testrand_impl.h	/^static secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng;$/;"	v
secp256k1_test_rng_precomputed	secp256k1/src/testrand_impl.h	/^static uint32_t secp256k1_test_rng_precomputed[8];$/;"	v
secp256k1_test_rng_precomputed_used	secp256k1/src/testrand_impl.h	/^static int secp256k1_test_rng_precomputed_used = 8;$/;"	v
secure_allocator	support/allocators/secure.h	/^    secure_allocator() throw() {}$/;"	f	struct:secure_allocator
secure_allocator	support/allocators/secure.h	/^    secure_allocator(const secure_allocator& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	support/allocators/secure.h	/^    secure_allocator(const secure_allocator<U>& a) throw() : base(a)$/;"	f	struct:secure_allocator
secure_allocator	support/allocators/secure.h	/^struct secure_allocator : public std::allocator<T> {$/;"	s
seed_	leveldb/db/db_impl.h	/^  uint32_t seed_;                \/\/ For sampling.$/;"	m	class:leveldb::DBImpl
seed_	leveldb/db/skiplist_test.cc	/^  int seed_;$/;"	m	class:leveldb::TestState	file:
seed_	leveldb/util/random.h	/^  uint32_t seed_;$/;"	m	class:leveldb::Random
seed_insecure_rand	random.cpp	/^void seed_insecure_rand(bool fDeterministic)$/;"	f
seek_file	leveldb/db/version_set.h	/^    FileMetaData* seek_file;$/;"	m	struct:leveldb::Version::GetStats
seek_file_level	leveldb/db/version_set.h	/^    int seek_file_level;$/;"	m	struct:leveldb::Version::GetStats
seen_key_	leveldb/db/version_set.h	/^  bool seen_key_;             \/\/ Some output key has been seen$/;"	m	class:leveldb::Compaction
sell_amount	cache.h	/^    int64_t buy_amount, sell_amount;$/;"	m	struct:order_list::order_info_
sem	sync.h	/^    CSemaphore* sem;$/;"	m	class:CSemaphoreGrant
sem1_	leveldb/port/port_win.h	/^  void * sem1_;$/;"	m	class:leveldb::port::CondVar
sem2_	leveldb/port/port_win.h	/^  void * sem2_;$/;"	m	class:leveldb::port::CondVar
semOutbound	net.cpp	/^static CSemaphore *semOutbound = NULL;$/;"	v	file:
sendbanvotetoaddress	wallet/rpcwallet.cpp	/^Value sendbanvotetoaddress(const Array& params, bool fHelp)$/;"	f
sendfrom	wallet/rpcwallet.cpp	/^Value sendfrom(const Array& params, bool fHelp)$/;"	f
sendfromfeeaddress	wallet/rpcwallet.cpp	/^Value sendfromfeeaddress(const Array& params, bool fHelp)$/;"	f
sendlicensetoaddress	wallet/rpcwallet.cpp	/^Value sendlicensetoaddress(const Array& params, bool fHelp)$/;"	f
sendmany	wallet/rpcwallet.cpp	/^Value sendmany(const Array& params, bool fHelp)$/;"	f
sendorder	wallet/rpcwallet.cpp	/^Value sendorder(const Array& params, bool fHelp)$/;"	f
sendrawtransaction	rpcrawtransaction.cpp	/^Value sendrawtransaction(const Array& params, bool fHelp)$/;"	f
sendtoaddress	wallet/rpcwallet.cpp	/^Value sendtoaddress(const Array& params, bool fHelp)$/;"	f
sendvotetoaddress	wallet/rpcwallet.cpp	/^Value sendvotetoaddress(const Array& params, bool fHelp)$/;"	f
sequence	leveldb/db/dbformat.h	/^  SequenceNumber sequence;$/;"	m	struct:leveldb::ParsedInternalKey
sequence_	leveldb/db/db_iter.cc	/^  SequenceNumber const sequence_;$/;"	m	class:leveldb::__anon22::DBIter	file:
sequence_	leveldb/db/write_batch.cc	/^  SequenceNumber sequence_;$/;"	m	class:leveldb::__anon16::MemTableInserter	file:
ser_double_to_uint64	serialize.h	/^inline uint64_t ser_double_to_uint64(double x)$/;"	f
ser_float_to_uint32	serialize.h	/^inline uint32_t ser_float_to_uint32(float x)$/;"	f
ser_readdata16	serialize.h	/^template<typename Stream> inline uint16_t ser_readdata16(Stream &s)$/;"	f
ser_readdata32	serialize.h	/^template<typename Stream> inline uint32_t ser_readdata32(Stream &s)$/;"	f
ser_readdata64	serialize.h	/^template<typename Stream> inline uint64_t ser_readdata64(Stream &s)$/;"	f
ser_readdata8	serialize.h	/^template<typename Stream> inline uint8_t ser_readdata8(Stream &s)$/;"	f
ser_uint32_to_float	serialize.h	/^inline float ser_uint32_to_float(uint32_t y)$/;"	f
ser_uint64_to_double	serialize.h	/^inline double ser_uint64_to_double(uint64_t y)$/;"	f
ser_writedata16	serialize.h	/^template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)$/;"	f
ser_writedata32	serialize.h	/^template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)$/;"	f
ser_writedata64	serialize.h	/^template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)$/;"	f
ser_writedata8	serialize.h	/^template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)$/;"	f
serialize	script/script.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum
serviceQueue	scheduler.cpp	/^void CScheduler::serviceQueue()$/;"	f	class:CScheduler
set	mruset.h	/^    std::set<T> set;$/;"	m	class:mruset
setAddress	test/test_bitcoin.h	/^    inline void setAddress(CTxDestination address)$/;"	f	class:CWallet_UnitTest
setArray	univalue/univalue.cpp	/^bool UniValue::setArray()$/;"	f	class:UniValue
setBanned	net.cpp	/^map<CNetAddr, int64_t> CNode::setBanned;$/;"	m	class:CNode	file:
setBanned	net.h	/^    static std::map<CNetAddr, int64_t> setBanned;$/;"	m	class:CNode
setBlockIndexCandidates	main.cpp	/^    set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;$/;"	m	namespace:__anon46	file:
setBool	univalue/univalue.cpp	/^bool UniValue::setBool(bool val_)$/;"	f	class:UniValue
setCancel	alert.h	/^    std::set<int> setCancel;$/;"	m	class:CUnsignedAlert
setColor	test/test_bitcoin.h	/^    inline void setColor(const type_Color color)$/;"	f	class:CWallet_UnitTest
setColorAdmin	test/test_bitcoin.h	/^    inline void setColorAdmin(int64_t color_admin_amount)$/;"	f	class:CWallet_UnitTest
setDependsOn	miner.cpp	/^    set<uint256> setDependsOn;$/;"	m	class:COrphan	file:
setDirtyBlockIndex	main.cpp	/^    set<CBlockIndex*> setDirtyBlockIndex;$/;"	m	namespace:__anon46	file:
setDirtyFileInfo	main.cpp	/^    set<int> setDirtyFileInfo;$/;"	m	namespace:__anon46	file:
setExpectedMap	test/test_bitcoin.h	/^    inline void setExpectedMap(mapValue_t expected_map_values)$/;"	f	class:CWallet_UnitTest
setFloat	univalue/univalue.cpp	/^bool UniValue::setFloat(double val)$/;"	f	class:UniValue
setInt	univalue/univalue.cpp	/^bool UniValue::setInt(int64_t val)$/;"	f	class:UniValue
setInt	univalue/univalue.cpp	/^bool UniValue::setInt(uint64_t val)$/;"	f	class:UniValue
setInt	univalue/univalue.h	/^    bool setInt(int val) { return setInt((int64_t)val); }$/;"	f	class:UniValue
setInventoryKnown	net.h	/^    mruset<CInv> setInventoryKnown;$/;"	m	class:CNode
setKeyPool	wallet/wallet.h	/^    std::set<int64_t> setKeyPool;$/;"	m	class:CWallet
setKnown	net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setLicense	test/test_bitcoin.h	/^    inline void setLicense(int64_t license_amount)$/;"	f	class:CWallet_UnitTest
setLockedCoins	wallet/wallet.h	/^    std::set<COutPoint> setLockedCoins;$/;"	m	class:CWallet
setMisc	test/test_bitcoin.h	/^    inline void setMisc(std::string misc)$/;"	f	class:CWallet_UnitTest
setNull	univalue/univalue.cpp	/^bool UniValue::setNull()$/;"	f	class:UniValue
setNumStr	univalue/univalue.cpp	/^bool UniValue::setNumStr(const std::string& val_)$/;"	f	class:UniValue
setObject	univalue/univalue.cpp	/^bool UniValue::setObject()$/;"	f	class:UniValue
setReturn	test/test_bitcoin.h	/^    inline void setReturn(std::string return_string)$/;"	f	class:CWallet_UnitTest
setSanityCheck	txmempool.h	/^    void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }$/;"	f	class:CTxMemPool
setSelected	coincontrol.h	/^    std::set<COutPoint> setSelected;$/;"	m	class:CCoinControl
setStr	univalue/univalue.cpp	/^bool UniValue::setStr(const std::string& val_)$/;"	f	class:UniValue
setSubVer	alert.h	/^    std::set<std::string> setSubVer;  \/\/ empty matches all$/;"	m	class:CUnsignedAlert
setType	test/test_bitcoin.h	/^    inline void setType(int type)$/;"	f	class:CWallet_UnitTest
setValid	script/sigcache.cpp	/^    std::set< sigdata_type> setValid;$/;"	m	class:__anon86::CSignatureCache	file:
setWatchOnly	keystore.h	/^    WatchOnlySet setWatchOnly;$/;"	m	class:CBasicKeyStore
set_base_from	secp256k1/build-aux/depcomp	/^set_base_from ()$/;"	f
set_dir_from	secp256k1/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_error	script/bitcoinconsensus.cpp	/^inline int set_error(bitcoinconsensus_error* ret, bitcoinconsensus_error serror)$/;"	f	namespace:__anon90
set_error	script/interpreter.cpp	/^inline bool set_error(ScriptError* ret, const ScriptError serror)$/;"	f	namespace:__anon87
set_index_handle	leveldb/table/format.h	/^  void set_index_handle(const BlockHandle& h) {$/;"	f	class:leveldb::Footer
set_metaindex_handle	leveldb/table/format.h	/^  void set_metaindex_handle(const BlockHandle& h) { metaindex_handle_ = h; }$/;"	f	class:leveldb::Footer
set_offset	leveldb/table/format.h	/^  void set_offset(uint64_t offset) { offset_ = offset; }$/;"	f	class:leveldb::BlockHandle
set_size	leveldb/table/format.h	/^  void set_size(uint64_t size) { size_ = size; }$/;"	f	class:leveldb::BlockHandle
set_success	script/interpreter.cpp	/^inline bool set_success(ScriptError* ret)$/;"	f	namespace:__anon87
set_vch	script/script.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum
setaccount	wallet/rpcwallet.cpp	/^Value setaccount(const Array& params, bool fHelp)$/;"	f
setgenerate	rpcmining.cpp	/^Value setgenerate(const Array& params, bool fHelp)$/;"	f
setint64	test/bignum.h	/^    void setint64(int64_t sn)$/;"	f	class:CBigNum
setmocktime	rpcmisc.cpp	/^Value setmocktime(const Array& params, bool fHelp)$/;"	f
setservAddNodeAddresses	net.cpp	/^set<CNetAddr> setservAddNodeAddresses;$/;"	v
settxfee	wallet/rpcwallet.cpp	/^Value settxfee(const Array& params, bool fHelp)$/;"	f
setvch	test/bignum.h	/^    void setvch(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
sha	hash.h	/^    CSHA256 sha;$/;"	m	class:CHash160
sha	hash.h	/^    CSHA256 sha;$/;"	m	class:CHash256
sha1	crypto/sha1.cpp	/^namespace sha1$/;"	n	namespace:__anon7	file:
sha256	crypto/sha256.cpp	/^namespace sha256$/;"	n	namespace:__anon6	file:
sha512	crypto/sha512.cpp	/^namespace sha512$/;"	n	namespace:__anon8	file:
shard_	leveldb/util/cache.cc	/^  LRUCache shard_[kNumShards];$/;"	m	class:leveldb::__anon39::ShardedLRUCache	file:
shared	leveldb/db/db_bench.cc	/^    SharedState* shared;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
shared	leveldb/db/db_bench.cc	/^  SharedState* shared;$/;"	m	struct:leveldb::__anon15::ThreadState	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	secp256k1/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shiftArrayLeft	test/arith_uint256_tests.cpp	/^void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f
shiftArrayRight	test/arith_uint256_tests.cpp	/^void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)$/;"	f
shouldStop	scheduler.h	/^    bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }$/;"	f	class:CScheduler
shutting_down_	leveldb/db/db_impl.h	/^  port::AtomicPointer shutting_down_;$/;"	m	class:leveldb::DBImpl
sig	secp256k1/src/bench_recover.c	/^    unsigned char sig[64];$/;"	m	struct:__anon83	file:
sig	secp256k1/src/bench_verify.c	/^    unsigned char sig[72];$/;"	m	struct:__anon66	file:
sigdata_type	script/sigcache.cpp	/^    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;$/;"	t	class:__anon86::CSignatureCache	file:
siglen	secp256k1/src/bench_verify.c	/^    int siglen;$/;"	m	struct:__anon66	file:
sigma0	crypto/sha256.cpp	/^uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }$/;"	f	namespace:__anon6::sha256
sigma0	crypto/sha512.cpp	/^uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x << 56) ^ (x >> 7); }$/;"	f	namespace:__anon8::sha512
sigma0	secp256k1/src/hash_impl.h	20;"	d
sigma0	secp256k1/src/hash_impl.h	284;"	d
sigma1	crypto/sha256.cpp	/^uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }$/;"	f	namespace:__anon6::sha256
sigma1	crypto/sha512.cpp	/^uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }$/;"	f	namespace:__anon8::sha512
sigma1	secp256k1/src/hash_impl.h	21;"	d
sigma1	secp256k1/src/hash_impl.h	285;"	d
sign_multisig	test/multisig_tests.cpp	/^sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)$/;"	f
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, const CKey &key, CTransaction transaction)$/;"	f
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)$/;"	f
signmessage	wallet/rpcwallet.cpp	/^Value signmessage(const Array& params, bool fHelp)$/;"	f
signrawtransaction	rpcrawtransaction.cpp	/^Value signrawtransaction(const Array& params, bool fHelp)$/;"	f
size	addrman.h	/^    int size()$/;"	f	class:CAddrMan
size	arith_uint256.h	/^    unsigned int size() const$/;"	f	class:base_uint
size	key.h	/^    unsigned int size() const { return (fValid ? 32 : 0); }$/;"	f	class:CKey
size	leveldb/include/leveldb/slice.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Slice
size	leveldb/table/block.h	/^  size_t size() const { return size_; }$/;"	f	class:leveldb::Block
size	leveldb/table/format.h	/^  uint64_t size() const { return size_; }$/;"	f	class:leveldb::BlockHandle
size	limitedmap.h	/^    size_type size() const { return map.size(); }$/;"	f	class:limitedmap
size	mruset.h	/^    size_type size() const { return set.size(); }$/;"	f	class:mruset
size	net.cpp	/^int16_t CNetRecorder::CBandwidthRecord::size() const$/;"	f	class:CNetRecorder::CBandwidthRecord
size	net.cpp	/^int16_t CNetRecorder::CRTTRecord::size() const$/;"	f	class:CNetRecorder::CRTTRecord
size	net.h	/^        int16_t size;$/;"	m	struct:CNetRecorder::SFileRecordHeader
size	pubkey.h	/^    unsigned int size() const { return GetLen(vch[0]); }$/;"	f	class:CPubKey
size	serialize.h	/^    size_t size() const$/;"	f	class:CSizeComputer
size	streams.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	timedata.h	/^    int size() const$/;"	f	class:CMedianFilter
size	txmempool.h	/^    unsigned long size()$/;"	f	class:CTxMemPool
size	uint256.h	/^    unsigned int size() const$/;"	f	class:base_blob
size_	leveldb/helpers/memenv/memenv.cc	/^  uint64_t size_;$/;"	m	class:leveldb::__anon26::FileState	file:
size_	leveldb/include/leveldb/slice.h	/^  size_t size_;$/;"	m	class:leveldb::Slice
size_	leveldb/table/block.h	/^  size_t size_;$/;"	m	class:leveldb::Block
size_	leveldb/table/format.h	/^  uint64_t size_;$/;"	m	class:leveldb::BlockHandle
size_type	limitedmap.h	/^    typedef typename std::map<K, V>::size_type size_type;$/;"	t	class:limitedmap
size_type	mruset.h	/^    typedef typename std::set<T>::size_type size_type;$/;"	t	class:mruset
size_type	streams.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
size_type	support/allocators/secure.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	support/allocators/zeroafterfree.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:zero_after_free_allocator
smallest	leveldb/db/db_impl.cc	/^    InternalKey smallest, largest;$/;"	m	struct:leveldb::DBImpl::CompactionState::Output	file:
smallest	leveldb/db/version_edit.h	/^  InternalKey smallest;       \/\/ Smallest internal key served by table$/;"	m	struct:leveldb::FileMetaData
smallest_snapshot	leveldb/db/db_impl.cc	/^  SequenceNumber smallest_snapshot;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
snapshot	leveldb/include/leveldb/options.h	/^  const Snapshot* snapshot;$/;"	m	struct:leveldb::ReadOptions
snapshots_	leveldb/db/db_impl.h	/^  SnapshotList snapshots_;$/;"	m	class:leveldb::DBImpl
snprintf	leveldb/port/port_win.h	35;"	d
socket	net.cpp	/^    SOCKET socket;$/;"	m	struct:__anon9::ListenSocket	file:
sorted	timedata.h	/^    std::vector<T> sorted() const$/;"	f	class:CMedianFilter
source	addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
sourceFile	sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
source_	leveldb/db/log_test.cc	/^  StringSource source_;$/;"	m	class:leveldb::log::LogTest	file:
source_	leveldb/table/table_test.cc	/^  StringSource* source_;$/;"	m	class:leveldb::TableConstructor	file:
space	json/json_spirit_writer_template.h	/^        void space()$/;"	f	class:json_spirit::Generator
space_	leveldb/db/dbformat.h	/^  char space_[200];      \/\/ Avoid allocation for short keys$/;"	m	class:leveldb::LookupKey
spendTx	test/script_tests.cpp	/^    CMutableTransaction spendTx;$/;"	m	class:__anon94::TestBuilder	file:
spirit_namespace	json/json_spirit_reader_template.h	24;"	d
spirit_namespace	json/json_spirit_reader_template.h	31;"	d
src	streams.h	/^    FILE *src;            \/\/ source file$/;"	m	class:CBufferedFile
srcdir	Makefile	/^srcdir = .$/;"	m
srcdir	secp256k1/Makefile	/^srcdir = .$/;"	m
ssSend	net.h	/^    CDataStream ssSend;$/;"	m	class:CNode
ss_	leveldb/util/testharness.h	/^  std::stringstream ss_;$/;"	m	class:leveldb::test::Tester
sslStream	rpcserver.cpp	/^    boost::asio::ssl::stream<typename Protocol::socket> sslStream;$/;"	m	class:AcceptedConnectionImpl	file:
stack_	json/json_spirit_reader_template.h	/^        std::vector< Value_type* > stack_;   \/\/ previous child objects and arrays$/;"	m	class:json_spirit::Semantic_actions
stacktop	script/interpreter.cpp	59;"	d	file:
start	json/json_spirit_reader_template.h	/^            const spirit_namespace::rule< ScannerT >& start() const { return json_; }$/;"	f	class:json_spirit::Json_grammer::definition
start	leveldb/db/db_bench.cc	/^  bool start;$/;"	m	struct:leveldb::__anon15::SharedState	file:
start	leveldb/include/leveldb/db.h	/^  Slice start;          \/\/ Included in the range$/;"	m	struct:leveldb::Range
start_	leveldb/db/db_bench.cc	/^  double start_;$/;"	m	class:leveldb::__anon15::Stats	file:
start_	leveldb/db/dbformat.h	/^  const char* start_;$/;"	m	class:leveldb::LookupKey
start_	leveldb/doc/bench/db_bench_sqlite3.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	leveldb/doc/bench/db_bench_tree_db.cc	/^  double start_;$/;"	m	class:leveldb::Benchmark	file:
start_	leveldb/table/filter_block.h	/^  std::vector<size_t> start_;     \/\/ Starting index in keys_ of each key$/;"	m	class:leveldb::FilterBlockBuilder
started_bgthread_	leveldb/util/env_posix.cc	/^  bool started_bgthread_;$/;"	m	class:leveldb::__anon42::PosixEnv	file:
starts_with	leveldb/include/leveldb/slice.h	/^  bool starts_with(const Slice& x) const {$/;"	f	class:leveldb::Slice
state	leveldb/db/db_test.cc	/^  MTState* state;$/;"	m	struct:leveldb::__anon19::MTThread	file:
state	leveldb/db/version_set.cc	/^  SaverState state;$/;"	m	struct:leveldb::__anon24::Saver	file:
state	rpcmining.cpp	/^    CValidationState state;$/;"	m	class:submitblock_StateCatcher	file:
state	test/handler_license.cpp	/^    CValidationState state;$/;"	m	struct:CreateLicenseHandlerCheckValidFixture	file:
state	test/handler_license.cpp	/^    CValidationState state;$/;"	m	struct:TransferLicenseHandlerCheckValidFixture	file:
state	test/handler_normal.cpp	/^    CValidationState state;$/;"	m	struct:NormalHandlerCheckValidFixture	file:
state_	leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_comparator_t	file:
state_	leveldb/db/c.cc	/^  void* state_;$/;"	m	struct:leveldb_filterpolicy_t	file:
state_	leveldb/db/skiplist_test.cc	/^  ReaderState state_;$/;"	m	class:leveldb::TestState	file:
state_	leveldb/include/leveldb/status.h	/^  const char* state_;$/;"	m	class:leveldb::Status
state_cv_	leveldb/db/skiplist_test.cc	/^  port::CondVar state_cv_;$/;"	m	class:leveldb::TestState	file:
stats	leveldb/db/db_bench.cc	/^  Stats stats;$/;"	m	struct:leveldb::__anon15::ThreadState	file:
stats	policy/fees.h	/^        TxConfirmStats *stats;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
stats_	leveldb/db/db_impl.h	/^  CompactionStats stats_[config::kNumLevels];$/;"	m	class:leveldb::DBImpl
status	leveldb/db/db_impl.cc	/^  Status status;$/;"	m	struct:leveldb::DBImpl::Writer	file:
status	leveldb/db/db_iter.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon22::DBIter
status	leveldb/db/db_test.cc	/^    virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::ModelDB::ModelIter
status	leveldb/db/memtable.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::MemTableIterator
status	leveldb/db/version_set.cc	/^  virtual Status status() const { return Status::OK(); }$/;"	f	class:leveldb::Version::LevelFileNumIterator
status	leveldb/table/block.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::Block::Iter
status	leveldb/table/iterator.cc	/^  virtual Status status() const { return status_; }$/;"	f	class:leveldb::__anon29::EmptyIterator
status	leveldb/table/iterator_wrapper.h	/^  Status status() const     { assert(iter_); return iter_->status(); }$/;"	f	class:leveldb::IteratorWrapper
status	leveldb/table/merger.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon28::MergingIterator
status	leveldb/table/table.cc	/^  Status status;$/;"	m	struct:leveldb::Table::Rep	file:
status	leveldb/table/table_builder.cc	/^  Status status;$/;"	m	struct:leveldb::TableBuilder::Rep	file:
status	leveldb/table/table_builder.cc	/^Status TableBuilder::status() const {$/;"	f	class:leveldb::TableBuilder
status	leveldb/table/table_test.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::KeyConvertingIterator
status	leveldb/table/two_level_iterator.cc	/^  virtual Status status() const {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
status	rest.cpp	/^    enum HTTPStatusCode status;$/;"	m	class:RestErr	typeref:enum:RestErr::HTTPStatusCode	file:
status_	leveldb/db/db_iter.cc	/^  Status status_;$/;"	m	class:leveldb::__anon22::DBIter	file:
status_	leveldb/table/block.cc	/^  Status status_;$/;"	m	class:leveldb::Block::Iter	file:
status_	leveldb/table/iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon29::EmptyIterator	file:
status_	leveldb/table/table_test.cc	/^  mutable Status status_;$/;"	m	class:leveldb::KeyConvertingIterator	file:
status_	leveldb/table/two_level_iterator.cc	/^  Status status_;$/;"	m	class:leveldb::__anon30::TwoLevelIterator	file:
stl_tree_node	memusage.h	/^struct stl_tree_node$/;"	s	namespace:memusage
stop	leveldb/db/db_test.cc	/^  port::AtomicPointer stop;$/;"	m	struct:leveldb::__anon19::MTState	file:
stop	rpcserver.cpp	/^Value stop(const Array& params, bool fHelp)$/;"	f
stop	scheduler.cpp	/^void CScheduler::stop(bool drain)$/;"	f	class:CScheduler
stopRequested	scheduler.h	/^    bool stopRequested;$/;"	m	class:CScheduler
stopWhenEmpty	scheduler.h	/^    bool stopWhenEmpty;$/;"	m	class:CScheduler
store	script/sigcache.h	/^    bool store;$/;"	m	class:CachingTransactionSignatureChecker
str	streams.h	/^    std::string str() const$/;"	f	class:CDataStream
strAccount	wallet/wallet.h	/^    std::string strAccount;$/;"	m	class:CAccountingEntry
strComment	alert.h	/^    std::string strComment;$/;"	m	class:CUnsignedAlert
strComment	wallet/wallet.h	/^    std::string strComment;$/;"	m	class:CAccountingEntry
strComment	wallet/wallet.h	/^    std::string strComment;$/;"	m	class:CWalletKey
strDataDir	chainparamsbase.h	/^    std::string strDataDir;$/;"	m	class:CBaseChainParams
strFile	wallet/db.h	/^    std::string strFile;$/;"	m	class:CDB
strFromAccount	wallet/wallet.h	/^    std::string strFromAccount;$/;"	m	class:CWalletTx
strHexMaster	test/bip32_tests.cpp	/^    std::string strHexMaster;$/;"	m	struct:TestVector	file:
strMessageMagic	main.cpp	/^const string strMessageMagic = "Gcoin Signed Message:\\n";$/;"	v
strMethod	rpcserver.cpp	/^    string strMethod;$/;"	m	class:JSONRequest	file:
strMiscWarning	util.cpp	/^std::string strMiscWarning;$/;"	v
strNetworkID	chainparams.h	/^    std::string strNetworkID;$/;"	m	class:CChainParams
strOtherAccount	wallet/wallet.h	/^    std::string strOtherAccount;$/;"	m	class:CAccountingEntry
strPath	wallet/db.h	/^    std::string strPath;$/;"	m	class:CDBEnv
strRPCUserColonPass	rpcserver.cpp	/^static std::string strRPCUserColonPass;$/;"	v	file:
strRejectReason	consensus/validation.h	/^    std::string strRejectReason;$/;"	m	class:CValidationState
strRejectReason	main.cpp	/^    string strRejectReason;$/;"	m	struct:__anon47::CBlockReject	file:
strReserved	alert.h	/^    std::string strReserved;$/;"	m	class:CUnsignedAlert
strStatusBar	alert.h	/^    std::string strStatusBar;$/;"	m	class:CUnsignedAlert
strSubVer	net.h	/^    std::string strSubVer, cleanSubVer;$/;"	m	class:CNode
strWalletFile	wallet/wallet.h	/^    std::string strWalletFile;$/;"	m	class:CWallet
str_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
stream	rpcprotocol.h	/^    boost::asio::ssl::stream<typename Protocol::socket>& stream;$/;"	m	class:SSLIOStreamDevice
stream	rpcserver.cpp	/^    virtual std::iostream& stream()$/;"	f	class:AcceptedConnectionImpl
streamStateFromFormat	tinyformat.h	/^inline const char* FormatIterator::streamStateFromFormat(std::ostream& out,$/;"	f	class:tinyformat::detail::FormatIterator
string	serialize.h	/^    std::string& string;$/;"	m	class:LimitedString
string_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
strnlen	compat/strnlen.cpp	/^size_t strnlen( const char *start, size_t max_len)$/;"	f
strprintf	tinyformat.h	1011;"	d
subdir	Makefile	/^subdir = src$/;"	m
subdir	secp256k1/Makefile	/^subdir = .$/;"	m
subdirs	Makefile	/^subdirs =  src\/secp256k1$/;"	m
submitblock	rpcmining.cpp	/^Value submitblock(const Array& params, bool fHelp)$/;"	f
submitblock_StateCatcher	rpcmining.cpp	/^    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {};$/;"	f	class:submitblock_StateCatcher
submitblock_StateCatcher	rpcmining.cpp	/^class submitblock_StateCatcher : public CValidationInterface$/;"	c	file:
subprocess	test/bctest.py	/^import subprocess$/;"	i
substitute_esc_chars	json/json_spirit_reader_template.h	/^    String_type substitute_esc_chars( typename String_type::const_iterator begin, $/;"	f	namespace:json_spirit
succeed	tinyformat.h	/^        struct succeed { char dummy; };$/;"	s	struct:tinyformat::detail::is_convertible
sum_	leveldb/util/histogram.h	/^  double sum_;$/;"	m	class:leveldb::Histogram
sum_squares_	leveldb/util/histogram.h	/^  double sum_squares_;$/;"	m	class:leveldb::Histogram
sumadd	secp256k1/src/scalar_4x64_impl.h	221;"	d
sumadd	secp256k1/src/scalar_4x64_impl.h	866;"	d
sumadd	secp256k1/src/scalar_8x32_impl.h	291;"	d
sumadd	secp256k1/src/scalar_8x32_impl.h	613;"	d
sumadd_fast	secp256k1/src/scalar_4x64_impl.h	230;"	d
sumadd_fast	secp256k1/src/scalar_4x64_impl.h	867;"	d
sumadd_fast	secp256k1/src/scalar_8x32_impl.h	300;"	d
sumadd_fast	secp256k1/src/scalar_8x32_impl.h	614;"	d
swap	coins.h	/^    void swap(CCoins &to)$/;"	f	class:CCoins
swap	main.h	/^    void swap(CScriptCheck &check)$/;"	f	class:CScriptCheck
sync	leveldb/db/db_impl.cc	/^  bool sync;$/;"	m	struct:leveldb::DBImpl::Writer	file:
sync	leveldb/include/leveldb/options.h	/^  bool sync;$/;"	m	struct:leveldb::WriteOptions
syncoptions	leveldbwrapper.h	/^    leveldb::WriteOptions syncoptions;$/;"	m	class:CLevelDBWrapper
sys	test/bctest.py	/^import sys$/;"	i
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	secp256k1/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t_	leveldb/db/skiplist_test.cc	/^  ConcurrentTest t_;$/;"	m	class:leveldb::TestState	file:
table	leveldb/db/table_cache.cc	/^  Table* table;$/;"	m	struct:leveldb::TableAndFile	file:
table0_	leveldb/util/crc32c.cc	/^static const uint32_t table0_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table1_	leveldb/util/crc32c.cc	/^static const uint32_t table1_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table2_	leveldb/util/crc32c.cc	/^static const uint32_t table2_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
table3_	leveldb/util/crc32c.cc	/^static const uint32_t table3_[256] = {$/;"	m	namespace:leveldb::crc32c	file:
tableRPC	rpcserver.cpp	/^const CRPCTable tableRPC;$/;"	v
table_	leveldb/db/memtable.h	/^  Table table_;$/;"	m	class:leveldb::MemTable
table_	leveldb/table/table_test.cc	/^  Table* table_;$/;"	m	class:leveldb::TableConstructor	file:
table_	leveldb/util/cache.cc	/^  HandleTable table_;$/;"	m	class:leveldb::__anon39::LRUCache	file:
table_cache_	leveldb/db/db_impl.h	/^  TableCache* table_cache_;$/;"	m	class:leveldb::DBImpl
table_cache_	leveldb/db/repair.cc	/^  TableCache* table_cache_;$/;"	m	class:leveldb::__anon17::Repairer	file:
table_cache_	leveldb/db/version_set.h	/^  TableCache* const table_cache_;$/;"	m	class:leveldb::VersionSet
table_numbers_	leveldb/db/repair.cc	/^  std::vector<uint64_t> table_numbers_;$/;"	m	class:leveldb::__anon17::Repairer	file:
tables_	leveldb/db/repair.cc	/^  std::vector<TableInfo> tables_;$/;"	m	class:leveldb::__anon17::Repairer	file:
tallyitem	wallet/rpcwallet.cpp	/^    tallyitem()$/;"	f	struct:tallyitem
tallyitem	wallet/rpcwallet.cpp	/^struct tallyitem$/;"	s	file:
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	secp256k1/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target	leveldb/include/leveldb/env.h	/^  Env* target() const { return target_; }$/;"	f	class:leveldb::EnvWrapper
target_	leveldb/include/leveldb/env.h	/^  Env* target_;$/;"	m	class:leveldb::EnvWrapper
target_alias	Makefile	/^target_alias = $/;"	m
target_alias	secp256k1/Makefile	/^target_alias = $/;"	m
taskQueue	scheduler.h	/^    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;$/;"	m	class:CScheduler
test	leveldb/db/db_test.cc	/^  DBTest* test;$/;"	m	struct:leveldb::__anon19::MTState	file:
test	leveldb/util/testharness.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	leveldb/util/testharness.h	/^namespace test {$/;"	n	namespace:leveldb
test	leveldb/util/testutil.cc	/^namespace test {$/;"	n	namespace:leveldb	file:
test	leveldb/util/testutil.h	/^namespace test {$/;"	n	namespace:leveldb
test1	test/bip32_tests.cpp	/^TestVector test1 =$/;"	v
test1	test/crypto_tests.cpp	/^const std::string test1 = LongTestString();$/;"	v
test2	test/bip32_tests.cpp	/^TestVector test2 =$/;"	v
testNetParams	chainparams.cpp	/^static CTestNetParams testNetParams;$/;"	v	file:
testNetParams	chainparamsbase.cpp	/^static CBaseTestNetParams testNetParams;$/;"	v	file:
test_ecdsa_edge_cases	secp256k1/src/tests.c	/^void test_ecdsa_edge_cases(void) {$/;"	f
test_ecdsa_end_to_end	secp256k1/src/tests.c	/^void test_ecdsa_end_to_end(void) {$/;"	f
test_ecdsa_openssl	secp256k1/src/tests.c	/^void test_ecdsa_openssl(void) {$/;"	f
test_ecdsa_sign_verify	secp256k1/src/tests.c	/^void test_ecdsa_sign_verify(void) {$/;"	f
test_ecmult_constants	secp256k1/src/tests.c	/^void test_ecmult_constants(void) {$/;"	f
test_ecmult_gen_blind	secp256k1/src/tests.c	/^void test_ecmult_gen_blind(void) {$/;"	f
test_ecmult_gen_blind_reset	secp256k1/src/tests.c	/^void test_ecmult_gen_blind_reset(void) {$/;"	f
test_ge	secp256k1/src/tests.c	/^void test_ge(void) {$/;"	f
test_num_add_sub	secp256k1/src/tests.c	/^void test_num_add_sub(void) {$/;"	f
test_num_negate	secp256k1/src/tests.c	/^void test_num_negate(void) {$/;"	f
test_point_times_order	secp256k1/src/tests.c	/^void test_point_times_order(const secp256k1_gej_t *point) {$/;"	f
test_random_pubkeys	secp256k1/src/tests.c	/^void test_random_pubkeys(void) {$/;"	f
test_sqrt	secp256k1/src/tests.c	/^void test_sqrt(const secp256k1_fe_t *a, const secp256k1_fe_t *k) {$/;"	f
test_test_bitcoin_CPPFLAGS	Makefile	/^test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)\/test\/ $(TESTDEFS)$/;"	m
test_test_bitcoin_DEPENDENCIES	Makefile	/^test_test_bitcoin_DEPENDENCIES =  \\$/;"	m
test_test_bitcoin_LDADD	Makefile	/^test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) \\$/;"	m
test_test_bitcoin_LDFLAGS	Makefile	/^test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS)$/;"	m
test_test_bitcoin_LINK	Makefile	/^test_test_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
test_test_bitcoin_OBJECTS	Makefile	/^test_test_bitcoin_OBJECTS = $(am_test_test_bitcoin_OBJECTS) \\$/;"	m
test_test_bitcoin_SOURCES	Makefile	/^test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SRC) $(JSON_TEST_FILES) $(RAW_TEST_FILES)$/;"	m
test_wnaf	secp256k1/src/tests.c	/^void test_wnaf(const secp256k1_scalar_t *number, int w) {$/;"	f
tests	leveldb/util/testharness.cc	/^std::vector<Test>* tests;$/;"	m	namespace:leveldb::test::__anon41	file:
tests_CPPFLAGS	secp256k1/Makefile	/^tests_CPPFLAGS = -DVERIFY $(SECP_INCLUDES) $(SECP_TEST_INCLUDES)$/;"	m
tests_DEPENDENCIES	secp256k1/Makefile	/^tests_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
tests_LDADD	secp256k1/Makefile	/^tests_LDADD = $(SECP_LIBS) $(SECP_TEST_LIBS)$/;"	m
tests_LDFLAGS	secp256k1/Makefile	/^tests_LDFLAGS = -static$/;"	m
tests_LINK	secp256k1/Makefile	/^tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
tests_OBJECTS	secp256k1/Makefile	/^tests_OBJECTS = $(am_tests_OBJECTS)$/;"	m
tests_SOURCES	secp256k1/Makefile	/^tests_SOURCES = src\/tests.c$/;"	m
thread	leveldb/db/db_bench.cc	/^    ThreadState* thread;$/;"	m	struct:leveldb::Benchmark::ThreadArg	file:
threadGroup	test/test_bitcoin.h	/^    boost::thread_group threadGroup;$/;"	m	struct:TestingSetup
threadSafe	rpcserver.h	/^    bool threadSafe;$/;"	m	class:CRPCCommand
thread_done	leveldb/db/db_test.cc	/^  port::AtomicPointer thread_done[kNumThreads];$/;"	m	struct:leveldb::__anon19::MTState	file:
throw_error	json/json_spirit_reader_template.h	/^    void throw_error( Iter_type i, const std::string& reason )$/;"	f	namespace:json_spirit
throw_error	json/json_spirit_reader_template.h	/^    void throw_error( spirit_namespace::position_iterator< Iter_type > i, const std::string& reason )$/;"	f	namespace:json_spirit
throw_not_array	json/json_spirit_reader_template.h	/^        static void throw_not_array( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_colon	json/json_spirit_reader_template.h	/^        static void throw_not_colon( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_object	json/json_spirit_reader_template.h	/^        static void throw_not_object( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_pair	json/json_spirit_reader_template.h	/^        static void throw_not_pair( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_string	json/json_spirit_reader_template.h	/^        static void throw_not_string( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_value	json/json_spirit_reader_template.h	/^        static void throw_not_value( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
tid	leveldb/db/db_bench.cc	/^  int tid;             \/\/ 0..n-1 when running in n threads$/;"	m	struct:leveldb::__anon15::ThreadState	file:
tiny_cache_	leveldb/db/autocompact_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::AutoCompactTest	file:
tiny_cache_	leveldb/db/corruption_test.cc	/^  Cache* tiny_cache_;$/;"	m	class:leveldb::CorruptionTest	file:
tinyformat	tinyformat.h	/^namespace tinyformat {$/;"	n
tinyformat	tinyformat.h	/^namespace tinyformat {}$/;"	n
tinyformat_wchar_is_not_supported	tinyformat.h	/^template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };$/;"	t	struct:tinyformat::detail::is_wchar
tmp_	leveldb/db/memtable.cc	/^  std::string tmp_;       \/\/ For passing to EncodeKey$/;"	m	class:leveldb::MemTableIterator	file:
tmp_batch_	leveldb/db/db_impl.h	/^  WriteBatch* tmp_batch_;$/;"	m	class:leveldb::DBImpl
tmp_keys_	leveldb/table/filter_block.h	/^  std::vector<Slice> tmp_keys_;   \/\/ policy_->CreateFilter() argument$/;"	m	class:leveldb::FilterBlockBuilder
tmp_storage	leveldb/db/db_impl.h	/^    InternalKey tmp_storage;    \/\/ Used to keep track of compaction progress$/;"	m	struct:leveldb::DBImpl::ManualCompaction
toPosixTime	scheduler.cpp	/^static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)$/;"	f	file:
to_hex_char	json/json_spirit_writer_template.h	/^    inline char to_hex_char( unsigned int c )$/;"	f	namespace:json_spirit
to_str	json/json_spirit_value.h	/^    String_type to_str( const char* c_str )$/;"	f	namespace:json_spirit
top_build_prefix	Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	secp256k1/Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_builddir	secp256k1/Makefile	/^top_builddir = .$/;"	m
top_distdir	secp256k1/Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	secp256k1/Makefile	/^top_srcdir = .$/;"	m
total	leveldb/db/db_bench.cc	/^  int total;$/;"	m	struct:leveldb::__anon15::SharedState	file:
totalTxSize	txmempool.h	/^    uint64_t totalTxSize; \/\/! sum of all mempool tx' byte sizes$/;"	m	class:CTxMemPool
total_bytes	leveldb/db/db_impl.cc	/^  uint64_t total_bytes;$/;"	m	struct:leveldb::DBImpl::CompactionState	file:
transactions	test/test_bitcoin.cpp	/^map<uint256, CMutableTransaction> transactions;$/;"	v
transfer_hash	test/handler_license.cpp	/^    uint256 license_hash, transfer_hash, out_hash;$/;"	m	struct:TransferLicenseHandlerCheckValidFixture	file:
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
transform	secp256k1/Makefile	/^transform = $(program_transform_name)$/;"	m
translationInterface	util.cpp	/^CTranslationInterface translationInterface;$/;"	v
try_wait	sync.h	/^    bool try_wait()$/;"	f	class:CSemaphore
tx	main.cpp	/^    CTransaction tx;$/;"	m	struct:COrphanTx	file:
tx	test/DoS_tests.cpp	/^    CTransaction tx;$/;"	m	struct:COrphanTx	file:
tx	txmempool.h	/^    CTransaction tx;$/;"	m	class:CTxMemPoolEntry
tx	wallet/wallet.h	/^    const CWalletTx *tx;$/;"	m	class:COutput
txCtAvg	policy/fees.h	/^    std::vector<double> txCtAvg;$/;"	m	class:TxConfirmStats
txTo	script/interpreter.cpp	/^    const CTransaction &txTo;  \/\/! reference to the spending transaction (the one being serialized)$/;"	m	class:__anon88::CTransactionSignatureSerializer	file:
txTo	script/interpreter.h	/^    const CTransaction txTo;$/;"	m	class:MutableTransactionSignatureChecker
txTo	script/interpreter.h	/^    const CTransaction* txTo;$/;"	m	class:TransactionSignatureChecker
txTo	script/sign.h	/^    const CTransaction* txTo;$/;"	m	class:TransactionSignatureCreator
tx_hash	main.cpp	/^    uint256 tx_hash;$/;"	m	struct:__anon49::CCachedAddress	file:
tx_type	amount.h	/^typedef uint32_t tx_type;$/;"	t
tx_type	policy/licenseinfo.h	/^typedef uint32_t tx_type;$/;"	t
txids	wallet/rpcwallet.cpp	/^    vector<uint256> txids;$/;"	m	struct:tallyitem	file:
txn	merkleblock.h	/^    CPartialMerkleTree txn;$/;"	m	class:CMerkleBlock
txnouttype	script/standard.h	/^enum txnouttype$/;"	g
txout	compressor.h	/^    CTxOut &txout;$/;"	m	class:CTxOutCompressor
txout	undo.h	/^    CTxOut txout;         \/\/ the txout data before being spent$/;"	m	class:CTxInUndo
typ	univalue/univalue.h	/^    UniValue::VType typ;$/;"	m	class:UniValue
type	coins.h	/^    tx_type type;$/;"	m	class:CCoins
type	json/json_spirit_value.h	/^    Value_type Value_impl< Config >::type() const$/;"	f	class:json_spirit::Value_impl
type	leveldb/db/dbformat.h	/^  ValueType type;$/;"	m	struct:leveldb::ParsedInternalKey
type	leveldb/table/table_test.cc	/^  TestType type;$/;"	m	struct:leveldb::TestArgs	file:
type	main.h	/^    tx_type type;$/;"	m	class:TxInfo
type	net.h	/^        ERecordType type() const { return BANDWIDTH; }$/;"	f	class:CNetRecorder::CBandwidthRecord
type	net.h	/^        ERecordType type() const { return RTT; }$/;"	f	class:CNetRecorder::CRTTRecord
type	net.h	/^        int32_t type;$/;"	m	struct:CNetRecorder::SFileRecordHeader
type	primitives/transaction.h	/^    const tx_type type;$/;"	m	class:CTransaction
type	primitives/transaction.h	/^    tx_type type;$/;"	m	struct:CMutableTransaction
type	protocol.h	/^    int type;$/;"	m	class:CInv
type	undo.h	/^    tx_type type;         \/\/ its type$/;"	m	class:CTxInUndo
type_	json/json_spirit_value.h	/^        Value_type type_;$/;"	m	class:json_spirit::Value_impl
type_	main.cpp	/^    tx_type type_;$/;"	m	class:type_transaction_handler::__anon48::HandlerUtility_	file:
type_	test/test_bitcoin.h	/^    int type_;$/;"	m	class:CWallet_UnitTest
type_Color	amount.h	/^typedef uint32_t type_Color;$/;"	t
type_Color	policy/licenseinfo.h	/^typedef uint32_t type_Color;$/;"	t
type_crc_	leveldb/db/log_writer.h	/^  uint32_t type_crc_[kMaxRecordType + 1];$/;"	m	class:leveldb::log::Writer
type_transaction_handler	main.cpp	/^namespace type_transaction_handler$/;"	n	file:
type_transaction_handler	main.h	/^namespace type_transaction_handler$/;"	n
ucmp	leveldb/db/version_set.cc	/^  const Comparator* ucmp;$/;"	m	struct:leveldb::__anon24::Saver	file:
uiInterface	init.cpp	/^CClientUIInterface uiInterface; \/\/ Declared but not defined in ui_interface.h$/;"	v
uint128_t	secp256k1/src/util.h	/^SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;$/;"	t
uint160	uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch) : base_blob<160>(vch) {}$/;"	f	class:uint160
uint160	uint256.h	/^    uint160() {}$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(const base_blob<160>& b) : base_blob<160>(b) {}$/;"	f	class:uint160
uint160	uint256.h	/^class uint160 : public base_blob<160> {$/;"	c
uint160S	test/uint256_tests.cpp	/^inline uint160 uint160S(const char *str)$/;"	f
uint160S	test/uint256_tests.cpp	/^inline uint160 uint160S(const std::string& str)$/;"	f
uint16_t	leveldb/port/win/stdint.h	/^typedef unsigned short        uint16_t;$/;"	t
uint256	uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}$/;"	f	class:uint256
uint256	uint256.h	/^    uint256() {}$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(const base_blob<256>& b) : base_blob<256>(b) {}$/;"	f	class:uint256
uint256	uint256.h	/^class uint256 : public base_blob<256> {$/;"	c
uint256S	uint256.h	/^inline uint256 uint256S(const char *str)$/;"	f
uint256S	uint256.h	/^inline uint256 uint256S(const std::string& str)$/;"	f
uint32_t	leveldb/port/win/stdint.h	/^typedef unsigned int          uint32_t;$/;"	t
uint64_p	json/json_spirit_reader_template.h	/^    const spirit_namespace::uint_parser< uint64_t > uint64_p = spirit_namespace::uint_parser< uint64_t >();$/;"	m	namespace:json_spirit
uint64_t	leveldb/port/win/stdint.h	/^typedef unsigned long long    uint64_t;$/;"	t
uint8_t	leveldb/port/win/stdint.h	/^typedef unsigned char         uint8_t;$/;"	t
uint_error	arith_uint256.h	/^    explicit uint_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:uint_error
uint_error	arith_uint256.h	/^class uint_error : public std::runtime_error {$/;"	c
ul 	leveldb/doc/doc.css	/^ul {$/;"	s
unconfTxs	policy/fees.h	/^    std::vector<std::vector<int> > unconfTxs;  \/\/unconfTxs[Y][X]$/;"	m	class:TxConfirmStats
unicode_str_to_char	json/json_spirit_reader_template.h	/^    Char_type unicode_str_to_char( Iter_type& begin )$/;"	f	namespace:json_spirit
unitTestParams	chainparamsbase.cpp	/^static CBaseUnitTestParams unitTestParams;$/;"	v	file:
univalue_libbitcoin_univalue_a_AR	Makefile	/^univalue_libbitcoin_univalue_a_AR = $(AR) $(ARFLAGS)$/;"	m
univalue_libbitcoin_univalue_a_LIBADD	Makefile	/^univalue_libbitcoin_univalue_a_LIBADD =$/;"	m
univalue_libbitcoin_univalue_a_OBJECTS	Makefile	/^univalue_libbitcoin_univalue_a_OBJECTS =  \\$/;"	m
univalue_libbitcoin_univalue_a_SOURCES	Makefile	/^univalue_libbitcoin_univalue_a_SOURCES = \\$/;"	m
update	limitedmap.h	/^    void update(const_iterator itIn, const mapped_type& v)$/;"	f	class:limitedmap
uri_prefixes	rest.cpp	/^} uri_prefixes[] = {$/;"	v	typeref:struct:__anon61	file:
usage_	leveldb/util/cache.cc	/^  size_t usage_;$/;"	m	class:leveldb::__anon39::LRUCache	file:
usage_error	secp256k1/build-aux/test-driver	/^usage_error ()$/;"	f
user	test/handler_license.cpp	/^    std::string issuer, user;$/;"	m	struct:TransferLicenseHandlerCheckValidFixture	file:
user_comparator	leveldb/db/db_impl.h	/^  const Comparator* user_comparator() const {$/;"	f	class:leveldb::DBImpl
user_comparator	leveldb/db/dbformat.h	/^  const Comparator* user_comparator() const { return user_comparator_; }$/;"	f	class:leveldb::InternalKeyComparator
user_comparator_	leveldb/db/db_iter.cc	/^  const Comparator* const user_comparator_;$/;"	m	class:leveldb::__anon22::DBIter	file:
user_comparator_	leveldb/db/dbformat.h	/^  const Comparator* user_comparator_;$/;"	m	class:leveldb::InternalKeyComparator
user_function	leveldb/util/env_posix.cc	/^  void (*user_function)(void*);$/;"	m	struct:leveldb::__anon42::__anon43::StartThreadState	file:
user_key	leveldb/db/dbformat.h	/^  Slice user_key() const { return ExtractUserKey(rep_); }$/;"	f	class:leveldb::InternalKey
user_key	leveldb/db/dbformat.h	/^  Slice user_key() const { return Slice(kstart_, end_ - kstart_ - 8); }$/;"	f	class:leveldb::LookupKey
user_key	leveldb/db/dbformat.h	/^  Slice user_key;$/;"	m	struct:leveldb::ParsedInternalKey
user_key	leveldb/db/version_set.cc	/^  Slice user_key;$/;"	m	struct:leveldb::__anon24::Saver	file:
user_policy_	leveldb/db/dbformat.h	/^  const FilterPolicy* const user_policy_;$/;"	m	class:leveldb::InternalFilterPolicy
username	netbase.cpp	/^    std::string username;$/;"	m	struct:ProxyCredentials	file:
uvTypeName	univalue/univalue.cpp	/^const char *uvTypeName(UniValue::VType t)$/;"	f
v	secp256k1/src/hash.h	/^    unsigned char v[32];$/;"	m	struct:__anon82
vAddedNodes	net.cpp	/^vector<string> vAddedNodes;$/;"	v
vAddrToSend	net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vAlertPubKey	chainparams.h	/^    std::vector<unsigned char> vAlertPubKey;$/;"	m	class:CChainParams
vBits	merkleblock.h	/^    std::vector<bool> vBits;$/;"	m	class:CPartialMerkleTree
vBlocksInFlight	main.cpp	/^    list<QueuedBlock> vBlocksInFlight;$/;"	m	struct:__anon47::CNodeState	file:
vChain	chain.h	/^    std::vector<CBlockIndex*> vChain;$/;"	m	class:CChain
vCoins	wallet/test/wallet_tests.cpp	/^static vector<COutput> vCoins;$/;"	v	file:
vData	bloom.h	/^    std::vector<unsigned char> vData;$/;"	m	class:CBloomFilter
vDerive	test/bip32_tests.cpp	/^    std::vector<TestDerivation> vDerive;$/;"	m	struct:TestVector	file:
vFixedSeeds	chainparams.h	/^    std::vector<SeedSpec6> vFixedSeeds;$/;"	m	class:CChainParams
vHash	merkleblock.h	/^    std::vector<uint256> vHash;$/;"	m	class:CPartialMerkleTree
vHave	primitives/block.h	/^    std::vector<uint256> vHave;$/;"	m	struct:CBlockLocator
vHeightInFlight	main.h	/^    std::vector<int> vHeightInFlight;$/;"	m	struct:CNodeStateStats
vInventoryToSend	net.h	/^    std::vector<CInv> vInventoryToSend;$/;"	m	class:CNode
vKeys	wallet/wallet.cpp	/^    std::vector<CKeyID> &vKeys;$/;"	m	class:CAffectedKeysVisitor	file:
vMasterKey	wallet/crypter.h	/^    CKeyingMaterial vMasterKey;$/;"	m	class:CCryptoKeyStore
vMatchedTxn	merkleblock.h	/^    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;$/;"	m	class:CMerkleBlock
vMerkleBranch	wallet/wallet.h	/^    std::vector<uint256> vMerkleBranch;$/;"	m	class:CMerkleTx
vMerkleTree	primitives/block.h	/^    mutable std::vector<uint256> vMerkleTree;$/;"	m	class:CBlock
vNodes	net.cpp	/^vector<CNode*> vNodes;$/;"	v
vNodesDisconnected	net.cpp	/^static list<CNode*> vNodesDisconnected;$/;"	v	file:
vOneShots	net.cpp	/^static deque<string> vOneShots;$/;"	v	file:
vOrderForm	wallet/wallet.h	/^    std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vRPCCommands	rpcserver.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRPCConvertParams	rpcclient.cpp	/^static const CRPCConvertParam vRPCConvertParams[] =$/;"	v	file:
vRandom	addrman.h	/^    std::vector<int> vRandom;$/;"	m	class:CAddrMan
vRecv	net.h	/^    CDataStream vRecv;              \/\/ received message data$/;"	m	class:CNetMessage
vRecvGetData	net.h	/^    std::deque<CInv> vRecvGetData;$/;"	m	class:CNode
vRecvMsg	net.h	/^    std::deque<CNetMessage> vRecvMsg;$/;"	m	class:CNode
vRelayExpiration	net.cpp	/^deque<pair<int64_t, CInv> > vRelayExpiration;$/;"	v
vSeeds	chainparams.h	/^    std::vector<CDNSSeedData> vSeeds;$/;"	m	class:CChainParams
vSendMsg	net.h	/^    std::deque<CSerializeData> vSendMsg;$/;"	m	class:CNode
vSorted	timedata.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vTxFees	miner.h	/^    std::vector<CAmount> vTxFees;$/;"	m	struct:CBlockTemplate
vTxSigOps	miner.h	/^    std::vector<int64_t> vTxSigOps;$/;"	m	struct:CBlockTemplate
vValues	timedata.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
vWalletUpgrade	wallet/walletdb.cpp	/^    std::vector<uint256> vWalletUpgrade;$/;"	m	class:CWalletScanState	file:
vWhitelistedRange	net.cpp	/^vector<CSubNet> CNode::vWhitelistedRange;$/;"	m	class:CNode	file:
vWhitelistedRange	net.h	/^    static std::vector<CSubNet> vWhitelistedRange;$/;"	m	class:CNode
v_	json/json_spirit_value.h	/^        Variant v_;$/;"	m	class:json_spirit::Value_impl
va_copy	leveldb/util/env_win.cc	30;"	d	file:
val	leveldb/util/env_test.cc	/^  int val;$/;"	m	struct:leveldb::State	file:
val	univalue/univalue.h	/^    std::string val;                       \/\/ numbers are stored as C++ strings$/;"	m	class:UniValue
valid	netbase.h	/^        bool valid;$/;"	m	class:CSubNet
validNumStr	univalue/univalue.cpp	/^static bool validNumStr(const std::string& s)$/;"	f	file:
valid_	leveldb/db/db_iter.cc	/^  bool valid_;$/;"	m	class:leveldb::__anon22::DBIter	file:
valid_	leveldb/table/iterator_wrapper.h	/^  bool valid_;$/;"	m	class:leveldb::IteratorWrapper
validateaddress	rpcmisc.cpp	/^Value validateaddress(const Array& params, bool fHelp)$/;"	f
valtype	script/interpreter.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	script/sign.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	script/standard.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	test/multisig_tests.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	wallet/wallet_ismine.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
value	leveldb/db/db_iter.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon22::DBIter
value	leveldb/db/db_test.cc	/^    virtual Slice value() const { return iter_->second; }$/;"	f	class:leveldb::ModelDB::ModelIter
value	leveldb/db/memtable.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::MemTableIterator
value	leveldb/db/version_set.cc	/^  Slice value() const {$/;"	f	class:leveldb::Version::LevelFileNumIterator
value	leveldb/db/version_set.cc	/^  std::string* value;$/;"	m	struct:leveldb::__anon24::Saver	file:
value	leveldb/table/block.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::Block::Iter
value	leveldb/table/iterator.cc	/^  Slice value() const { assert(false); return Slice(); }$/;"	f	class:leveldb::__anon29::EmptyIterator
value	leveldb/table/iterator_wrapper.h	/^  Slice value() const       { assert(Valid()); return iter_->value(); }$/;"	f	class:leveldb::IteratorWrapper
value	leveldb/table/merger.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon28::MergingIterator
value	leveldb/table/table_test.cc	/^  virtual Slice value() const { return iter_->value(); }$/;"	f	class:leveldb::KeyConvertingIterator
value	leveldb/table/two_level_iterator.cc	/^  virtual Slice value() const {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
value	leveldb/util/cache.cc	/^  void* value;$/;"	m	struct:leveldb::__anon39::LRUHandle	file:
value	main.h	/^    const int64_t value;$/;"	m	class:Fee
value	sync.h	/^    int value;$/;"	m	class:CSemaphore
value	tinyformat.h	/^        static const bool value =$/;"	m	struct:tinyformat::detail::is_convertible
value_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
value_	json/json_spirit_reader_template.h	/^        Value_type& value_;             \/\/ this is the object or array that is being created$/;"	m	class:json_spirit::Semantic_actions
value_	json/json_spirit_value.h	/^        Value_type value_;$/;"	m	struct:json_spirit::Pair_impl
value_	leveldb/table/block.cc	/^  Slice value_;$/;"	m	class:leveldb::Block::Iter	file:
value_buf_	leveldb/db/version_set.cc	/^  mutable char value_buf_[16];$/;"	m	class:leveldb::Version::LevelFileNumIterator	file:
value_size_	leveldb/db/db_bench.cc	/^  int value_size_;$/;"	m	class:leveldb::Benchmark	file:
value_type	limitedmap.h	/^    typedef std::pair<const key_type, mapped_type> value_type;$/;"	t	class:limitedmap
value_type	mruset.h	/^    typedef T value_type;$/;"	t	class:mruset
value_type	streams.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
value_type	support/allocators/secure.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	support/allocators/zeroafterfree.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:zero_after_free_allocator
values	test/scriptnum_tests.cpp	/^static const int64_t values[] = \\$/;"	v	file:
values	univalue/univalue.h	/^    std::vector<UniValue> values;$/;"	m	class:UniValue
vch	key.h	/^    unsigned char vch[32];$/;"	m	class:CKey
vch	pubkey.h	/^    unsigned char vch[65];$/;"	m	class:CPubKey
vch	streams.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchBlock	main.cpp	/^    vector<unsigned char> vchBlock;$/;"	m	struct:COrphanBlock	file:
vchBuf	streams.h	/^    std::vector<char> vchBuf; \/\/ the buffer$/;"	m	class:CBufferedFile
vchCryptedKey	wallet/crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	base58.h	/^    vector_uchar vchData;$/;"	m	class:CBase58Data
vchDefaultKey	wallet/wallet.h	/^    CPubKey vchDefaultKey;$/;"	m	class:CWallet
vchFingerprint	key.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtKey
vchFingerprint	pubkey.h	/^    unsigned char vchFingerprint[4];$/;"	m	struct:CExtPubKey
vchKey0	test/script_tests.cpp	/^const unsigned char vchKey0[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};$/;"	m	namespace:__anon94	file:
vchKey1	test/script_tests.cpp	/^const unsigned char vchKey1[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};$/;"	m	namespace:__anon94	file:
vchKey2	test/script_tests.cpp	/^const unsigned char vchKey2[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};$/;"	m	namespace:__anon94	file:
vchMaxModHalfOrder	eccryptoverify.cpp	/^const unsigned char vchMaxModHalfOrder[32] = {$/;"	m	namespace:__anon62	file:
vchMaxModOrder	eccryptoverify.cpp	/^const unsigned char vchMaxModOrder[32] = {$/;"	m	namespace:__anon62	file:
vchMsg	alert.h	/^    std::vector<unsigned char> vchMsg;$/;"	m	class:CAlert
vchOtherDerivationParameters	wallet/crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	wallet/wallet.h	/^    CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPubKey	wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CAccount
vchPubKey	wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CKeyPool
vchPubKey	wallet/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CReserveKey
vchSalt	wallet/crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vchSig	alert.h	/^    std::vector<unsigned char> vchSig;$/;"	m	class:CAlert
vchVersion	base58.h	/^    std::vector<unsigned char> vchVersion;$/;"	m	class:CBase58Data
vchZero	eccryptoverify.cpp	/^const unsigned char vchZero[1] = {0};$/;"	m	namespace:__anon62	file:
vector_type	streams.h	/^    typedef CSerializeData vector_type;$/;"	t	class:CDataStream
vector_uchar	base58.h	/^    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;$/;"	t	class:CBase58Data
verify	secp256k1/src/java/org/bitcoin/NativeSecp256k1.java	/^    public static boolean verify(byte[] data, byte[] signature, byte[] pub) {$/;"	m	class:NativeSecp256k1
verify	test/scriptnum_tests.cpp	/^static bool verify(const CBigNum& bignum, const CScriptNum& scriptnum)$/;"	f	file:
verify_checksums	leveldb/include/leveldb/options.h	/^  bool verify_checksums;$/;"	m	struct:leveldb::ReadOptions
verifychain	rpcblockchain.cpp	/^Value verifychain(const Array& params, bool fHelp)$/;"	f
verifymessage	rpcmisc.cpp	/^Value verifymessage(const Array& params, bool fHelp)$/;"	f
verifytxoutproof	rpcrawtransaction.cpp	/^Value verifytxoutproof(const Array& params, bool fHelp)$/;"	f
version	leveldb/db/db_impl.cc	/^  Version* version;$/;"	m	struct:leveldb::__anon14::IterState	file:
versions_	leveldb/db/db_impl.h	/^  VersionSet* versions_;$/;"	m	class:leveldb::DBImpl
vfLimited	net.cpp	/^static bool vfLimited[NET_MAX] = {};$/;"	v	file:
vfReachable	net.cpp	/^static bool vfReachable[NET_MAX] = {};$/;"	v	file:
vhListenSocket	net.cpp	/^static vector<ListenSocket> vhListenSocket;$/;"	v	file:
vin	primitives/transaction.h	/^    const std::vector<CTxIn> vin;$/;"	m	class:CTransaction
vin	primitives/transaction.h	/^    std::vector<CTxIn> vin;$/;"	m	struct:CMutableTransaction
vinfoBlockFile	main.cpp	/^    std::vector<CBlockFileInfo> vinfoBlockFile;$/;"	m	namespace:__anon46	file:
vout	coins.h	/^    std::vector<CTxOut> vout;$/;"	m	class:CCoins
vout	main.h	/^    std::vector<CTxOut> vout;$/;"	m	class:TxInfo
vout	primitives/transaction.h	/^    const std::vector<CTxOut> vout;$/;"	m	class:CTransaction
vout	primitives/transaction.h	/^    std::vector<CTxOut> vout;$/;"	m	struct:CMutableTransaction
vout	wallet/wallet.h	/^    int vout;$/;"	m	struct:COutputEntry
vprevout	undo.h	/^    std::vector<CTxInUndo> vprevout;$/;"	m	class:CTxUndo
vset_	leveldb/db/version_set.cc	/^  VersionSet* vset_;$/;"	m	class:leveldb::VersionSet::Builder	file:
vset_	leveldb/db/version_set.h	/^  VersionSet* vset_;            \/\/ VersionSet to which this Version belongs$/;"	m	class:leveldb::Version
vtx	primitives/block.h	/^    std::vector<CTransaction> vtx;$/;"	m	class:CBlock
vtxundo	undo.h	/^    std::vector<CTxUndo> vtxundo; \/\/ for all but the coinbase$/;"	m	class:CBlockUndo
vvNew	addrman.h	/^    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];$/;"	m	class:CAddrMan
vvTried	addrman.h	/^    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];$/;"	m	class:CAddrMan
wArray	json/json_spirit_value.h	/^    typedef wConfig::Array_type  wArray;$/;"	t	namespace:json_spirit
wConfig	json/json_spirit_value.h	/^    typedef Config_vector< std::wstring > wConfig;$/;"	t	namespace:json_spirit
wMapped_obj	json/json_spirit_utils.h	/^    typedef std::map< std::wstring, wValue > wMapped_obj;$/;"	t	namespace:json_spirit
wObject	json/json_spirit_value.h	/^    typedef wConfig::Object_type wObject;$/;"	t	namespace:json_spirit
wPair	json/json_spirit_value.h	/^    typedef wConfig::Pair_type   wPair;$/;"	t	namespace:json_spirit
wValue	json/json_spirit_value.h	/^    typedef wConfig::Value_type  wValue;$/;"	t	namespace:json_spirit
wait	sync.h	/^    void wait()$/;"	f	class:CSemaphore
wait_mtx_	leveldb/port/port_win.h	/^  Mutex wait_mtx_;$/;"	m	class:leveldb::port::CondVar
waiting_	leveldb/port/port_win.h	/^  long waiting_;$/;"	m	class:leveldb::port::CondVar
wallet	wallet/test/wallet_tests.cpp	/^static CWallet wallet;$/;"	v	file:
walletlock	wallet/rpcwallet.cpp	/^Value walletlock(const Array& params, bool fHelp)$/;"	f
walletpassphrase	wallet/rpcwallet.cpp	/^Value walletpassphrase(const Array& params, bool fHelp)$/;"	f
walletpassphrasechange	wallet/rpcwallet.cpp	/^Value walletpassphrasechange(const Array& params, bool fHelp)$/;"	f
when	net.h	/^        int64_t when() const { return when_; }$/;"	f	class:CNetRecorder::CBandwidthRecord
when	net.h	/^        int64_t when() const { return when_; }$/;"	f	class:CNetRecorder::CRTTRecord
when_	net.h	/^        int64_t when_;$/;"	m	class:CNetRecorder::CBandwidthRecord
when_	net.h	/^        int64_t when_;$/;"	m	class:CNetRecorder::CRTTRecord
whitelisted	net.cpp	/^    bool whitelisted;$/;"	m	struct:__anon9::ListenSocket	file:
wmArray	json/json_spirit_value.h	/^    typedef wmConfig::Array_type  wmArray;$/;"	t	namespace:json_spirit
wmConfig	json/json_spirit_value.h	/^    typedef Config_map< std::wstring > wmConfig;$/;"	t	namespace:json_spirit
wmObject	json/json_spirit_value.h	/^    typedef wmConfig::Object_type wmObject;$/;"	t	namespace:json_spirit
wmValue	json/json_spirit_value.h	/^    typedef wmConfig::Value_type  wmValue;$/;"	t	namespace:json_spirit
wnaf	secp256k1/src/bench_internal.c	/^    int wnaf[256];$/;"	m	struct:__anon79	file:
writable_file_error_	leveldb/util/testutil.h	/^  bool writable_file_error_;$/;"	m	class:leveldb::test::ErrorEnv
write	hash.h	/^    CHashWriter& write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
write	json/json_spirit_writer.cpp	/^std::string json_spirit::write( const Value& value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::string json_spirit::write( const mValue& value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write( const wValue&  value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write( const wmValue&  value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const Value& value, std::ostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const mValue& value, std::ostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const wValue& value, std::wostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const wmValue& value, std::wostream& os )$/;"	f	class:json_spirit
write	rpcprotocol.h	/^    std::streamsize write(const char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
write	serialize.h	/^    CSizeComputer& write(const char *psz, size_t nSize)$/;"	f	class:CSizeComputer
write	streams.h	/^    CAutoFile& write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	streams.h	/^    CDataStream& write(const char* pch, size_t nSize)$/;"	f	class:CDataStream
write	univalue/univalue_write.cpp	/^string UniValue::write(unsigned int prettyIndent,$/;"	f	class:UniValue
writeArray	univalue/univalue_write.cpp	/^void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const$/;"	f	class:UniValue
writeObject	univalue/univalue_write.cpp	/^void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const$/;"	f	class:UniValue
write_buffer_size	leveldb/include/leveldb/options.h	/^  size_t write_buffer_size;$/;"	m	struct:leveldb::Options
write_formatted	json/json_spirit_writer.cpp	/^std::string json_spirit::write_formatted( const Value& value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::string json_spirit::write_formatted( const mValue& value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write_formatted( const wValue&  value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write_formatted( const wmValue&  value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const Value& value, std::ostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const mValue& value, std::ostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const wValue& value, std::wostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const wmValue& value, std::wostream& os )$/;"	f	class:json_spirit
write_options_	leveldb/db/db_bench.cc	/^  WriteOptions write_options_;$/;"	m	class:leveldb::Benchmark	file:
write_stream	json/json_spirit_writer_template.h	/^    void write_stream( const Value_type& value, Ostream_type& os, bool pretty )$/;"	f	namespace:json_spirit
write_string	json/json_spirit_writer_template.h	/^    typename Value_type::String_type write_string( const Value_type& value, bool pretty )$/;"	f	namespace:json_spirit
writeoptions	leveldbwrapper.h	/^    leveldb::WriteOptions writeoptions;$/;"	m	class:CLevelDBWrapper
writer_	leveldb/db/log_test.cc	/^  Writer writer_;$/;"	m	class:leveldb::log::LogTest	file:
writers_	leveldb/db/db_impl.h	/^  std::deque<Writer*> writers_;$/;"	m	class:leveldb::DBImpl
x	memusage.h	/^    X x;$/;"	m	struct:memusage::stl_tree_node
x	secp256k1/src/group.h	/^    secp256k1_fe_storage_t x;$/;"	m	struct:__anon72
x	secp256k1/src/group.h	/^    secp256k1_fe_t x; \/* actual X: x\/z^2 *\/$/;"	m	struct:__anon71
x	secp256k1/src/group.h	/^    secp256k1_fe_t x;$/;"	m	struct:__anon70
y	secp256k1/src/group.h	/^    secp256k1_fe_storage_t y;$/;"	m	struct:__anon72
y	secp256k1/src/group.h	/^    secp256k1_fe_t y; \/* actual Y: y\/z^3 *\/$/;"	m	struct:__anon71
y	secp256k1/src/group.h	/^    secp256k1_fe_t y;$/;"	m	struct:__anon70
z	secp256k1/src/group.h	/^    secp256k1_fe_t z;$/;"	m	struct:__anon71
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	support/allocators/zeroafterfree.h	/^struct zero_after_free_allocator : public std::allocator<T> {$/;"	s
~AcceptedConnection	rpcserver.h	/^    virtual ~AcceptedConnection() {}$/;"	f	class:AcceptedConnection
~ActivateAddr	cache.h	/^    ~ActivateAddr()$/;"	f	class:activate_addr::ActivateAddr
~AllianceMember	cache.h	/^    ~AllianceMember()$/;"	f	class:alliance_member::AllianceMember
~Arena	leveldb/util/arena.cc	/^Arena::~Arena() {$/;"	f	class:leveldb::Arena
~AutoCompactTest	leveldb/db/autocompact_test.cc	/^  ~AutoCompactTest() {$/;"	f	class:leveldb::AutoCompactTest
~BaseSignatureChecker	script/interpreter.h	/^    virtual ~BaseSignatureChecker() {}$/;"	f	class:BaseSignatureChecker
~BaseSignatureCreator	script/sign.h	/^    virtual ~BaseSignatureCreator() {}$/;"	f	class:BaseSignatureCreator
~BasicTestingSetup	test/test_bitcoin.cpp	/^BasicTestingSetup::~BasicTestingSetup()$/;"	f	class:BasicTestingSetup
~Benchmark	leveldb/db/db_bench.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	leveldb/doc/bench/db_bench_sqlite3.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Benchmark	leveldb/doc/bench/db_bench_tree_db.cc	/^  ~Benchmark() {$/;"	f	class:leveldb::Benchmark
~Block	leveldb/table/block.cc	/^Block::~Block() {$/;"	f	class:leveldb::Block
~BlockConstructor	leveldb/table/table_test.cc	/^  ~BlockConstructor() {$/;"	f	class:leveldb::BlockConstructor
~BlockMiner	cache.h	/^    ~BlockMiner()$/;"	f	class:block_miner::BlockMiner
~BloomTest	leveldb/util/bloom_test.cc	/^  ~BloomTest() {$/;"	f	class:leveldb::BloomTest
~Builder	leveldb/db/version_set.cc	/^  ~Builder() {$/;"	f	class:leveldb::VersionSet::Builder
~CAddrMan	addrman.h	/^    ~CAddrMan()$/;"	f	class:CAddrMan
~CAutoFile	streams.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBigNum	test/bignum.h	/^    ~CBigNum()$/;"	f	class:CBigNum
~CBufferedFile	streams.h	/^    ~CBufferedFile()$/;"	f	class:CBufferedFile
~CCheckQueue	checkqueue.h	/^    ~CCheckQueue()$/;"	f	class:CCheckQueue
~CCheckQueueControl	checkqueue.h	/^    ~CCheckQueueControl()$/;"	f	class:CCheckQueueControl
~CCoinsModifier	coins.cpp	/^CCoinsModifier::~CCoinsModifier()$/;"	f	class:CCoinsModifier
~CCoinsView	coins.h	/^    virtual ~CCoinsView() {}$/;"	f	class:CCoinsView
~CCoinsViewCache	coins.cpp	/^CCoinsViewCache::~CCoinsViewCache()$/;"	f	class:CCoinsViewCache
~CCrypter	wallet/crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDB	wallet/db.h	/^    ~CDB() { Close(); }$/;"	f	class:CDB
~CDBEnv	wallet/db.cpp	/^CDBEnv::~CDBEnv()$/;"	f	class:CDBEnv
~CECKey	ecwrapper.cpp	/^CECKey::~CECKey() {$/;"	f	class:CECKey
~CFileReader	net.cpp	/^CNetRecorder::CFileReader::~CFileReader()$/;"	f	class:CNetRecorder::CFileReader
~CFileWriter	net.h	/^        ~CFileWriter()$/;"	f	class:CNetRecorder::CFileWriter
~CImportingNow	init.cpp	/^    ~CImportingNow()$/;"	f	struct:CImportingNow
~CInit	util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKey	key.h	/^    ~CKey()$/;"	f	class:CKey
~CKeyStore	keystore.h	/^    virtual ~CKeyStore() {}$/;"	f	class:CKeyStore
~CLevelDBWrapper	leveldbwrapper.cpp	/^CLevelDBWrapper::~CLevelDBWrapper()$/;"	f	class:CLevelDBWrapper
~CMainCleanup	main.cpp	/^    ~CMainCleanup()$/;"	f	class:CMainCleanup
~CMutexLock	sync.h	/^    ~CMutexLock()$/;"	f	class:CMutexLock
~CNetCleanup	net.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNode	net.cpp	/^CNode::~CNode()$/;"	f	class:CNode
~CRecord	net.h	/^        virtual ~CRecord() {}$/;"	f	class:CNetRecorder::CRecord
~CReserveKey	wallet/wallet.h	/^    ~CReserveKey()$/;"	f	class:CReserveKey
~CScheduler	scheduler.cpp	/^CScheduler::~CScheduler()$/;"	f	class:CScheduler
~CSemaphoreGrant	sync.h	/^    ~CSemaphoreGrant()$/;"	f	class:CSemaphoreGrant
~CTxMemPool	txmempool.cpp	/^CTxMemPool::~CTxMemPool()$/;"	f	class:CTxMemPool
~CVerifyDB	main.cpp	/^CVerifyDB::~CVerifyDB()$/;"	f	class:CVerifyDB
~CWallet	wallet/wallet.h	/^    ~CWallet()$/;"	f	class:CWallet
~Cache	leveldb/util/cache.cc	/^Cache::~Cache() {$/;"	f	class:leveldb::Cache
~CacheInterface	cache.h	/^    virtual ~CacheInterface()$/;"	f	class:CacheInterface
~CacheSetupFixture	test/test_bitcoin.h	/^    ~CacheSetupFixture()$/;"	f	struct:CacheSetupFixture
~CacheTest	leveldb/util/cache_test.cc	/^  ~CacheTest() {$/;"	f	class:leveldb::CacheTest
~CacheTestFixture	test/cache_activate.cpp	/^    ~CacheTestFixture()$/;"	f	struct:CacheTestFixture
~CacheTestFixture	test/cache_color_license.cpp	/^    ~CacheTestFixture()$/;"	f	struct:CacheTestFixture
~ColorLicense	cache.h	/^    ~ColorLicense()$/;"	f	class:color_license::ColorLicense
~Compaction	leveldb/db/version_set.cc	/^Compaction::~Compaction() {$/;"	f	class:leveldb::Compaction
~Comparator	leveldb/util/comparator.cc	/^Comparator::~Comparator() { }$/;"	f	class:leveldb::Comparator
~CondVar	leveldb/port/port_posix.cc	/^CondVar::~CondVar() { PthreadCall("destroy cv", pthread_cond_destroy(&cv_)); }$/;"	f	class:leveldb::port::CondVar
~CondVar	leveldb/port/port_win.cc	/^CondVar::~CondVar() {$/;"	f	class:leveldb::port::CondVar
~Constructor	leveldb/table/table_test.cc	/^  virtual ~Constructor() { }$/;"	f	class:leveldb::Constructor
~CorruptionTest	leveldb/db/corruption_test.cc	/^  ~CorruptionTest() {$/;"	f	class:leveldb::CorruptionTest
~CreateLicenseHandlerCheckValidFixture	test/handler_license.cpp	/^    ~CreateLicenseHandlerCheckValidFixture()$/;"	f	struct:CreateLicenseHandlerCheckValidFixture
~DB	leveldb/db/db_impl.cc	/^DB::~DB() { }$/;"	f	class:leveldb::DB
~DBConstructor	leveldb/table/table_test.cc	/^  ~DBConstructor() {$/;"	f	class:leveldb::DBConstructor
~DBImpl	leveldb/db/db_impl.cc	/^DBImpl::~DBImpl() {$/;"	f	class:leveldb::DBImpl
~DBIter	leveldb/db/db_iter.cc	/^  virtual ~DBIter() {$/;"	f	class:leveldb::__anon22::DBIter
~DBTest	leveldb/db/db_test.cc	/^  ~DBTest() {$/;"	f	class:leveldb::DBTest
~Env	leveldb/util/env.cc	/^Env::~Env() {$/;"	f	class:leveldb::Env
~EnvWrapper	leveldb/util/env.cc	/^EnvWrapper::~EnvWrapper() {$/;"	f	class:leveldb::EnvWrapper
~FileLock	leveldb/util/env.cc	/^FileLock::~FileLock() {$/;"	f	class:leveldb::FileLock
~FileState	leveldb/helpers/memenv/memenv.cc	/^  ~FileState() {$/;"	f	class:leveldb::__anon26::FileState	file:
~FilterPolicy	leveldb/util/filter_policy.cc	/^FilterPolicy::~FilterPolicy() { }$/;"	f	class:leveldb::FilterPolicy
~FindFileTest	leveldb/db/version_set_test.cc	/^  ~FindFileTest() {$/;"	f	class:leveldb::FindFileTest
~FormatIterator	tinyformat.h	/^        ~FormatIterator()$/;"	f	class:tinyformat::detail::FormatIterator
~GlobalSetupFixture	test/test_bitcoin.h	/^    ~GlobalSetupFixture()$/;"	f	struct:GlobalSetupFixture
~HandleTable	leveldb/util/cache.cc	/^  ~HandleTable() { delete[] list_; }$/;"	f	class:leveldb::__anon39::HandleTable
~Handler	leveldb/db/write_batch.cc	/^WriteBatch::Handler::~Handler() { }$/;"	f	class:leveldb::WriteBatch::Handler
~Handler_License_	main.cpp	/^    ~Handler_License_()$/;"	f	class:type_transaction_handler::__anon48::Handler_License_
~Harness	leveldb/table/table_test.cc	/^  ~Harness() {$/;"	f	class:leveldb::Harness
~Histogram	leveldb/util/histogram.h	/^  ~Histogram() { }$/;"	f	class:leveldb::Histogram
~InMemoryEnv	leveldb/helpers/memenv/memenv.cc	/^  virtual ~InMemoryEnv() {$/;"	f	class:leveldb::__anon26::InMemoryEnv
~Iterator	leveldb/table/iterator.cc	/^Iterator::~Iterator() {$/;"	f	class:leveldb::Iterator
~IteratorWrapper	leveldb/table/iterator_wrapper.h	/^  ~IteratorWrapper() { delete iter_; }$/;"	f	class:leveldb::IteratorWrapper
~KeyConvertingIterator	leveldb/table/table_test.cc	/^  virtual ~KeyConvertingIterator() { delete iter_; }$/;"	f	class:leveldb::KeyConvertingIterator
~LRUCache	leveldb/util/cache.cc	/^LRUCache::~LRUCache() {$/;"	f	class:leveldb::__anon39::LRUCache
~LicenseHandlerFixture	test/handler_license.cpp	/^    ~LicenseHandlerFixture()$/;"	f	struct:LicenseHandlerFixture
~LockedPageManagerBase	support/pagelocker.h	/^    ~LockedPageManagerBase()$/;"	f	class:LockedPageManagerBase
~Logger	leveldb/util/env.cc	/^Logger::~Logger() {$/;"	f	class:leveldb::Logger
~LookupKey	leveldb/db/dbformat.h	/^inline LookupKey::~LookupKey() {$/;"	f	class:leveldb::LookupKey
~MemEnvTest	leveldb/helpers/memenv/memenv_test.cc	/^  ~MemEnvTest() {$/;"	f	class:leveldb::MemEnvTest
~MemTable	leveldb/db/memtable.cc	/^MemTable::~MemTable() {$/;"	f	class:leveldb::MemTable
~MemTableConstructor	leveldb/table/table_test.cc	/^  ~MemTableConstructor() {$/;"	f	class:leveldb::MemTableConstructor
~MergingIterator	leveldb/table/merger.cc	/^  virtual ~MergingIterator() {$/;"	f	class:leveldb::__anon28::MergingIterator
~ModelDB	leveldb/db/db_test.cc	/^  ~ModelDB() { }$/;"	f	class:leveldb::ModelDB
~ModelIter	leveldb/db/db_test.cc	/^    ~ModelIter() {$/;"	f	class:leveldb::ModelDB::ModelIter
~Mutex	leveldb/port/port_posix.cc	/^Mutex::~Mutex() { PthreadCall("destroy mutex", pthread_mutex_destroy(&mu_)); }$/;"	f	class:leveldb::port::Mutex
~Mutex	leveldb/port/port_win.cc	/^Mutex::~Mutex() {$/;"	f	class:leveldb::port::Mutex
~NormalHandlerCheckValidFixture	test/handler_normal.cpp	/^    ~NormalHandlerCheckValidFixture()$/;"	f	struct:NormalHandlerCheckValidFixture
~NormalHandlerFixture	test/handler_normal.cpp	/^    ~NormalHandlerFixture()$/;"	f	struct:NormalHandlerFixture
~OrderList	cache.h	/^    ~OrderList()$/;"	f	class:order_list::OrderList
~PosixEnv	leveldb/util/env_posix.cc	/^  virtual ~PosixEnv() {$/;"	f	class:leveldb::__anon42::PosixEnv
~PosixLogger	leveldb/util/posix_logger.h	/^  virtual ~PosixLogger() {$/;"	f	class:leveldb::PosixLogger
~PosixMmapReadableFile	leveldb/util/env_posix.cc	/^  virtual ~PosixMmapReadableFile() {$/;"	f	class:leveldb::__anon42::PosixMmapReadableFile
~PosixRandomAccessFile	leveldb/util/env_posix.cc	/^  virtual ~PosixRandomAccessFile() { close(fd_); }$/;"	f	class:leveldb::__anon42::PosixRandomAccessFile
~PosixSequentialFile	leveldb/util/env_posix.cc	/^  virtual ~PosixSequentialFile() { fclose(file_); }$/;"	f	class:leveldb::__anon42::PosixSequentialFile
~PosixWritableFile	leveldb/util/env_posix.cc	/^  ~PosixWritableFile() {$/;"	f	class:leveldb::__anon42::PosixWritableFile
~RPCTestFixture	test/rpc_command.cpp	/^    ~RPCTestFixture()$/;"	f	struct:RPCTestFixture
~RPCTestWalletFixture	test/rpc_command.cpp	/^    ~RPCTestWalletFixture()$/;"	f	struct:RPCTestWalletFixture
~RandomAccessFile	leveldb/util/env.cc	/^RandomAccessFile::~RandomAccessFile() {$/;"	f	class:leveldb::RandomAccessFile
~RandomAccessFileImpl	leveldb/helpers/memenv/memenv.cc	/^  ~RandomAccessFileImpl() {$/;"	f	class:leveldb::__anon26::RandomAccessFileImpl
~ReadAlerts	test/alert_tests.cpp	/^    ~ReadAlerts() { }$/;"	f	struct:ReadAlerts
~Reader	leveldb/db/log_reader.cc	/^Reader::~Reader() {$/;"	f	class:leveldb::log::Reader
~Rep	leveldb/table/table.cc	/^  ~Rep() {$/;"	f	struct:leveldb::Table::Rep
~Repairer	leveldb/db/repair.cc	/^  ~Repairer() {$/;"	f	class:leveldb::__anon17::Repairer
~Reporter	leveldb/db/log_reader.cc	/^Reader::Reporter::~Reporter() {$/;"	f	class:leveldb::log::Reader::Reporter
~SequentialFile	leveldb/util/env.cc	/^SequentialFile::~SequentialFile() {$/;"	f	class:leveldb::SequentialFile
~SequentialFileImpl	leveldb/helpers/memenv/memenv.cc	/^  ~SequentialFileImpl() {$/;"	f	class:leveldb::__anon26::SequentialFileImpl
~ShardedLRUCache	leveldb/util/cache.cc	/^  virtual ~ShardedLRUCache() { }$/;"	f	class:leveldb::__anon39::ShardedLRUCache
~Snapshot	leveldb/db/db_impl.cc	/^Snapshot::~Snapshot() {$/;"	f	class:leveldb::Snapshot
~Status	leveldb/include/leveldb/status.h	/^  ~Status() { delete[] state_; }$/;"	f	class:leveldb::Status
~StringSink	leveldb/table/table_test.cc	/^  ~StringSink() { }$/;"	f	class:leveldb::StringSink
~StringSource	leveldb/table/table_test.cc	/^  virtual ~StringSource() { }$/;"	f	class:leveldb::StringSource
~Table	leveldb/table/table.cc	/^Table::~Table() {$/;"	f	class:leveldb::Table
~TableBuilder	leveldb/table/table_builder.cc	/^TableBuilder::~TableBuilder() {$/;"	f	class:leveldb::TableBuilder
~TableCache	leveldb/db/table_cache.cc	/^TableCache::~TableCache() {$/;"	f	class:leveldb::TableCache
~TableConstructor	leveldb/table/table_test.cc	/^  ~TableConstructor() {$/;"	f	class:leveldb::TableConstructor
~Tester	leveldb/util/testharness.h	/^  ~Tester() {$/;"	f	class:leveldb::test::Tester
~TestingSetup	test/test_bitcoin.cpp	/^TestingSetup::~TestingSetup()$/;"	f	class:TestingSetup
~TransferLicenseHandlerCheckValidFixture	test/handler_license.cpp	/^    ~TransferLicenseHandlerCheckValidFixture()$/;"	f	struct:TransferLicenseHandlerCheckValidFixture
~TwoLevelIterator	leveldb/table/two_level_iterator.cc	/^TwoLevelIterator::~TwoLevelIterator() {$/;"	f	class:leveldb::__anon30::TwoLevelIterator
~UniValue	univalue/univalue.h	/^    ~UniValue() {}$/;"	f	class:UniValue
~Version	leveldb/db/version_set.cc	/^Version::~Version() {$/;"	f	class:leveldb::Version
~VersionEdit	leveldb/db/version_edit.h	/^  ~VersionEdit() { }$/;"	f	class:leveldb::VersionEdit
~VersionSet	leveldb/db/version_set.cc	/^VersionSet::~VersionSet() {$/;"	f	class:leveldb::VersionSet
~WalletSetupFixture	test/test_bitcoin.h	/^    ~WalletSetupFixture()$/;"	f	struct:WalletSetupFixture
~Win32Env	leveldb/util/env_win.cc	/^Win32Env::~Win32Env()$/;"	f	class:leveldb::Win32::Win32Env
~Win32FileLock	leveldb/util/env_win.cc	/^Win32FileLock::~Win32FileLock()$/;"	f	class:leveldb::Win32::Win32FileLock
~Win32Logger	leveldb/util/env_win.cc	/^Win32Logger::~Win32Logger()$/;"	f	class:leveldb::Win32::Win32Logger
~Win32MapFile	leveldb/util/env_win.cc	/^Win32MapFile::~Win32MapFile()$/;"	f	class:leveldb::Win32::Win32MapFile
~Win32RandomAccessFile	leveldb/util/env_win.cc	/^Win32RandomAccessFile::~Win32RandomAccessFile()$/;"	f	class:leveldb::Win32::Win32RandomAccessFile
~Win32SequentialFile	leveldb/util/env_win.cc	/^Win32SequentialFile::~Win32SequentialFile()$/;"	f	class:leveldb::Win32::Win32SequentialFile
~WritableFile	leveldb/util/env.cc	/^WritableFile::~WritableFile() {$/;"	f	class:leveldb::WritableFile
~WritableFileImpl	leveldb/helpers/memenv/memenv.cc	/^  ~WritableFileImpl() {$/;"	f	class:leveldb::__anon26::WritableFileImpl
~WriteBatch	leveldb/db/write_batch.cc	/^WriteBatch::~WriteBatch() { }$/;"	f	class:leveldb::WriteBatch
~Writer	leveldb/db/log_writer.cc	/^Writer::~Writer() {$/;"	f	class:leveldb::log::Writer
~leveldb_comparator_t	leveldb/db/c.cc	/^  virtual ~leveldb_comparator_t() {$/;"	f	struct:leveldb_comparator_t
~leveldb_filterpolicy_t	leveldb/db/c.cc	/^  virtual ~leveldb_filterpolicy_t() {$/;"	f	struct:leveldb_filterpolicy_t
~secure_allocator	support/allocators/secure.h	/^    ~secure_allocator() throw() {}$/;"	f	struct:secure_allocator
~zero_after_free_allocator	support/allocators/zeroafterfree.h	/^    ~zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
